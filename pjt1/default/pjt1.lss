
pjt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  0000026a  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000009d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000533  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a6  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000127  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006b  00000000  00000000  000016c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a1 30       	cpi	r26, 0x01	; 1
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 cb 00 	call	0x196	; 0x196 <main>
 124:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include<avr/io.h>
#include"pjt1led.h"
static uint8_t Leds;

void led_init(){
	DDRL = PORTL =0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:
void led_on_all(){
	Leds = PORTL = 0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 00 02 	sts	0x0200, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:
void led_off_all(){
	Leds = PORTL = 0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 00 02 	sts	0x0200, r24
}
 14c:	08 95       	ret

0000014e <led_on>:
void led_on(uint8_t led_no){
	Leds &= (1 << led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	80 91 00 02 	lds	r24, 0x0200
 160:	82 23       	and	r24, r18
 162:	80 93 00 02 	sts	0x0200, r24
	PORTL = Leds;
 166:	80 93 0b 01 	sts	0x010B, r24
}
 16a:	08 95       	ret

0000016c <led_off>:
void led_off(uint8_t led_no){
	Leds |= (1 << led_no);
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <led_off+0xa>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <led_off+0x6>
 17a:	80 91 00 02 	lds	r24, 0x0200
 17e:	82 2b       	or	r24, r18
 180:	80 93 00 02 	sts	0x0200, r24
	PORTL = Leds;
 184:	80 93 0b 01 	sts	0x010B, r24
}
 188:	08 95       	ret

0000018a <led_set>:
void led_set(uint8_t led_mask){
	Leds = ~led_mask;
 18a:	80 95       	com	r24
 18c:	80 93 00 02 	sts	0x0200, r24
	PORTL = Leds;
 190:	80 93 0b 01 	sts	0x010B, r24
}
 194:	08 95       	ret

00000196 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"pjt1led.h"
int main(){
	int i=0;
	led_init();
 196:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>
#include<avr/io.h>
#include<util/delay.h>
#include"pjt1led.h"
int main(){
	int i=0;
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	led_init();
	while(1){
		led_off(i%8);
 19e:	8c 2f       	mov	r24, r28
 1a0:	87 70       	andi	r24, 0x07	; 7
 1a2:	0e 94 b6 00 	call	0x16c	; 0x16c <led_off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f ed       	ldi	r24, 0xDF	; 223
 1a8:	93 e9       	ldi	r25, 0x93	; 147
 1aa:	a4 e0       	ldi	r26, 0x04	; 4
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x16>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x20>
 1b6:	00 00       	nop
		_delay_ms(1500);
		led_on_all();
 1b8:	0e 94 9c 00 	call	0x138	; 0x138 <led_on_all>
 1bc:	8f ed       	ldi	r24, 0xDF	; 223
 1be:	93 e9       	ldi	r25, 0x93	; 147
 1c0:	a4 e0       	ldi	r26, 0x04	; 4
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	a0 40       	sbci	r26, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x2c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x36>
 1cc:	00 00       	nop
		_delay_ms(1500);
		i++;
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	e6 cf       	rjmp	.-52     	; 0x19e <main+0x8>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
