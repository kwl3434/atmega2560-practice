
pjt13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026c  00800200  000029d6  00002a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c4  0080046c  0080046c  00002cd6  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e8  00000000  00000000  000041f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dee  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026a2  00000000  00000000  000094ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002487  00000000  00000000  0000bb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  0000dff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc8  00000000  00000000  0000ed28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f87  00000000  00000000  0000f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00012877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_24>
      64:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ed       	ldi	r30, 0xD6	; 214
      fc:	f9 e2       	ldi	r31, 0x29	; 41
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 36       	cpi	r26, 0x6C	; 108
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	17 e0       	ldi	r17, 0x07	; 7
     112:	ac e6       	ldi	r26, 0x6C	; 108
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 33       	cpi	r26, 0x30	; 48
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <main>
     124:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include<avr/interrupt.h>
#include<compat/deprecated.h>
#include<util/delay.h>
void adc_init()
{
	cbi(DDRF, PF0);
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA,ADIE);
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA,ADSC);
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <led_init>:
#include<avr/io.h>
static uint8_t Leds;

void led_init(){
	DDRL = PORTL =0xff;
     156:	8f ef       	ldi	r24, 0xFF	; 255
     158:	80 93 0b 01 	sts	0x010B, r24
     15c:	80 93 0a 01 	sts	0x010A, r24
}
     160:	08 95       	ret

00000162 <led_on_all>:
void led_on_all(){
	Leds = PORTL = 0x00;
     162:	10 92 0b 01 	sts	0x010B, r1
     166:	10 92 6c 04 	sts	0x046C, r1
}
     16a:	08 95       	ret

0000016c <led_off_all>:
void led_off_all(){
	Leds = PORTL = 0xff;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	80 93 0b 01 	sts	0x010B, r24
     172:	80 93 6c 04 	sts	0x046C, r24
}
     176:	08 95       	ret

00000178 <led_on>:
void led_on(uint8_t led_no){
	Leds &= (1 << led_no);
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <led_on+0xa>
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	8a 95       	dec	r24
     184:	e2 f7       	brpl	.-8      	; 0x17e <led_on+0x6>
     186:	80 91 6c 04 	lds	r24, 0x046C
     18a:	82 23       	and	r24, r18
     18c:	80 93 6c 04 	sts	0x046C, r24
	PORTL = Leds;
     190:	80 93 0b 01 	sts	0x010B, r24
}
     194:	08 95       	ret

00000196 <led_off>:
void led_off(uint8_t led_no){
	Leds |= (1 << led_no);
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <led_off+0xa>
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	8a 95       	dec	r24
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <led_off+0x6>
     1a4:	80 91 6c 04 	lds	r24, 0x046C
     1a8:	82 2b       	or	r24, r18
     1aa:	80 93 6c 04 	sts	0x046C, r24
	PORTL = Leds;
     1ae:	80 93 0b 01 	sts	0x010B, r24
}
     1b2:	08 95       	ret

000001b4 <led_set>:
void led_set(uint8_t led_mask){
	Leds = ~led_mask;
     1b4:	80 95       	com	r24
     1b6:	80 93 6c 04 	sts	0x046C, r24
	PORTL = Leds;
     1ba:	80 93 0b 01 	sts	0x010B, r24
}
     1be:	08 95       	ret

000001c0 <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     1c0:	fc 01       	movw	r30, r24
	if(!Head){
     1c2:	80 91 6d 04 	lds	r24, 0x046D
     1c6:	90 91 6e 04 	lds	r25, 0x046E
     1ca:	00 97       	sbiw	r24, 0x00	; 0
     1cc:	39 f4       	brne	.+14     	; 0x1dc <insert_node_head+0x1c>
		Head = np;
     1ce:	f0 93 6e 04 	sts	0x046E, r31
     1d2:	e0 93 6d 04 	sts	0x046D, r30
		np->link = NULL;
     1d6:	13 82       	std	Z+3, r1	; 0x03
     1d8:	12 82       	std	Z+2, r1	; 0x02
     1da:	08 95       	ret
	}else {
		np->link = Head;
     1dc:	93 83       	std	Z+3, r25	; 0x03
     1de:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     1e0:	f0 93 6e 04 	sts	0x046E, r31
     1e4:	e0 93 6d 04 	sts	0x046D, r30
     1e8:	08 95       	ret

000001ea <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     1ea:	e0 91 6d 04 	lds	r30, 0x046D
     1ee:	f0 91 6e 04 	lds	r31, 0x046E
     1f2:	30 97       	sbiw	r30, 0x00	; 0
     1f4:	31 f4       	brne	.+12     	; 0x202 <insert_node_tail+0x18>
		Head = np;
     1f6:	90 93 6e 04 	sts	0x046E, r25
     1fa:	80 93 6d 04 	sts	0x046D, r24
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     200:	f9 01       	movw	r30, r18
     202:	22 81       	ldd	r18, Z+2	; 0x02
     204:	33 81       	ldd	r19, Z+3	; 0x03
     206:	21 15       	cp	r18, r1
     208:	31 05       	cpc	r19, r1
     20a:	d1 f7       	brne	.-12     	; 0x200 <insert_node_tail+0x16>
			;
		cp->link = np;
     20c:	93 83       	std	Z+3, r25	; 0x03
     20e:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     210:	fc 01       	movw	r30, r24
     212:	13 82       	std	Z+3, r1	; 0x03
     214:	12 82       	std	Z+2, r1	; 0x02
}
     216:	08 95       	ret

00000218 <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     21e:	20 91 6d 04 	lds	r18, 0x046D
     222:	30 91 6e 04 	lds	r19, 0x046E
     226:	21 15       	cp	r18, r1
     228:	31 05       	cpc	r19, r1
     22a:	31 f0       	breq	.+12     	; 0x238 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     22c:	40 81       	ld	r20, Z
     22e:	51 81       	ldd	r21, Z+1	; 0x01
     230:	d9 01       	movw	r26, r18
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	0f c0       	rjmp	.+30     	; 0x256 <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     238:	90 93 6e 04 	sts	0x046E, r25
     23c:	80 93 6d 04 	sts	0x046D, r24
		np->link = NULL;
     240:	13 82       	std	Z+3, r1	; 0x03
     242:	12 82       	std	Z+2, r1	; 0x02
     244:	1d c0       	rjmp	.+58     	; 0x280 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	8d 91       	ld	r24, X+
     24a:	9c 91       	ld	r25, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	ed 01       	movw	r28, r26
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	39 f0       	breq	.+14     	; 0x262 <insert_node_ascn+0x4a>
     254:	dc 01       	movw	r26, r24
     256:	8d 91       	ld	r24, X+
     258:	9c 91       	ld	r25, X
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	84 17       	cp	r24, r20
     25e:	95 07       	cpc	r25, r21
     260:	94 f3       	brlt	.-28     	; 0x246 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     262:	20 97       	sbiw	r28, 0x00	; 0
     264:	39 f4       	brne	.+14     	; 0x274 <insert_node_ascn+0x5c>
			np->link = Head;
     266:	33 83       	std	Z+3, r19	; 0x03
     268:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     26a:	f0 93 6e 04 	sts	0x046E, r31
     26e:	e0 93 6d 04 	sts	0x046D, r30
     272:	06 c0       	rjmp	.+12     	; 0x280 <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	9b 81       	ldd	r25, Y+3	; 0x03
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     27c:	fb 83       	std	Y+3, r31	; 0x03
     27e:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <free_node>:
void free_node(NODE *np)
{
	free(np);
     286:	0e 94 37 10 	call	0x206e	; 0x206e <free>
}
     28a:	08 95       	ret

0000028c <tour_list>:
void tour_list()
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 9e 11 	call	0x233c	; 0x233c <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     29c:	c0 91 6d 04 	lds	r28, 0x046D
     2a0:	d0 91 6e 04 	lds	r29, 0x046E
		printf("-->%c ", cp->data);
     2a4:	03 e0       	ldi	r16, 0x03	; 3
     2a6:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <tour_list+0x44>
		printf("-->%c ", cp->data);
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <tour_list+0x20>
     2ac:	0f 92       	push	r0
     2ae:	ed b7       	in	r30, 0x3d	; 61
     2b0:	fe b7       	in	r31, 0x3e	; 62
     2b2:	12 83       	std	Z+2, r17	; 0x02
     2b4:	01 83       	std	Z+1, r16	; 0x01
     2b6:	88 81       	ld	r24, Y
     2b8:	99 81       	ldd	r25, Y+1	; 0x01
     2ba:	94 83       	std	Z+4, r25	; 0x04
     2bc:	83 83       	std	Z+3, r24	; 0x03
     2be:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     2c2:	0a 80       	ldd	r0, Y+2	; 0x02
     2c4:	db 81       	ldd	r29, Y+3	; 0x03
     2c6:	c0 2d       	mov	r28, r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	20 97       	sbiw	r28, 0x00	; 0
     2d2:	59 f7       	brne	.-42     	; 0x2aa <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     2d4:	8a e0       	ldi	r24, 0x0A	; 10
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 9e 11 	call	0x233c	; 0x233c <putchar>
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     2e6:	09 c0       	rjmp	.+18     	; 0x2fa <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2e8:	fc 01       	movw	r30, r24
     2ea:	22 81       	ldd	r18, Z+2	; 0x02
     2ec:	33 81       	ldd	r19, Z+3	; 0x03
     2ee:	30 93 6e 04 	sts	0x046E, r19
     2f2:	20 93 6d 04 	sts	0x046D, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     2f6:	0e 94 37 10 	call	0x206e	; 0x206e <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     2fa:	80 91 6d 04 	lds	r24, 0x046D
     2fe:	90 91 6e 04 	lds	r25, 0x046E
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	89 f7       	brne	.-30     	; 0x2e8 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     306:	08 95       	ret

00000308 <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <malloc>
	return cp;
}
     310:	08 95       	ret

00000312 <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     318:	62 e0       	ldi	r22, 0x02	; 2
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     320:	eb 01       	movw	r28, r22
     322:	22 e0       	ldi	r18, 0x02	; 2
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	08 c0       	rjmp	.+16     	; 0x338 <is_prime+0x26>
		if((n%i) == 0)
     328:	cf 01       	movw	r24, r30
     32a:	b9 01       	movw	r22, r18
     32c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	41 f0       	breq	.+16     	; 0x344 <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     334:	2f 5f       	subi	r18, 0xFF	; 255
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	c2 17       	cp	r28, r18
     33a:	d3 07       	cpc	r29, r19
     33c:	ac f7       	brge	.-22     	; 0x328 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <app_prime>:
void app_prime(char *ap)
{
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	21 f0       	breq	.+8      	; 0x36a <app_prime+0x1c>
     362:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     366:	7c 01       	movw	r14, r24
     368:	04 c0       	rjmp	.+8      	; 0x372 <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     36a:	90 ed       	ldi	r25, 0xD0	; 208
     36c:	e9 2e       	mov	r14, r25
     36e:	97 e0       	ldi	r25, 0x07	; 7
     370:	f9 2e       	mov	r15, r25
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     376:	c2 e0       	ldi	r28, 0x02	; 2
     378:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	c8 2e       	mov	r12, r24
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     382:	16 c0       	rjmp	.+44     	; 0x3b0 <app_prime+0x62>
		if(is_prime(n)) {
     384:	ce 01       	movw	r24, r28
     386:	0e 94 89 01 	call	0x312	; 0x312 <is_prime>
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	81 f0       	breq	.+32     	; 0x3ae <app_prime+0x60>
			count++;
     38e:	0f 5f       	subi	r16, 0xFF	; 255
     390:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     392:	00 d0       	rcall	.+0      	; 0x394 <app_prime+0x46>
     394:	0f 92       	push	r0
     396:	ed b7       	in	r30, 0x3d	; 61
     398:	fe b7       	in	r31, 0x3e	; 62
     39a:	d2 82       	std	Z+2, r13	; 0x02
     39c:	c1 82       	std	Z+1, r12	; 0x01
     39e:	d4 83       	std	Z+4, r29	; 0x04
     3a0:	c3 83       	std	Z+3, r28	; 0x03
     3a2:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     3ae:	21 96       	adiw	r28, 0x01	; 1
     3b0:	ec 16       	cp	r14, r28
     3b2:	fd 06       	cpc	r15, r29
     3b4:	3c f7       	brge	.-50     	; 0x384 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <app_prime+0x6a>
     3b8:	0f 92       	push	r0
     3ba:	84 e2       	ldi	r24, 0x24	; 36
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	ed b7       	in	r30, 0x3d	; 61
     3c0:	fe b7       	in	r31, 0x3e	; 62
     3c2:	92 83       	std	Z+2, r25	; 0x02
     3c4:	81 83       	std	Z+1, r24	; 0x01
     3c6:	14 83       	std	Z+4, r17	; 0x04
     3c8:	03 83       	std	Z+3, r16	; 0x03
     3ca:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	08 95       	ret

000003e8 <app_list>:
void app_list(char *ap)
{
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	28 97       	sbiw	r28, 0x08	; 8
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	19 f0       	breq	.+6      	; 0x40c <app_list+0x24>
     406:	fc 01       	movw	r30, r24
     408:	10 81       	ld	r17, Z
     40a:	01 c0       	rjmp	.+2      	; 0x40e <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     40c:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     40e:	2e e2       	ldi	r18, 0x2E	; 46
     410:	e2 2e       	mov	r14, r18
     412:	22 e0       	ldi	r18, 0x02	; 2
     414:	f2 2e       	mov	r15, r18
     416:	0f 92       	push	r0
     418:	0f 92       	push	r0
     41a:	ed b7       	in	r30, 0x3d	; 61
     41c:	fe b7       	in	r31, 0x3e	; 62
     41e:	f2 82       	std	Z+2, r15	; 0x02
     420:	e1 82       	std	Z+1, r14	; 0x01
     422:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	40 91 2a 07 	lds	r20, 0x072A
     42e:	50 91 2b 07 	lds	r21, 0x072B
     432:	ce 01       	movw	r24, r28
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	68 e0       	ldi	r22, 0x08	; 8
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	0e 94 32 11 	call	0x2264	; 0x2264 <fgets>
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	a1 f0       	breq	.+40     	; 0x46a <app_list+0x82>
			break;
		np = get_node();
     442:	0e 94 84 01 	call	0x308	; 0x308 <get_node>
		np->data = buf[0];
     446:	29 81       	ldd	r18, Y+1	; 0x01
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
     44c:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     44e:	18 36       	cpi	r17, 0x68	; 104
     450:	19 f0       	breq	.+6      	; 0x458 <app_list+0x70>
     452:	14 37       	cpi	r17, 0x74	; 116
     454:	39 f4       	brne	.+14     	; 0x464 <app_list+0x7c>
     456:	03 c0       	rjmp	.+6      	; 0x45e <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     458:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <insert_node_head>
     45c:	dc cf       	rjmp	.-72     	; 0x416 <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     45e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <insert_node_tail>
     462:	d9 cf       	rjmp	.-78     	; 0x416 <app_list+0x2e>
			default :insert_node_ascn(np);
     464:	0e 94 0c 01 	call	0x218	; 0x218 <insert_node_ascn>
     468:	d6 cf       	rjmp	.-84     	; 0x416 <app_list+0x2e>
		}
	}
	tour_list();
     46a:	0e 94 46 01 	call	0x28c	; 0x28c <tour_list>
	free_list();
     46e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <free_list>
}
     472:	28 96       	adiw	r28, 0x08	; 8
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	08 95       	ret

0000048a <task_prime>:
void task_prime(char *ap)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	41 f0       	breq	.+16     	; 0x4ae <task_prime+0x24>
     49e:	fc 01       	movw	r30, r24
     4a0:	20 81       	ld	r18, Z
     4a2:	22 23       	and	r18, r18
     4a4:	21 f0       	breq	.+8      	; 0x4ae <task_prime+0x24>
     4a6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     4aa:	8c 01       	movw	r16, r24
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <task_prime+0x28>
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     4ae:	00 ed       	ldi	r16, 0xD0	; 208
     4b0:	17 e0       	ldi	r17, 0x07	; 7
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     4b2:	c2 e0       	ldi	r28, 0x02	; 2
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
     4ba:	31 e3       	ldi	r19, 0x31	; 49
     4bc:	c3 2e       	mov	r12, r19
     4be:	32 e0       	ldi	r19, 0x02	; 2
     4c0:	d3 2e       	mov	r13, r19
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <task_prime+0x68>
		if(is_prime(n)) {
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 89 01 	call	0x312	; 0x312 <is_prime>
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	89 f0       	breq	.+34     	; 0x4f0 <task_prime+0x66>
			count++;
     4ce:	08 94       	sec
     4d0:	e1 1c       	adc	r14, r1
     4d2:	f1 1c       	adc	r15, r1
			printf("%d is prime number !!!\n", n);
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <task_prime+0x4c>
     4d6:	0f 92       	push	r0
     4d8:	ed b7       	in	r30, 0x3d	; 61
     4da:	fe b7       	in	r31, 0x3e	; 62
     4dc:	d2 82       	std	Z+2, r13	; 0x02
     4de:	c1 82       	std	Z+1, r12	; 0x01
     4e0:	d4 83       	std	Z+4, r29	; 0x04
     4e2:	c3 83       	std	Z+3, r28	; 0x03
     4e4:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     4f0:	21 96       	adiw	r28, 0x01	; 1
     4f2:	0c 17       	cp	r16, r28
     4f4:	1d 07       	cpc	r17, r29
     4f6:	34 f7       	brge	.-52     	; 0x4c4 <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
		}
	}
	printf("count=%d\n",count);
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <task_prime+0x70>
     4fa:	0f 92       	push	r0
     4fc:	84 e2       	ldi	r24, 0x24	; 36
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	ed b7       	in	r30, 0x3d	; 61
     502:	fe b7       	in	r31, 0x3e	; 62
     504:	92 83       	std	Z+2, r25	; 0x02
     506:	81 83       	std	Z+1, r24	; 0x01
     508:	f4 82       	std	Z+4, r15	; 0x04
     50a:	e3 82       	std	Z+3, r14	; 0x03
     50c:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	08 95       	ret

0000052a <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     52a:	10 92 7e 05 	sts	0x057E, r1
     52e:	10 92 7d 05 	sts	0x057D, r1
     532:	10 92 7c 05 	sts	0x057C, r1
     536:	10 92 7b 05 	sts	0x057B, r1
     53a:	10 92 80 05 	sts	0x0580, r1
     53e:	10 92 7f 05 	sts	0x057F, r1
     542:	10 92 7a 04 	sts	0x047A, r1
     546:	10 92 79 04 	sts	0x0479, r1
}
     54a:	08 95       	ret

0000054c <qi_insert>:
int qi_insert(char ch)
{
     54c:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     54e:	20 91 7f 05 	lds	r18, 0x057F
     552:	30 91 80 05 	lds	r19, 0x0580
     556:	2f 5f       	subi	r18, 0xFF	; 255
     558:	3f 4f       	sbci	r19, 0xFF	; 255
     55a:	c9 01       	movw	r24, r18
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     564:	9c 01       	movw	r18, r24
     566:	80 91 79 04 	lds	r24, 0x0479
     56a:	90 91 7a 04 	lds	r25, 0x047A
     56e:	28 17       	cp	r18, r24
     570:	39 07       	cpc	r19, r25
     572:	59 f0       	breq	.+22     	; 0x58a <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     574:	30 93 80 05 	sts	0x0580, r19
     578:	20 93 7f 05 	sts	0x057F, r18
	qi[ri] = ch;
     57c:	2f 57       	subi	r18, 0x7F	; 127
     57e:	3a 4f       	sbci	r19, 0xFA	; 250
     580:	f9 01       	movw	r30, r18
     582:	40 83       	st	Z, r20
	return 1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     58e:	08 95       	ret

00000590 <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     590:	80 91 79 04 	lds	r24, 0x0479
     594:	90 91 7a 04 	lds	r25, 0x047A
     598:	20 91 7f 05 	lds	r18, 0x057F
     59c:	30 91 80 05 	lds	r19, 0x0580
     5a0:	28 17       	cp	r18, r24
     5a2:	39 07       	cpc	r19, r25
     5a4:	79 f0       	breq	.+30     	; 0x5c4 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     5b0:	90 93 7a 04 	sts	0x047A, r25
     5b4:	80 93 79 04 	sts	0x0479, r24
	return qi[fi];
     5b8:	8f 57       	subi	r24, 0x7F	; 127
     5ba:	9a 4f       	sbci	r25, 0xFA	; 250
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     5c8:	08 95       	ret

000005ca <qo_insert>:
int qo_insert(char ch)
{
     5ca:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     5cc:	20 91 7d 05 	lds	r18, 0x057D
     5d0:	30 91 7e 05 	lds	r19, 0x057E
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	c9 01       	movw	r24, r18
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	71 e0       	ldi	r23, 0x01	; 1
     5de:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     5e2:	9c 01       	movw	r18, r24
     5e4:	80 91 7b 05 	lds	r24, 0x057B
     5e8:	90 91 7c 05 	lds	r25, 0x057C
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	59 f0       	breq	.+22     	; 0x608 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     5f2:	30 93 7e 05 	sts	0x057E, r19
     5f6:	20 93 7d 05 	sts	0x057D, r18
	qo[ro] = ch;
     5fa:	25 58       	subi	r18, 0x85	; 133
     5fc:	3b 4f       	sbci	r19, 0xFB	; 251
     5fe:	f9 01       	movw	r30, r18
     600:	40 83       	st	Z, r20
	return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     60c:	08 95       	ret

0000060e <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     60e:	80 91 7b 05 	lds	r24, 0x057B
     612:	90 91 7c 05 	lds	r25, 0x057C
     616:	20 91 7d 05 	lds	r18, 0x057D
     61a:	30 91 7e 05 	lds	r19, 0x057E
     61e:	28 17       	cp	r18, r24
     620:	39 07       	cpc	r19, r25
     622:	79 f0       	breq	.+30     	; 0x642 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     62e:	90 93 7c 05 	sts	0x057C, r25
     632:	80 93 7b 05 	sts	0x057B, r24
	return qo[fo];
     636:	85 58       	subi	r24, 0x85	; 133
     638:	9b 4f       	sbci	r25, 0xFB	; 251
     63a:	fc 01       	movw	r30, r24
     63c:	80 81       	ld	r24, Z
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     646:	08 95       	ret

00000648 <task_led>:
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
void task_led(char *ap){
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	2a 97       	sbiw	r28, 0x0a	; 10
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static char tag;

	int ms=1024*5;

	if(ap&&*ap) ms = atoi(ap);
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	41 f0       	breq	.+16     	; 0x674 <task_led+0x2c>
     664:	dc 01       	movw	r26, r24
     666:	2c 91       	ld	r18, X
     668:	22 23       	and	r18, r18
     66a:	21 f0       	breq	.+8      	; 0x674 <task_led+0x2c>
     66c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     670:	8c 01       	movw	r16, r24
     672:	02 c0       	rjmp	.+4      	; 0x678 <task_led+0x30>
}
void task_led(char *ap){
	struct task task;
	static char tag;

	int ms=1024*5;
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	14 e1       	ldi	r17, 0x14	; 20

	if(ap&&*ap) ms = atoi(ap);
	if(!tag){led_on_all();tag=1;}
     678:	80 91 6f 04 	lds	r24, 0x046F
     67c:	88 23       	and	r24, r24
     67e:	31 f4       	brne	.+12     	; 0x68c <task_led+0x44>
     680:	0e 94 b1 00 	call	0x162	; 0x162 <led_on_all>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 6f 04 	sts	0x046F, r24
     68a:	04 c0       	rjmp	.+8      	; 0x694 <task_led+0x4c>
	else {led_off_all();tag=0;}
     68c:	0e 94 b6 00 	call	0x16c	; 0x16c <led_off_all>
     690:	10 92 6f 04 	sts	0x046F, r1

	task.fun=(void (*)(void *))task_led;
     694:	84 e2       	ldi	r24, 0x24	; 36
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     69c:	00 d0       	rcall	.+0      	; 0x69e <task_led+0x56>
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <task_led+0x58>
     6a0:	ed b7       	in	r30, 0x3d	; 61
     6a2:	fe b7       	in	r31, 0x3e	; 62
     6a4:	31 96       	adiw	r30, 0x01	; 1
     6a6:	ce 01       	movw	r24, r28
     6a8:	03 96       	adiw	r24, 0x03	; 3
     6aa:	ad b7       	in	r26, 0x3d	; 61
     6ac:	be b7       	in	r27, 0x3e	; 62
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	9c 93       	st	X, r25
     6b2:	8e 93       	st	-X, r24
     6b4:	11 97       	sbiw	r26, 0x01	; 1
     6b6:	89 e4       	ldi	r24, 0x49	; 73
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	93 83       	std	Z+3, r25	; 0x03
     6bc:	82 83       	std	Z+2, r24	; 0x02
     6be:	15 83       	std	Z+5, r17	; 0x05
     6c0:	04 83       	std	Z+4, r16	; 0x04
     6c2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <sprintf>
	insert_timer(&task,ms/256);
     6c6:	ed b7       	in	r30, 0x3d	; 61
     6c8:	fe b7       	in	r31, 0x3e	; 62
     6ca:	36 96       	adiw	r30, 0x06	; 6
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	fe bf       	out	0x3e, r31	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	ed bf       	out	0x3d, r30	; 61
     6d6:	c8 01       	movw	r24, r16
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 6a 05 	call	0xad4	; 0xad4 <insert_timer>
}
     6e8:	2a 96       	adiw	r28, 0x0a	; 10
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <task_tc1047a>:
void task_tc1047a(void *arg)
{
	int value;

	if(!strcmp(arg,""))
     6fe:	fc 01       	movw	r30, r24
     700:	20 81       	ld	r18, Z
     702:	22 23       	and	r18, r18
     704:	19 f4       	brne	.+6      	; 0x70c <task_tc1047a+0xe>
		adc_start();
     706:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     70a:	08 95       	ret
	else{
		value = atoi(arg) * (1.1/1024) *1000;
     70c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     710:	9c 01       	movw	r18, r24
     712:	b9 01       	movw	r22, r18
     714:	88 27       	eor	r24, r24
     716:	77 fd       	sbrc	r23, 7
     718:	80 95       	com	r24
     71a:	98 2f       	mov	r25, r24
     71c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__floatsisf>
     720:	2d ec       	ldi	r18, 0xCD	; 205
     722:	3c ec       	ldi	r19, 0xCC	; 204
     724:	4c e8       	ldi	r20, 0x8C	; 140
     726:	5a e3       	ldi	r21, 0x3A	; 58
     728:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	4a e7       	ldi	r20, 0x7A	; 122
     732:	54 e4       	ldi	r21, 0x44	; 68
     734:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     738:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fixsfsi>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
		value = (value - 500) /10;
     740:	84 5f       	subi	r24, 0xF4	; 244
     742:	91 40       	sbci	r25, 0x01	; 1
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
     744:	00 d0       	rcall	.+0      	; 0x746 <task_tc1047a+0x48>
     746:	0f 92       	push	r0
     748:	2c e4       	ldi	r18, 0x4C	; 76
     74a:	32 e0       	ldi	r19, 0x02	; 2
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	32 83       	std	Z+2, r19	; 0x02
     752:	21 83       	std	Z+1, r18	; 0x01

	if(!strcmp(arg,""))
		adc_start();
	else{
		value = atoi(arg) * (1.1/1024) *1000;
		value = (value - 500) /10;
     754:	6a e0       	ldi	r22, 0x0A	; 10
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
     75c:	74 83       	std	Z+4, r23	; 0x04
     75e:	63 83       	std	Z+3, r22	; 0x03
     760:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	08 95       	ret

0000076e <task_init>:
#define TC77_WAIT_LO 2
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     76e:	10 92 82 06 	sts	0x0682, r1
     772:	10 92 81 06 	sts	0x0681, r1
     776:	10 92 24 07 	sts	0x0724, r1
     77a:	10 92 23 07 	sts	0x0723, r1
}
     77e:	08 95       	ret

00000780 <task_insert>:
int task_insert(struct task *tskp){
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	48 2f       	mov	r20, r24
     786:	e9 2f       	mov	r30, r25
	if((Task_r + 1)% MAX_TASK == Task_f)
     788:	80 91 81 06 	lds	r24, 0x0681
     78c:	90 91 82 06 	lds	r25, 0x0682
     790:	c0 91 23 07 	lds	r28, 0x0723
     794:	d0 91 24 07 	lds	r29, 0x0724
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	20 e1       	ldi	r18, 0x10	; 16
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	b9 01       	movw	r22, r18
     7a0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     7a4:	8c 17       	cp	r24, r28
     7a6:	9d 07       	cpc	r25, r29
     7a8:	19 f1       	breq	.+70     	; 0x7f0 <task_insert+0x70>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     7aa:	80 91 81 06 	lds	r24, 0x0681
     7ae:	90 91 82 06 	lds	r25, 0x0682
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b9 01       	movw	r22, r18
     7b6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     7ba:	90 93 82 06 	sts	0x0682, r25
     7be:	80 93 81 06 	sts	0x0681, r24
	Task_q[Task_r] = *tskp;
     7c2:	80 91 81 06 	lds	r24, 0x0681
     7c6:	90 91 82 06 	lds	r25, 0x0682
     7ca:	dc 01       	movw	r26, r24
     7cc:	aa 0f       	add	r26, r26
     7ce:	bb 1f       	adc	r27, r27
     7d0:	63 e0       	ldi	r22, 0x03	; 3
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	6a 95       	dec	r22
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <task_insert+0x52>
     7da:	a8 0f       	add	r26, r24
     7dc:	b9 1f       	adc	r27, r25
     7de:	ad 57       	subi	r26, 0x7D	; 125
     7e0:	b9 4f       	sbci	r27, 0xF9	; 249
     7e2:	c4 2f       	mov	r28, r20
     7e4:	de 2f       	mov	r29, r30
     7e6:	8a e0       	ldi	r24, 0x0A	; 10
     7e8:	09 90       	ld	r0, Y+
     7ea:	0d 92       	st	X+, r0
     7ec:	81 50       	subi	r24, 0x01	; 1
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <task_insert+0x68>
	return 0;
}
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <task_delete>:
int task_delete(struct task *tskp){
     7fa:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     7fc:	40 91 81 06 	lds	r20, 0x0681
     800:	50 91 82 06 	lds	r21, 0x0682
     804:	80 91 23 07 	lds	r24, 0x0723
     808:	90 91 24 07 	lds	r25, 0x0724
     80c:	48 17       	cp	r20, r24
     80e:	59 07       	cpc	r21, r25
     810:	31 f1       	breq	.+76     	; 0x85e <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     812:	80 91 23 07 	lds	r24, 0x0723
     816:	90 91 24 07 	lds	r25, 0x0724
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	60 e1       	ldi	r22, 0x10	; 16
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     824:	90 93 24 07 	sts	0x0724, r25
     828:	80 93 23 07 	sts	0x0723, r24
	*tskp = Task_q[Task_f];
     82c:	80 91 23 07 	lds	r24, 0x0723
     830:	90 91 24 07 	lds	r25, 0x0724
     834:	fc 01       	movw	r30, r24
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	a3 e0       	ldi	r26, 0x03	; 3
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	aa 95       	dec	r26
     842:	e1 f7       	brne	.-8      	; 0x83c <task_delete+0x42>
     844:	e8 0f       	add	r30, r24
     846:	f9 1f       	adc	r31, r25
     848:	d9 01       	movw	r26, r18
     84a:	ed 57       	subi	r30, 0x7D	; 125
     84c:	f9 4f       	sbci	r31, 0xF9	; 249
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	01 90       	ld	r0, Z+
     852:	0d 92       	st	X+, r0
     854:	81 50       	subi	r24, 0x01	; 1
     856:	e1 f7       	brne	.-8      	; 0x850 <task_delete+0x56>
	return 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
	Task_q[Task_r] = *tskp;
	return 0;
}
int task_delete(struct task *tskp){
	if(Task_r == Task_f)
		return 0;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     862:	08 95       	ret

00000864 <task_tc77>:
		value = (value - 500) /10;
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
	}
}
void task_tc77(void *arg)
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	static uint8_t state;
	static uint16_t value;

	if(!strcmp(arg, "")){
     868:	fc 01       	movw	r30, r24
     86a:	20 81       	ld	r18, Z
     86c:	22 23       	and	r18, r18
     86e:	31 f4       	brne	.+12     	; 0x87c <task_tc77+0x18>
		state = TC77_WAIT_HI;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 70 04 	sts	0x0470, r24
		spi_select();
     876:	0e 94 b9 08 	call	0x1172	; 0x1172 <spi_select>
     87a:	11 c0       	rjmp	.+34     	; 0x89e <task_tc77+0x3a>
		spi_write(0x00);
	}
	else {
		switch(state){
     87c:	20 91 70 04 	lds	r18, 0x0470
     880:	21 30       	cpi	r18, 0x01	; 1
     882:	21 f0       	breq	.+8      	; 0x88c <task_tc77+0x28>
     884:	22 30       	cpi	r18, 0x02	; 2
     886:	09 f0       	breq	.+2      	; 0x88a <task_tc77+0x26>
     888:	45 c0       	rjmp	.+138    	; 0x914 <task_tc77+0xb0>
     88a:	0d c0       	rjmp	.+26     	; 0x8a6 <task_tc77+0x42>
		case TC77_WAIT_HI:
			value = atoi(arg) << 8;
     88c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     890:	10 92 71 04 	sts	0x0471, r1
     894:	80 93 72 04 	sts	0x0472, r24
			state = TC77_WAIT_LO;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	80 93 70 04 	sts	0x0470, r24
			spi_write(0x00);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 bd 08 	call	0x117a	; 0x117a <spi_write>
			break;
     8a4:	3d c0       	rjmp	.+122    	; 0x920 <task_tc77+0xbc>
		case TC77_WAIT_LO:
			value |= atoi(arg);
     8a6:	c0 91 71 04 	lds	r28, 0x0471
     8aa:	d0 91 72 04 	lds	r29, 0x0472
     8ae:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     8b2:	c8 2b       	or	r28, r24
     8b4:	d9 2b       	or	r29, r25
			value = (value >> 3) * 0.0625;
     8b6:	b3 e0       	ldi	r27, 0x03	; 3
     8b8:	d6 95       	lsr	r29
     8ba:	c7 95       	ror	r28
     8bc:	ba 95       	dec	r27
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <task_tc77+0x54>
     8c0:	be 01       	movw	r22, r28
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e8       	ldi	r20, 0x80	; 128
     8d0:	5d e3       	ldi	r21, 0x3D	; 61
     8d2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     8d6:	0e 94 bf 08 	call	0x117e	; 0x117e <__fixunssfsi>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	90 93 72 04 	sts	0x0472, r25
     8e2:	80 93 71 04 	sts	0x0471, r24
			spi_release();
     8e6:	0e 94 bb 08 	call	0x1176	; 0x1176 <spi_release>
			printf("task_tc77() : current_temperature -> %d degree.\n", value);
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <task_tc77+0x88>
     8ec:	0f 92       	push	r0
     8ee:	83 e8       	ldi	r24, 0x83	; 131
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	92 83       	std	Z+2, r25	; 0x02
     8f8:	81 83       	std	Z+1, r24	; 0x01
     8fa:	80 91 71 04 	lds	r24, 0x0471
     8fe:	90 91 72 04 	lds	r25, 0x0472
     902:	94 83       	std	Z+4, r25	; 0x04
     904:	83 83       	std	Z+3, r24	; 0x03
     906:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
			break;
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	06 c0       	rjmp	.+12     	; 0x920 <task_tc77+0xbc>
		default:
			spi_release();
     914:	0e 94 bb 08 	call	0x1176	; 0x1176 <spi_release>
			printf("task_tc77() : unexpecetd state in task_tc77...\n");
     918:	84 eb       	ldi	r24, 0xB4	; 180
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	0e 94 a5 11 	call	0x234a	; 0x234a <puts>
		}
	}
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <task_cmd>:

void task_cmd(void *arg){
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	ca 54       	subi	r28, 0x4A	; 74
     940:	d0 40       	sbci	r29, 0x00	; 0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(gets(buf) == NULL)
     94c:	ce 01       	movw	r24, r28
     94e:	0b 96       	adiw	r24, 0x0b	; 11
     950:	0e 94 66 11 	call	0x22cc	; 0x22cc <gets>
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	09 f4       	brne	.+2      	; 0x95a <task_cmd+0x34>
     958:	9a c0       	rjmp	.+308    	; 0xa8e <task_cmd+0x168>
	{	printf("$ "); return ;}

	cp0 = strtok(buf, " \t\n\r");
     95a:	ce 01       	movw	r24, r28
     95c:	0b 96       	adiw	r24, 0x0b	; 11
     95e:	66 ee       	ldi	r22, 0xE6	; 230
     960:	72 e0       	ldi	r23, 0x02	; 2
     962:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strtok>
     966:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	66 ee       	ldi	r22, 0xE6	; 230
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strtok>
     974:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	66 ee       	ldi	r22, 0xE6	; 230
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strtok>
     982:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	66 ee       	ldi	r22, 0xE6	; 230
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strtok>
     990:	6c 01       	movw	r12, r24

	if(cp0==NULL){
     992:	01 15       	cp	r16, r1
     994:	11 05       	cpc	r17, r1
     996:	19 f4       	brne	.+6      	; 0x99e <task_cmd+0x78>
		printf("!!!-111\n");
     998:	8b ee       	ldi	r24, 0xEB	; 235
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	76 c0       	rjmp	.+236    	; 0xa8a <task_cmd+0x164>
		printf("$ "); return ;
	}
	if(!strcmp(cp0, "prime")){
     99e:	c8 01       	movw	r24, r16
     9a0:	63 ef       	ldi	r22, 0xF3	; 243
     9a2:	72 e0       	ldi	r23, 0x02	; 2
     9a4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	39 f4       	brne	.+14     	; 0x9ba <task_cmd+0x94>
		task_prime(cp1);
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 45 02 	call	0x48a	; 0x48a <task_prime>
		task_led(cp1);
     9b2:	c7 01       	movw	r24, r14
     9b4:	0e 94 24 03 	call	0x648	; 0x648 <task_led>
     9b8:	6a c0       	rjmp	.+212    	; 0xa8e <task_cmd+0x168>
	}
	else if(!strcmp(cp0, "tc1047a")){
     9ba:	c8 01       	movw	r24, r16
     9bc:	69 ef       	ldi	r22, 0xF9	; 249
     9be:	72 e0       	ldi	r23, 0x02	; 2
     9c0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <task_cmd+0xac>
	 	task_tc1047a("");
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <task_tc1047a>
     9d0:	5e c0       	rjmp	.+188    	; 0xa8e <task_cmd+0x168>
	}
	else if(!strcmp(cp0, "tc77")){
     9d2:	c8 01       	movw	r24, r16
     9d4:	62 e0       	ldi	r22, 0x02	; 2
     9d6:	73 e0       	ldi	r23, 0x03	; 3
     9d8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	29 f4       	brne	.+10     	; 0x9ea <task_cmd+0xc4>
		task_tc77("");
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0e 94 32 04 	call	0x864	; 0x864 <task_tc77>
     9e8:	52 c0       	rjmp	.+164    	; 0xa8e <task_cmd+0x168>
	}
	else if(!strcmp(cp0, "timer")) {
     9ea:	c8 01       	movw	r24, r16
     9ec:	67 e0       	ldi	r22, 0x07	; 7
     9ee:	73 e0       	ldi	r23, 0x03	; 3
     9f0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	09 f0       	breq	.+2      	; 0x9fa <task_cmd+0xd4>
     9f8:	46 c0       	rjmp	.+140    	; 0xa86 <task_cmd+0x160>
		if(cp1 == NULL){
     9fa:	e1 14       	cp	r14, r1
     9fc:	f1 04       	cpc	r15, r1
     9fe:	19 f4       	brne	.+6      	; 0xa06 <task_cmd+0xe0>
			printf("!!!-222\n");
     a00:	8d e0       	ldi	r24, 0x0D	; 13
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	42 c0       	rjmp	.+132    	; 0xa8a <task_cmd+0x164>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     a14:	8b 01       	movw	r16, r22
     a16:	7b 01       	movw	r14, r22
		if(!strcmp(cp2, "prime")){
     a18:	c5 01       	movw	r24, r10
     a1a:	63 ef       	ldi	r22, 0xF3	; 243
     a1c:	72 e0       	ldi	r23, 0x02	; 2
     a1e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	b1 f4       	brne	.+44     	; 0xa52 <task_cmd+0x12c>
			task.fun = (void (*)(void *))task_prime;
     a26:	85 e4       	ldi	r24, 0x45	; 69
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
			task_led(cp3);
     a2e:	c6 01       	movw	r24, r12
     a30:	0e 94 24 03 	call	0x648	; 0x648 <task_led>
			if(cp3) strcpy(task.arg, cp3);
     a34:	ce 01       	movw	r24, r28
     a36:	03 96       	adiw	r24, 0x03	; 3
     a38:	c1 14       	cp	r12, r1
     a3a:	d1 04       	cpc	r13, r1
     a3c:	11 f0       	breq	.+4      	; 0xa42 <task_cmd+0x11c>
     a3e:	b6 01       	movw	r22, r12
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <task_cmd+0x120>
			else strcpy(task.arg, "");
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	73 e0       	ldi	r23, 0x03	; 3
     a46:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strcpy>
			insert_timer(&task,ms);
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	b7 01       	movw	r22, r14
     a50:	14 c0       	rjmp	.+40     	; 0xa7a <task_cmd+0x154>
		}else if(!strcmp(cp2, "tc1047a")){
     a52:	c5 01       	movw	r24, r10
     a54:	69 ef       	ldi	r22, 0xF9	; 249
     a56:	72 e0       	ldi	r23, 0x02	; 2
     a58:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strcmp>
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	81 f4       	brne	.+32     	; 0xa80 <task_cmd+0x15a>
			task.fun = (void (*)(void *))task_tc1047a;
     a60:	8f e7       	ldi	r24, 0x7F	; 127
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	89 83       	std	Y+1, r24	; 0x01
			strcpy(task.arg,"");
     a68:	ce 01       	movw	r24, r28
     a6a:	03 96       	adiw	r24, 0x03	; 3
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	73 e0       	ldi	r23, 0x03	; 3
     a70:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strcpy>
			insert_timer(&task,ms);
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	b8 01       	movw	r22, r16
     a7a:	0e 94 6a 05 	call	0xad4	; 0xad4 <insert_timer>
     a7e:	07 c0       	rjmp	.+14     	; 0xa8e <task_cmd+0x168>
		}
		else printf("!!!-333\n");	
     a80:	85 e1       	ldi	r24, 0x15	; 21
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <task_cmd+0x164>
	}
	else {
		printf("!!!-444\n");
     a86:	8d e1       	ldi	r24, 0x1D	; 29
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 a5 11 	call	0x234a	; 0x234a <puts>
	}
	printf("$ ");
     a8e:	0f 92       	push	r0
     a90:	0f 92       	push	r0
     a92:	83 ee       	ldi	r24, 0xE3	; 227
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	ed b7       	in	r30, 0x3d	; 61
     a98:	fe b7       	in	r31, 0x3e	; 62
     a9a:	92 83       	std	Z+2, r25	; 0x02
     a9c:	81 83       	std	Z+1, r24	; 0x01
     a9e:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0

}
     aa6:	c6 5b       	subi	r28, 0xB6	; 182
     aa8:	df 4f       	sbci	r29, 0xFF	; 255
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	08 95       	ret

00000aca <get_timer>:
struct timer *Thead=NULL;
struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     aca:	8e e0       	ldi	r24, 0x0E	; 14
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <malloc>
	return(tp);
}
     ad2:	08 95       	ret

00000ad4 <insert_timer>:
		task_insert(&tp->task);
		free_timer(tp);
	}
}
void insert_timer(struct task *tskp, int ms)
{
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	f8 2e       	mov	r15, r24
     ae2:	e9 2e       	mov	r14, r25
     ae4:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     ae6:	0e 94 65 05 	call	0xaca	; 0xaca <get_timer>
     aea:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     aec:	dc 01       	movw	r26, r24
     aee:	12 96       	adiw	r26, 0x02	; 2
     af0:	ef 2d       	mov	r30, r15
     af2:	fe 2d       	mov	r31, r14
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <insert_timer+0x22>
	tp->time = ms;
     afe:	19 83       	std	Y+1, r17	; 0x01
     b00:	08 83       	st	Y, r16
	if(Thead == NULL){
     b02:	e0 91 73 04 	lds	r30, 0x0473
     b06:	f0 91 74 04 	lds	r31, 0x0474
     b0a:	30 97       	sbiw	r30, 0x00	; 0
     b0c:	29 f4       	brne	.+10     	; 0xb18 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     b0e:	d0 93 74 04 	sts	0x0474, r29
     b12:	c0 93 73 04 	sts	0x0473, r28
     b16:	2f c0       	rjmp	.+94     	; 0xb76 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;
	if(Thead == NULL){
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     b22:	fd 01       	movw	r30, r26
		total += cp->time;
     b24:	80 81       	ld	r24, Z
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	28 0f       	add	r18, r24
     b2a:	39 1f       	adc	r19, r25
		if(total >=ms)
     b2c:	20 17       	cp	r18, r16
     b2e:	31 07       	cpc	r19, r17
     b30:	34 f4       	brge	.+12     	; 0xb3e <insert_timer+0x6a>
	if(Thead == NULL){
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     b32:	a4 85       	ldd	r26, Z+12	; 0x0c
     b34:	b5 85       	ldd	r27, Z+13	; 0x0d
     b36:	af 01       	movw	r20, r30
     b38:	10 97       	sbiw	r26, 0x00	; 0
     b3a:	99 f7       	brne	.-26     	; 0xb22 <insert_timer+0x4e>
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <insert_timer+0x6c>
		total += cp->time;
		if(total >=ms)
     b3e:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp ==NULL){
     b40:	41 15       	cp	r20, r1
     b42:	51 05       	cpc	r21, r1
     b44:	79 f4       	brne	.+30     	; 0xb64 <insert_timer+0x90>
		cp->time -= tp->time;
     b46:	8d 91       	ld	r24, X+
     b48:	9c 91       	ld	r25, X
     b4a:	11 97       	sbiw	r26, 0x01	; 1
     b4c:	80 1b       	sub	r24, r16
     b4e:	91 0b       	sbc	r25, r17
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	9c 93       	st	X, r25
     b54:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     b56:	bd 87       	std	Y+13, r27	; 0x0d
     b58:	ac 87       	std	Y+12, r26	; 0x0c
     b5a:	d0 93 74 04 	sts	0x0474, r29
     b5e:	c0 93 73 04 	sts	0x0473, r28
     b62:	24 c0       	rjmp	.+72     	; 0xbac <insert_timer+0xd8>
	}
	else if(cp==NULL){
     b64:	10 97       	sbiw	r26, 0x00	; 0
     b66:	51 f4       	brne	.+20     	; 0xb7c <insert_timer+0xa8>
		tp->time -= total;
     b68:	02 1b       	sub	r16, r18
     b6a:	13 0b       	sbc	r17, r19
     b6c:	19 83       	std	Y+1, r17	; 0x01
     b6e:	08 83       	st	Y, r16
		pp->link = tp;
     b70:	fa 01       	movw	r30, r20
     b72:	d5 87       	std	Z+13, r29	; 0x0d
     b74:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     b76:	1d 86       	std	Y+13, r1	; 0x0d
     b78:	1c 86       	std	Y+12, r1	; 0x0c
     b7a:	18 c0       	rjmp	.+48     	; 0xbac <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     b7c:	8d 91       	ld	r24, X+
     b7e:	9c 91       	ld	r25, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	b9 01       	movw	r22, r18
     b84:	68 1b       	sub	r22, r24
     b86:	79 0b       	sbc	r23, r25
		tp->time -= total;
     b88:	98 01       	movw	r18, r16
     b8a:	26 1b       	sub	r18, r22
     b8c:	37 0b       	sbc	r19, r23
     b8e:	39 83       	std	Y+1, r19	; 0x01
     b90:	28 83       	st	Y, r18
		cp->time -= tp->time;
     b92:	8d 91       	ld	r24, X+
     b94:	9c 91       	ld	r25, X
     b96:	11 97       	sbiw	r26, 0x01	; 1
     b98:	82 1b       	sub	r24, r18
     b9a:	93 0b       	sbc	r25, r19
     b9c:	11 96       	adiw	r26, 0x01	; 1
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
		pp->link = tp;
     ba2:	fa 01       	movw	r30, r20
     ba4:	d5 87       	std	Z+13, r29	; 0x0d
     ba6:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     ba8:	bd 87       	std	Y+13, r27	; 0x0d
     baa:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <tour_timer>:
void tour_timer()
{
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 9e 11 	call	0x233c	; 0x233c <putchar>
	for(cp = Thead; cp !=NULL; cp = cp->link){
     bce:	c0 91 73 04 	lds	r28, 0x0473
     bd2:	d0 91 74 04 	lds	r29, 0x0474
	}
}
void tour_timer()
{
	struct timer *cp;
	int total = 0;
     bd6:	00 e0       	ldi	r16, 0x00	; 0
     bd8:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
     bda:	85 e2       	ldi	r24, 0x25	; 37
     bdc:	e8 2e       	mov	r14, r24
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     be2:	20 c0       	rjmp	.+64     	; 0xc24 <tour_timer+0x6a>
		total+= cp->time;
     be4:	88 81       	ld	r24, Y
     be6:	99 81       	ldd	r25, Y+1	; 0x01
     be8:	08 0f       	add	r16, r24
     bea:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     bec:	00 d0       	rcall	.+0      	; 0xbee <tour_timer+0x34>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <tour_timer+0x36>
     bf0:	ed b7       	in	r30, 0x3d	; 61
     bf2:	fe b7       	in	r31, 0x3e	; 62
     bf4:	31 96       	adiw	r30, 0x01	; 1
     bf6:	ad b7       	in	r26, 0x3d	; 61
     bf8:	be b7       	in	r27, 0x3e	; 62
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	fc 92       	st	X, r15
     bfe:	ee 92       	st	-X, r14
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	93 83       	std	Z+3, r25	; 0x03
     c04:	82 83       	std	Z+2, r24	; 0x02
     c06:	15 83       	std	Z+5, r17	; 0x05
     c08:	04 83       	std	Z+4, r16	; 0x04
     c0a:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     c0e:	0c 84       	ldd	r0, Y+12	; 0x0c
     c10:	dd 85       	ldd	r29, Y+13	; 0x0d
     c12:	c0 2d       	mov	r28, r0
     c14:	8d b7       	in	r24, 0x3d	; 61
     c16:	9e b7       	in	r25, 0x3e	; 62
     c18:	06 96       	adiw	r24, 0x06	; 6
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	9e bf       	out	0x3e, r25	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	8d bf       	out	0x3d, r24	; 61
     c24:	20 97       	sbiw	r28, 0x00	; 0
     c26:	f1 f6       	brne	.-68     	; 0xbe4 <tour_timer+0x2a>
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 9e 11 	call	0x233c	; 0x233c <putchar>
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	08 95       	ret

00000c3e <free_timer>:
void free_timer()
{
	struct timer *cp;

	if(Thead!=NULL){
     c3e:	80 91 73 04 	lds	r24, 0x0473
     c42:	90 91 74 04 	lds	r25, 0x0474
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	49 f0       	breq	.+18     	; 0xc5c <free_timer+0x1e>
		cp = Thead;
		Thead = cp->link;
     c4a:	fc 01       	movw	r30, r24
     c4c:	24 85       	ldd	r18, Z+12	; 0x0c
     c4e:	35 85       	ldd	r19, Z+13	; 0x0d
     c50:	30 93 74 04 	sts	0x0474, r19
     c54:	20 93 73 04 	sts	0x0473, r18
		free(cp);
     c58:	0e 94 37 10 	call	0x206e	; 0x206e <free>
     c5c:	08 95       	ret

00000c5e <timer_expire>:
	tp = (struct timer *)malloc(sizeof(*tp));
	return(tp);
}

void timer_expire(void)
{
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     c62:	0d c0       	rjmp	.+26     	; 0xc7e <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     c64:	8c 85       	ldd	r24, Y+12	; 0x0c
     c66:	9d 85       	ldd	r25, Y+13	; 0x0d
     c68:	90 93 74 04 	sts	0x0474, r25
     c6c:	80 93 73 04 	sts	0x0473, r24

		task_insert(&tp->task);
     c70:	ce 01       	movw	r24, r28
     c72:	02 96       	adiw	r24, 0x02	; 2
     c74:	0e 94 c0 03 	call	0x780	; 0x780 <task_insert>
		free_timer(tp);
     c78:	ce 01       	movw	r24, r28
     c7a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <free_timer>

void timer_expire(void)
{
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     c7e:	c0 91 73 04 	lds	r28, 0x0473
     c82:	d0 91 74 04 	lds	r29, 0x0474
     c86:	20 97       	sbiw	r28, 0x00	; 0
     c88:	21 f0       	breq	.+8      	; 0xc92 <timer_expire+0x34>
     c8a:	88 81       	ld	r24, Y
     c8c:	99 81       	ldd	r25, Y+1	; 0x01
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	49 f3       	breq	.-46     	; 0xc64 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free_timer(tp);
	}
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <app_timer>:
		Thead = cp->link;
		free(cp);
	}
}
void app_timer(char *ap)
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	62 97       	sbiw	r28, 0x12	; 18
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;
	while(1){
		printf(">> ");
     cb0:	00 e3       	ldi	r16, 0x30	; 48
     cb2:	13 e0       	ldi	r17, 0x03	; 3
     cb4:	0f 92       	push	r0
     cb6:	0f 92       	push	r0
     cb8:	ed b7       	in	r30, 0x3d	; 61
     cba:	fe b7       	in	r31, 0x3e	; 62
     cbc:	12 83       	std	Z+2, r17	; 0x02
     cbe:	01 83       	std	Z+1, r16	; 0x01
     cc0:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	40 91 2a 07 	lds	r20, 0x072A
     ccc:	50 91 2b 07 	lds	r21, 0x072B
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	68 e0       	ldi	r22, 0x08	; 8
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 32 11 	call	0x2264	; 0x2264 <fgets>
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	61 f0       	breq	.+24     	; 0xcf8 <app_timer+0x60>
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <atoi>
     ce8:	bc 01       	movw	r22, r24
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	29 f0       	breq	.+10     	; 0xcf8 <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     cee:	ce 01       	movw	r24, r28
     cf0:	09 96       	adiw	r24, 0x09	; 9
     cf2:	0e 94 6a 05 	call	0xad4	; 0xad4 <insert_timer>
	}
     cf6:	de cf       	rjmp	.-68     	; 0xcb4 <app_timer+0x1c>
	tour_timer();
     cf8:	0e 94 dd 05 	call	0xbba	; 0xbba <tour_timer>
	free_timer();
     cfc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <free_timer>
}
     d00:	62 96       	adiw	r28, 0x12	; 18
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <app_time>:
void app_time(char *ap)
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
	printf("%d : %d\n",Tcount/60,Tcount%60);
     d1a:	80 91 77 04 	lds	r24, 0x0477
     d1e:	90 91 78 04 	lds	r25, 0x0478
     d22:	e0 91 77 04 	lds	r30, 0x0477
     d26:	f0 91 78 04 	lds	r31, 0x0478
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <app_time+0x16>
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <app_time+0x18>
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	21 96       	adiw	r28, 0x01	; 1
     d34:	24 e3       	ldi	r18, 0x34	; 52
     d36:	33 e0       	ldi	r19, 0x03	; 3
     d38:	ad b7       	in	r26, 0x3d	; 61
     d3a:	be b7       	in	r27, 0x3e	; 62
     d3c:	12 96       	adiw	r26, 0x02	; 2
     d3e:	3c 93       	st	X, r19
     d40:	2e 93       	st	-X, r18
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	2c e3       	ldi	r18, 0x3C	; 60
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	b9 01       	movw	r22, r18
     d4a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     d4e:	7b 83       	std	Y+3, r23	; 0x03
     d50:	6a 83       	std	Y+2, r22	; 0x02
     d52:	cf 01       	movw	r24, r30
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
     d5a:	9d 83       	std	Y+5, r25	; 0x05
     d5c:	8c 83       	std	Y+4, r24	; 0x04
     d5e:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
     d62:	8d b7       	in	r24, 0x3d	; 61
     d64:	9e b7       	in	r25, 0x3e	; 62
     d66:	06 96       	adiw	r24, 0x06	; 6
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	9e bf       	out	0x3e, r25	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	8d bf       	out	0x3d, r24	; 61
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <timer_init>:
void timer_init(){
	TCNT2 = 0;
     d78:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     d7c:	e6 eb       	ldi	r30, 0xB6	; 182
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 62       	ori	r24, 0x20	; 32
     d84:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     d86:	e0 e7       	ldi	r30, 0x70	; 112
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     d90:	e1 eb       	ldi	r30, 0xB1	; 177
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	81 60       	ori	r24, 0x01	; 1
     d98:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     d9a:	80 81       	ld	r24, Z
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	80 83       	st	Z, r24
}
     da0:	08 95       	ret

00000da2 <__vector_15>:
ISR(TIMER2_OVF_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	0b b6       	in	r0, 0x3b	; 59
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	if(!Thead)
     dc8:	e0 91 73 04 	lds	r30, 0x0473
     dcc:	f0 91 74 04 	lds	r31, 0x0474
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	49 f0       	breq	.+18     	; 0xde6 <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	11 f4       	brne	.+4      	; 0xde6 <__vector_15+0x44>
		timer_expire();
     de2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <timer_expire>
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     e0c:	f8 94       	cli
		ch = qi_delete();
     e0e:	0e 94 c8 02 	call	0x590	; 0x590 <qi_delete>
		sei();
     e12:	78 94       	sei
	}while(ch == 0);
     e14:	88 23       	and	r24, r24
     e16:	d1 f3       	breq	.-12     	; 0xe0c <uart_getchar>

	if (ch == ETX) return -1;
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	11 f0       	breq	.+4      	; 0xe20 <uart_getchar+0x14>
	else		   return ch;
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     e24:	08 95       	ret

00000e26 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     e26:	cf 93       	push	r28
     e28:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     e2a:	8a 30       	cpi	r24, 0x0A	; 10
     e2c:	19 f4       	brne	.+6      	; 0xe34 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     e2e:	8d e0       	ldi	r24, 0x0D	; 13
     e30:	0e 94 13 07 	call	0xe26	; 0xe26 <uart_putchar>
	cli();
     e34:	f8 94       	cli
	if(!uart_busy){
     e36:	80 91 25 07 	lds	r24, 0x0725
     e3a:	88 23       	and	r24, r24
     e3c:	59 f4       	brne	.+22     	; 0xe54 <uart_putchar+0x2e>
		UDR0 = ch;
     e3e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 25 07 	sts	0x0725, r24
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     e4a:	78 94       	sei
     e4c:	86 ef       	ldi	r24, 0xF6	; 246
     e4e:	8a 95       	dec	r24
     e50:	f1 f7       	brne	.-4      	; 0xe4e <uart_putchar+0x28>
			_delay_us(100);
			cli();
     e52:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 e5 02 	call	0x5ca	; 0x5ca <qo_insert>
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	b1 f3       	breq	.-20     	; 0xe4a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     e5e:	78 94       	sei
	return 1;
}
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     e68:	81 e4       	ldi	r24, 0x41	; 65
     e6a:	93 e0       	ldi	r25, 0x03	; 3
     e6c:	90 93 2b 07 	sts	0x072B, r25
     e70:	80 93 2a 07 	sts	0x072A, r24
	stdout = &Mystdout;
     e74:	8f e4       	ldi	r24, 0x4F	; 79
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	90 93 2d 07 	sts	0x072D, r25
     e7c:	80 93 2c 07 	sts	0x072C, r24
	uart_busy = 0;
     e80:	10 92 25 07 	sts	0x0725, r1
	q_init();
     e84:	0e 94 95 02 	call	0x52a	; 0x52a <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     e88:	10 92 c5 00 	sts	0x00C5, r1
     e8c:	87 e0       	ldi	r24, 0x07	; 7
     e8e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     e92:	e0 ec       	ldi	r30, 0xC0	; 192
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	82 60       	ori	r24, 0x02	; 2
     e9a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     e9c:	e1 ec       	ldi	r30, 0xC1	; 193
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     eb2:	80 81       	ld	r24, Z
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	80 83       	st	Z, r24
}
     eb8:	08 95       	ret

00000eba <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     eba:	cf 93       	push	r28
     ebc:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     ebe:	8a 30       	cpi	r24, 0x0A	; 10
     ec0:	19 f4       	brne	.+6      	; 0xec8 <uart_echo+0xe>
     ec2:	8d e0       	ldi	r24, 0x0D	; 13
     ec4:	0e 94 5d 07 	call	0xeba	; 0xeba <uart_echo>
	if(!uart_busy){
     ec8:	80 91 25 07 	lds	r24, 0x0725
     ecc:	88 23       	and	r24, r24
     ece:	31 f4       	brne	.+12     	; 0xedc <uart_echo+0x22>
		UDR0 = ch;
     ed0:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 25 07 	sts	0x0725, r24
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 e5 02 	call	0x5ca	; 0x5ca <qo_insert>
}
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <__vector_25>:
ISR(USART0_RX_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	0b b6       	in	r0, 0x3b	; 59
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	1f 93       	push	r17
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2a 97       	sbiw	r28, 0x0a	; 10
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     f1c:	10 91 c6 00 	lds	r17, 0x00C6
	if(ch != ETX) {
     f20:	14 30       	cpi	r17, 0x04	; 4
     f22:	31 f0       	breq	.+12     	; 0xf30 <__vector_25+0x4a>
		if(ch == '\r')
     f24:	1d 30       	cpi	r17, 0x0D	; 13
     f26:	09 f4       	brne	.+2      	; 0xf2a <__vector_25+0x44>
			ch = '\n';
     f28:	1a e0       	ldi	r17, 0x0A	; 10
		uart_echo(ch);
     f2a:	81 2f       	mov	r24, r17
     f2c:	0e 94 5d 07 	call	0xeba	; 0xeba <uart_echo>
	}
	qi_insert(ch);
     f30:	81 2f       	mov	r24, r17
     f32:	0e 94 a6 02 	call	0x54c	; 0x54c <qi_insert>
	if(ch == ETX || ch == '\n'){
     f36:	14 30       	cpi	r17, 0x04	; 4
     f38:	11 f0       	breq	.+4      	; 0xf3e <__vector_25+0x58>
     f3a:	1a 30       	cpi	r17, 0x0A	; 10
     f3c:	71 f4       	brne	.+28     	; 0xf5a <__vector_25+0x74>
		task.fun = task_cmd;
     f3e:	83 e9       	ldi	r24, 0x93	; 147
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     f46:	ce 01       	movw	r24, r28
     f48:	03 96       	adiw	r24, 0x03	; 3
     f4a:	6d e3       	ldi	r22, 0x3D	; 61
     f4c:	73 e0       	ldi	r23, 0x03	; 3
     f4e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <strcpy>
		task_insert(&task);
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 c0 03 	call	0x780	; 0x780 <task_insert>
	}
}
     f5a:	2a 96       	adiw	r28, 0x0a	; 10
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	1f 91       	pop	r17
     f7e:	0f 90       	pop	r0
     f80:	0b be       	out	0x3b, r0	; 59
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <__vector_27>:
ISR(USART0_TX_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	0b b6       	in	r0, 0x3b	; 59
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     fb2:	0e 94 07 03 	call	0x60e	; 0x60e <qo_delete>
     fb6:	88 23       	and	r24, r24
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <__vector_27+0x34>
		uart_busy = 0;
     fba:	10 92 25 07 	sts	0x0725, r1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <__vector_27+0x38>
	else
		UDR0 = ch;
     fc0:	80 93 c6 00 	sts	0x00C6, r24
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_29>:
ISR(ADC_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	0b b6       	in	r0, 0x3b	; 59
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	2a 97       	sbiw	r28, 0x0a	; 10
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint16_t data;

	data = ADCW & 0x03ff;
    101e:	80 91 78 00 	lds	r24, 0x0078
    1022:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA,ADEN);
    1026:	ea e7       	ldi	r30, 0x7A	; 122
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	20 81       	ld	r18, Z
    102c:	2f 77       	andi	r18, 0x7F	; 127
    102e:	20 83       	st	Z, r18

	task.fun = (void (*)(void *))task_tc1047a;
    1030:	2f e7       	ldi	r18, 0x7F	; 127
    1032:	33 e0       	ldi	r19, 0x03	; 3
    1034:	3a 83       	std	Y+2, r19	; 0x02
    1036:	29 83       	std	Y+1, r18	; 0x01
	sprintf(task.arg, "%d",data);
    1038:	00 d0       	rcall	.+0      	; 0x103a <__vector_29+0x50>
    103a:	00 d0       	rcall	.+0      	; 0x103c <__vector_29+0x52>
    103c:	ed b7       	in	r30, 0x3d	; 61
    103e:	fe b7       	in	r31, 0x3e	; 62
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	9e 01       	movw	r18, r28
    1044:	2d 5f       	subi	r18, 0xFD	; 253
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	ad b7       	in	r26, 0x3d	; 61
    104a:	be b7       	in	r27, 0x3e	; 62
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	3c 93       	st	X, r19
    1050:	2e 93       	st	-X, r18
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	2e e3       	ldi	r18, 0x3E	; 62
    1056:	33 e0       	ldi	r19, 0x03	; 3
    1058:	33 83       	std	Z+3, r19	; 0x03
    105a:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	struct task task;
	uint16_t data;

	data = ADCW & 0x03ff;
    105c:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA,ADEN);

	task.fun = (void (*)(void *))task_tc1047a;
	sprintf(task.arg, "%d",data);
    105e:	95 83       	std	Z+5, r25	; 0x05
    1060:	84 83       	std	Z+4, r24	; 0x04
    1062:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <sprintf>

	task_insert(&task);
    1066:	8d b7       	in	r24, 0x3d	; 61
    1068:	9e b7       	in	r25, 0x3e	; 62
    106a:	06 96       	adiw	r24, 0x06	; 6
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	9e bf       	out	0x3e, r25	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	8d bf       	out	0x3d, r24	; 61
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	0e 94 c0 03 	call	0x780	; 0x780 <task_insert>
}
    107e:	2a 96       	adiw	r28, 0x0a	; 10
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0b be       	out	0x3b, r0	; 59
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_24>:
ISR(SPI_STC_vect)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	0b b6       	in	r0, 0x3b	; 59
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2a 97       	sbiw	r28, 0x0a	; 10
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint8_t data;

	data = SPDR;
    10e2:	2e b5       	in	r18, 0x2e	; 46

	task.fun = (void (*)(void *))task_tc77;
    10e4:	82 e3       	ldi	r24, 0x32	; 50
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <__vector_24+0x40>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <__vector_24+0x42>
    10f0:	ed b7       	in	r30, 0x3d	; 61
    10f2:	fe b7       	in	r31, 0x3e	; 62
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	ce 01       	movw	r24, r28
    10f8:	03 96       	adiw	r24, 0x03	; 3
    10fa:	ad b7       	in	r26, 0x3d	; 61
    10fc:	be b7       	in	r27, 0x3e	; 62
    10fe:	12 96       	adiw	r26, 0x02	; 2
    1100:	9c 93       	st	X, r25
    1102:	8e 93       	st	-X, r24
    1104:	11 97       	sbiw	r26, 0x01	; 1
    1106:	8e e3       	ldi	r24, 0x3E	; 62
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	93 83       	std	Z+3, r25	; 0x03
    110c:	82 83       	std	Z+2, r24	; 0x02
    110e:	24 83       	std	Z+4, r18	; 0x04
    1110:	15 82       	std	Z+5, r1	; 0x05
    1112:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <sprintf>

	task_insert(&task);
    1116:	8d b7       	in	r24, 0x3d	; 61
    1118:	9e b7       	in	r25, 0x3e	; 62
    111a:	06 96       	adiw	r24, 0x06	; 6
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	9e bf       	out	0x3e, r25	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	8d bf       	out	0x3d, r24	; 61
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	0e 94 c0 03 	call	0x780	; 0x780 <task_insert>
}
    112e:	2a 96       	adiw	r28, 0x0a	; 10
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0b be       	out	0x3b, r0	; 59
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <spi_init>:
#include<avr/interrupt.h>
#include<avr/io.h>
#include<compat/deprecated.h>

void spi_init(){
	sbi(DDRB,0);
    115e:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB,1);
    1160:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,2);
    1162:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB,3);
    1164:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);
    1166:	8d b5       	in	r24, 0x2d	; 45
    1168:	81 60       	ori	r24, 0x01	; 1
    116a:	8d bd       	out	0x2d, r24	; 45

	SPCR = ((1<<MSTR) | (1<<SPE) | (1 << SPIE));
    116c:	80 ed       	ldi	r24, 0xD0	; 208
    116e:	8c bd       	out	0x2c, r24	; 44
}
    1170:	08 95       	ret

00001172 <spi_select>:
void spi_select() {
	cbi(PORTB,0);
    1172:	28 98       	cbi	0x05, 0	; 5
}
    1174:	08 95       	ret

00001176 <spi_release>:
void spi_release(){
	sbi(PORTB,0);
    1176:	28 9a       	sbi	0x05, 0	; 5
}
    1178:	08 95       	ret

0000117a <spi_write>:
void spi_write(uint8_t data){
	SPDR = data;
    117a:	8e bd       	out	0x2e, r24	; 46
}
    117c:	08 95       	ret

0000117e <__fixunssfsi>:
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	6b 01       	movw	r12, r22
    118c:	7c 01       	movw	r14, r24
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	5f e4       	ldi	r21, 0x4F	; 79
    1196:	0e 94 ad 0b 	call	0x175a	; 0x175a <__gesf2>
    119a:	87 fd       	sbrc	r24, 7
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <__fixunssfsi+0x42>
    119e:	c7 01       	movw	r24, r14
    11a0:	b6 01       	movw	r22, r12
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	5f e4       	ldi	r21, 0x4F	; 79
    11aa:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__subsf3>
    11ae:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fixsfsi>
    11b2:	8b 01       	movw	r16, r22
    11b4:	9c 01       	movw	r18, r24
    11b6:	00 50       	subi	r16, 0x00	; 0
    11b8:	10 40       	sbci	r17, 0x00	; 0
    11ba:	20 40       	sbci	r18, 0x00	; 0
    11bc:	30 48       	sbci	r19, 0x80	; 128
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <__fixunssfsi+0x4e>
    11c0:	c7 01       	movw	r24, r14
    11c2:	b6 01       	movw	r22, r12
    11c4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fixsfsi>
    11c8:	8b 01       	movw	r16, r22
    11ca:	9c 01       	movw	r18, r24
    11cc:	b8 01       	movw	r22, r16
    11ce:	c9 01       	movw	r24, r18
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	08 95       	ret

000011de <_fpadd_parts>:
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 ef       	ldi	r30, 0xF5	; 245
    11e4:	f8 e0       	ldi	r31, 0x08	; 8
    11e6:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__+0x4>
    11ea:	ec 01       	movw	r28, r24
    11ec:	4b 01       	movw	r8, r22
    11ee:	fa 01       	movw	r30, r20
    11f0:	88 81       	ld	r24, Y
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <_fpadd_parts+0x1a>
    11f6:	3e c1       	rjmp	.+636    	; 0x1474 <_fpadd_parts+0x296>
    11f8:	db 01       	movw	r26, r22
    11fa:	9c 91       	ld	r25, X
    11fc:	92 30       	cpi	r25, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <_fpadd_parts+0x24>
    1200:	36 c1       	rjmp	.+620    	; 0x146e <_fpadd_parts+0x290>
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	59 f4       	brne	.+22     	; 0x121c <_fpadd_parts+0x3e>
    1206:	94 30       	cpi	r25, 0x04	; 4
    1208:	09 f0       	breq	.+2      	; 0x120c <_fpadd_parts+0x2e>
    120a:	34 c1       	rjmp	.+616    	; 0x1474 <_fpadd_parts+0x296>
    120c:	99 81       	ldd	r25, Y+1	; 0x01
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	8c 91       	ld	r24, X
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	98 17       	cp	r25, r24
    1216:	09 f0       	breq	.+2      	; 0x121a <_fpadd_parts+0x3c>
    1218:	27 c1       	rjmp	.+590    	; 0x1468 <_fpadd_parts+0x28a>
    121a:	2c c1       	rjmp	.+600    	; 0x1474 <_fpadd_parts+0x296>
    121c:	94 30       	cpi	r25, 0x04	; 4
    121e:	09 f4       	brne	.+2      	; 0x1222 <_fpadd_parts+0x44>
    1220:	26 c1       	rjmp	.+588    	; 0x146e <_fpadd_parts+0x290>
    1222:	92 30       	cpi	r25, 0x02	; 2
    1224:	a9 f4       	brne	.+42     	; 0x1250 <_fpadd_parts+0x72>
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	09 f0       	breq	.+2      	; 0x122c <_fpadd_parts+0x4e>
    122a:	24 c1       	rjmp	.+584    	; 0x1474 <_fpadd_parts+0x296>
    122c:	ce 01       	movw	r24, r28
    122e:	28 e0       	ldi	r18, 0x08	; 8
    1230:	dc 01       	movw	r26, r24
    1232:	0d 90       	ld	r0, X+
    1234:	cd 01       	movw	r24, r26
    1236:	da 01       	movw	r26, r20
    1238:	0d 92       	st	X+, r0
    123a:	ad 01       	movw	r20, r26
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	c1 f7       	brne	.-16     	; 0x1230 <_fpadd_parts+0x52>
    1240:	d4 01       	movw	r26, r8
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	8c 91       	ld	r24, X
    1246:	11 97       	sbiw	r26, 0x01	; 1
    1248:	99 81       	ldd	r25, Y+1	; 0x01
    124a:	89 23       	and	r24, r25
    124c:	81 83       	std	Z+1, r24	; 0x01
    124e:	11 c1       	rjmp	.+546    	; 0x1472 <_fpadd_parts+0x294>
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	09 f4       	brne	.+2      	; 0x1256 <_fpadd_parts+0x78>
    1254:	0c c1       	rjmp	.+536    	; 0x146e <_fpadd_parts+0x290>
    1256:	aa 80       	ldd	r10, Y+2	; 0x02
    1258:	bb 80       	ldd	r11, Y+3	; 0x03
    125a:	db 01       	movw	r26, r22
    125c:	12 96       	adiw	r26, 0x02	; 2
    125e:	4d 91       	ld	r20, X+
    1260:	5c 91       	ld	r21, X
    1262:	13 97       	sbiw	r26, 0x03	; 3
    1264:	cc 80       	ldd	r12, Y+4	; 0x04
    1266:	dd 80       	ldd	r13, Y+5	; 0x05
    1268:	ee 80       	ldd	r14, Y+6	; 0x06
    126a:	ff 80       	ldd	r15, Y+7	; 0x07
    126c:	14 96       	adiw	r26, 0x04	; 4
    126e:	0d 91       	ld	r16, X+
    1270:	1d 91       	ld	r17, X+
    1272:	2d 91       	ld	r18, X+
    1274:	3c 91       	ld	r19, X
    1276:	17 97       	sbiw	r26, 0x07	; 7
    1278:	c5 01       	movw	r24, r10
    127a:	84 1b       	sub	r24, r20
    127c:	95 0b       	sbc	r25, r21
    127e:	dc 01       	movw	r26, r24
    1280:	97 ff       	sbrs	r25, 7
    1282:	04 c0       	rjmp	.+8      	; 0x128c <_fpadd_parts+0xae>
    1284:	aa 27       	eor	r26, r26
    1286:	bb 27       	eor	r27, r27
    1288:	a8 1b       	sub	r26, r24
    128a:	b9 0b       	sbc	r27, r25
    128c:	a0 32       	cpi	r26, 0x20	; 32
    128e:	b1 05       	cpc	r27, r1
    1290:	0c f0       	brlt	.+2      	; 0x1294 <_fpadd_parts+0xb6>
    1292:	67 c0       	rjmp	.+206    	; 0x1362 <_fpadd_parts+0x184>
    1294:	18 16       	cp	r1, r24
    1296:	19 06       	cpc	r1, r25
    1298:	84 f5       	brge	.+96     	; 0x12fa <_fpadd_parts+0x11c>
    129a:	28 01       	movw	r4, r16
    129c:	39 01       	movw	r6, r18
    129e:	0a 2e       	mov	r0, r26
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <_fpadd_parts+0xcc>
    12a2:	76 94       	lsr	r7
    12a4:	67 94       	ror	r6
    12a6:	57 94       	ror	r5
    12a8:	47 94       	ror	r4
    12aa:	0a 94       	dec	r0
    12ac:	d2 f7       	brpl	.-12     	; 0x12a2 <_fpadd_parts+0xc4>
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <_fpadd_parts+0xe2>
    12b8:	44 0f       	add	r20, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	66 1f       	adc	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	aa 95       	dec	r26
    12c2:	d2 f7       	brpl	.-12     	; 0x12b8 <_fpadd_parts+0xda>
    12c4:	41 50       	subi	r20, 0x01	; 1
    12c6:	50 40       	sbci	r21, 0x00	; 0
    12c8:	60 40       	sbci	r22, 0x00	; 0
    12ca:	70 40       	sbci	r23, 0x00	; 0
    12cc:	40 23       	and	r20, r16
    12ce:	51 23       	and	r21, r17
    12d0:	62 23       	and	r22, r18
    12d2:	73 23       	and	r23, r19
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e0       	ldi	r26, 0x00	; 0
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	41 15       	cp	r20, r1
    12de:	51 05       	cpc	r21, r1
    12e0:	61 05       	cpc	r22, r1
    12e2:	71 05       	cpc	r23, r1
    12e4:	19 f4       	brne	.+6      	; 0x12ec <_fpadd_parts+0x10e>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	dc 01       	movw	r26, r24
    12ec:	8c 01       	movw	r16, r24
    12ee:	9d 01       	movw	r18, r26
    12f0:	04 29       	or	r16, r4
    12f2:	15 29       	or	r17, r5
    12f4:	26 29       	or	r18, r6
    12f6:	37 29       	or	r19, r7
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <_fpadd_parts+0x19a>
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	e9 f1       	breq	.+122    	; 0x1378 <_fpadd_parts+0x19a>
    12fe:	aa 0e       	add	r10, r26
    1300:	bb 1e       	adc	r11, r27
    1302:	26 01       	movw	r4, r12
    1304:	37 01       	movw	r6, r14
    1306:	0a 2e       	mov	r0, r26
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <_fpadd_parts+0x134>
    130a:	76 94       	lsr	r7
    130c:	67 94       	ror	r6
    130e:	57 94       	ror	r5
    1310:	47 94       	ror	r4
    1312:	0a 94       	dec	r0
    1314:	d2 f7       	brpl	.-12     	; 0x130a <_fpadd_parts+0x12c>
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <_fpadd_parts+0x14a>
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	aa 95       	dec	r26
    132a:	d2 f7       	brpl	.-12     	; 0x1320 <_fpadd_parts+0x142>
    132c:	41 50       	subi	r20, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	60 40       	sbci	r22, 0x00	; 0
    1332:	70 40       	sbci	r23, 0x00	; 0
    1334:	4c 21       	and	r20, r12
    1336:	5d 21       	and	r21, r13
    1338:	6e 21       	and	r22, r14
    133a:	7f 21       	and	r23, r15
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	41 15       	cp	r20, r1
    1346:	51 05       	cpc	r21, r1
    1348:	61 05       	cpc	r22, r1
    134a:	71 05       	cpc	r23, r1
    134c:	19 f4       	brne	.+6      	; 0x1354 <_fpadd_parts+0x176>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	dc 01       	movw	r26, r24
    1354:	6c 01       	movw	r12, r24
    1356:	7d 01       	movw	r14, r26
    1358:	c4 28       	or	r12, r4
    135a:	d5 28       	or	r13, r5
    135c:	e6 28       	or	r14, r6
    135e:	f7 28       	or	r15, r7
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <_fpadd_parts+0x19a>
    1362:	4a 15       	cp	r20, r10
    1364:	5b 05       	cpc	r21, r11
    1366:	24 f4       	brge	.+8      	; 0x1370 <_fpadd_parts+0x192>
    1368:	00 e0       	ldi	r16, 0x00	; 0
    136a:	10 e0       	ldi	r17, 0x00	; 0
    136c:	98 01       	movw	r18, r16
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <_fpadd_parts+0x19a>
    1370:	5a 01       	movw	r10, r20
    1372:	cc 24       	eor	r12, r12
    1374:	dd 24       	eor	r13, r13
    1376:	76 01       	movw	r14, r12
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	d4 01       	movw	r26, r8
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	9c 91       	ld	r25, X
    1380:	11 97       	sbiw	r26, 0x01	; 1
    1382:	89 17       	cp	r24, r25
    1384:	09 f4       	brne	.+2      	; 0x1388 <_fpadd_parts+0x1aa>
    1386:	45 c0       	rjmp	.+138    	; 0x1412 <_fpadd_parts+0x234>
    1388:	88 23       	and	r24, r24
    138a:	29 f0       	breq	.+10     	; 0x1396 <_fpadd_parts+0x1b8>
    138c:	0c 19       	sub	r16, r12
    138e:	1d 09       	sbc	r17, r13
    1390:	2e 09       	sbc	r18, r14
    1392:	3f 09       	sbc	r19, r15
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <_fpadd_parts+0x1c8>
    1396:	d7 01       	movw	r26, r14
    1398:	c6 01       	movw	r24, r12
    139a:	80 1b       	sub	r24, r16
    139c:	91 0b       	sbc	r25, r17
    139e:	a2 0b       	sbc	r26, r18
    13a0:	b3 0b       	sbc	r27, r19
    13a2:	8c 01       	movw	r16, r24
    13a4:	9d 01       	movw	r18, r26
    13a6:	37 fd       	sbrc	r19, 7
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <_fpadd_parts+0x1d4>
    13aa:	11 82       	std	Z+1, r1	; 0x01
    13ac:	b3 82       	std	Z+3, r11	; 0x03
    13ae:	a2 82       	std	Z+2, r10	; 0x02
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <_fpadd_parts+0x1ea>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	81 83       	std	Z+1, r24	; 0x01
    13b6:	b3 82       	std	Z+3, r11	; 0x03
    13b8:	a2 82       	std	Z+2, r10	; 0x02
    13ba:	30 95       	com	r19
    13bc:	20 95       	com	r18
    13be:	10 95       	com	r17
    13c0:	01 95       	neg	r16
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	2f 4f       	sbci	r18, 0xFF	; 255
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	04 83       	std	Z+4, r16	; 0x04
    13ca:	15 83       	std	Z+5, r17	; 0x05
    13cc:	26 83       	std	Z+6, r18	; 0x06
    13ce:	37 83       	std	Z+7, r19	; 0x07
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <_fpadd_parts+0x20e>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	84 83       	std	Z+4, r24	; 0x04
    13dc:	95 83       	std	Z+5, r25	; 0x05
    13de:	a6 83       	std	Z+6, r26	; 0x06
    13e0:	b7 83       	std	Z+7, r27	; 0x07
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	93 83       	std	Z+3, r25	; 0x03
    13ea:	82 83       	std	Z+2, r24	; 0x02
    13ec:	84 81       	ldd	r24, Z+4	; 0x04
    13ee:	95 81       	ldd	r25, Z+5	; 0x05
    13f0:	a6 81       	ldd	r26, Z+6	; 0x06
    13f2:	b7 81       	ldd	r27, Z+7	; 0x07
    13f4:	ac 01       	movw	r20, r24
    13f6:	bd 01       	movw	r22, r26
    13f8:	41 50       	subi	r20, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	60 40       	sbci	r22, 0x00	; 0
    13fe:	70 40       	sbci	r23, 0x00	; 0
    1400:	4f 3f       	cpi	r20, 0xFF	; 255
    1402:	2f ef       	ldi	r18, 0xFF	; 255
    1404:	52 07       	cpc	r21, r18
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	62 07       	cpc	r22, r18
    140a:	2f e3       	ldi	r18, 0x3F	; 63
    140c:	72 07       	cpc	r23, r18
    140e:	08 f3       	brcs	.-62     	; 0x13d2 <_fpadd_parts+0x1f4>
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <_fpadd_parts+0x24a>
    1412:	81 83       	std	Z+1, r24	; 0x01
    1414:	b3 82       	std	Z+3, r11	; 0x03
    1416:	a2 82       	std	Z+2, r10	; 0x02
    1418:	0c 0d       	add	r16, r12
    141a:	1d 1d       	adc	r17, r13
    141c:	2e 1d       	adc	r18, r14
    141e:	3f 1d       	adc	r19, r15
    1420:	04 83       	std	Z+4, r16	; 0x04
    1422:	15 83       	std	Z+5, r17	; 0x05
    1424:	26 83       	std	Z+6, r18	; 0x06
    1426:	37 83       	std	Z+7, r19	; 0x07
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	80 83       	st	Z, r24
    142c:	44 81       	ldd	r20, Z+4	; 0x04
    142e:	55 81       	ldd	r21, Z+5	; 0x05
    1430:	66 81       	ldd	r22, Z+6	; 0x06
    1432:	77 81       	ldd	r23, Z+7	; 0x07
    1434:	77 ff       	sbrs	r23, 7
    1436:	1d c0       	rjmp	.+58     	; 0x1472 <_fpadd_parts+0x294>
    1438:	db 01       	movw	r26, r22
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	a0 70       	andi	r26, 0x00	; 0
    1442:	b0 70       	andi	r27, 0x00	; 0
    1444:	76 95       	lsr	r23
    1446:	67 95       	ror	r22
    1448:	57 95       	ror	r21
    144a:	47 95       	ror	r20
    144c:	84 2b       	or	r24, r20
    144e:	95 2b       	or	r25, r21
    1450:	a6 2b       	or	r26, r22
    1452:	b7 2b       	or	r27, r23
    1454:	84 83       	std	Z+4, r24	; 0x04
    1456:	95 83       	std	Z+5, r25	; 0x05
    1458:	a6 83       	std	Z+6, r26	; 0x06
    145a:	b7 83       	std	Z+7, r27	; 0x07
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	93 83       	std	Z+3, r25	; 0x03
    1464:	82 83       	std	Z+2, r24	; 0x02
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <_fpadd_parts+0x294>
    1468:	cd e5       	ldi	r28, 0x5D	; 93
    146a:	d3 e0       	ldi	r29, 0x03	; 3
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <_fpadd_parts+0x296>
    146e:	e4 01       	movw	r28, r8
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <_fpadd_parts+0x296>
    1472:	ef 01       	movw	r28, r30
    1474:	ce 01       	movw	r24, r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	e0 e1       	ldi	r30, 0x10	; 16
    147c:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__+0x4>

00001480 <__addsf3>:
    1480:	a0 e2       	ldi	r26, 0x20	; 32
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e6 e4       	ldi	r30, 0x46	; 70
    1486:	fa e0       	ldi	r31, 0x0A	; 10
    1488:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__+0x20>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	af 83       	std	Y+7, r26	; 0x07
    1496:	b8 87       	std	Y+8, r27	; 0x08
    1498:	29 83       	std	Y+1, r18	; 0x01
    149a:	3a 83       	std	Y+2, r19	; 0x02
    149c:	4b 83       	std	Y+3, r20	; 0x03
    149e:	5c 83       	std	Y+4, r21	; 0x04
    14a0:	ce 01       	movw	r24, r28
    14a2:	05 96       	adiw	r24, 0x05	; 5
    14a4:	be 01       	movw	r22, r28
    14a6:	67 5e       	subi	r22, 0xE7	; 231
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	be 01       	movw	r22, r28
    14b4:	6f 5e       	subi	r22, 0xEF	; 239
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    14bc:	ce 01       	movw	r24, r28
    14be:	49 96       	adiw	r24, 0x19	; 25
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5e       	subi	r22, 0xEF	; 239
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	ae 01       	movw	r20, r28
    14c8:	47 5f       	subi	r20, 0xF7	; 247
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	0e 94 ef 08 	call	0x11de	; 0x11de <_fpadd_parts>
    14d0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__pack_f>
    14d4:	46 2f       	mov	r20, r22
    14d6:	57 2f       	mov	r21, r23
    14d8:	68 2f       	mov	r22, r24
    14da:	79 2f       	mov	r23, r25
    14dc:	cb 01       	movw	r24, r22
    14de:	ba 01       	movw	r22, r20
    14e0:	a0 96       	adiw	r28, 0x20	; 32
    14e2:	e2 e0       	ldi	r30, 0x02	; 2
    14e4:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__+0x20>

000014e8 <__subsf3>:
    14e8:	a0 e2       	ldi	r26, 0x20	; 32
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e7       	ldi	r30, 0x7A	; 122
    14ee:	fa e0       	ldi	r31, 0x0A	; 10
    14f0:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__+0x20>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	af 83       	std	Y+7, r26	; 0x07
    14fe:	b8 87       	std	Y+8, r27	; 0x08
    1500:	29 83       	std	Y+1, r18	; 0x01
    1502:	3a 83       	std	Y+2, r19	; 0x02
    1504:	4b 83       	std	Y+3, r20	; 0x03
    1506:	5c 83       	std	Y+4, r21	; 0x04
    1508:	ce 01       	movw	r24, r28
    150a:	05 96       	adiw	r24, 0x05	; 5
    150c:	be 01       	movw	r22, r28
    150e:	67 5e       	subi	r22, 0xE7	; 231
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	be 01       	movw	r22, r28
    151c:	6f 5e       	subi	r22, 0xEF	; 239
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1524:	8a 89       	ldd	r24, Y+18	; 0x12
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	89 27       	eor	r24, r25
    152a:	8a 8b       	std	Y+18, r24	; 0x12
    152c:	ce 01       	movw	r24, r28
    152e:	49 96       	adiw	r24, 0x19	; 25
    1530:	be 01       	movw	r22, r28
    1532:	6f 5e       	subi	r22, 0xEF	; 239
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	ae 01       	movw	r20, r28
    1538:	47 5f       	subi	r20, 0xF7	; 247
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	0e 94 ef 08 	call	0x11de	; 0x11de <_fpadd_parts>
    1540:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__pack_f>
    1544:	46 2f       	mov	r20, r22
    1546:	57 2f       	mov	r21, r23
    1548:	68 2f       	mov	r22, r24
    154a:	79 2f       	mov	r23, r25
    154c:	cb 01       	movw	r24, r22
    154e:	ba 01       	movw	r22, r20
    1550:	a0 96       	adiw	r28, 0x20	; 32
    1552:	e2 e0       	ldi	r30, 0x02	; 2
    1554:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__+0x20>

00001558 <__mulsf3>:
    1558:	a0 e2       	ldi	r26, 0x20	; 32
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 eb       	ldi	r30, 0xB2	; 178
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__+0x4>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	af 83       	std	Y+7, r26	; 0x07
    156e:	b8 87       	std	Y+8, r27	; 0x08
    1570:	29 83       	std	Y+1, r18	; 0x01
    1572:	3a 83       	std	Y+2, r19	; 0x02
    1574:	4b 83       	std	Y+3, r20	; 0x03
    1576:	5c 83       	std	Y+4, r21	; 0x04
    1578:	ce 01       	movw	r24, r28
    157a:	05 96       	adiw	r24, 0x05	; 5
    157c:	be 01       	movw	r22, r28
    157e:	67 5e       	subi	r22, 0xE7	; 231
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	be 01       	movw	r22, r28
    158c:	6f 5e       	subi	r22, 0xEF	; 239
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1594:	99 8d       	ldd	r25, Y+25	; 0x19
    1596:	92 30       	cpi	r25, 0x02	; 2
    1598:	78 f0       	brcs	.+30     	; 0x15b8 <__mulsf3+0x60>
    159a:	89 89       	ldd	r24, Y+17	; 0x11
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	c0 f0       	brcs	.+48     	; 0x15d0 <__mulsf3+0x78>
    15a0:	94 30       	cpi	r25, 0x04	; 4
    15a2:	19 f4       	brne	.+6      	; 0x15aa <__mulsf3+0x52>
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	41 f4       	brne	.+16     	; 0x15b8 <__mulsf3+0x60>
    15a8:	ca c0       	rjmp	.+404    	; 0x173e <__mulsf3+0x1e6>
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <__mulsf3+0x5c>
    15ae:	92 30       	cpi	r25, 0x02	; 2
    15b0:	79 f4       	brne	.+30     	; 0x15d0 <__mulsf3+0x78>
    15b2:	c5 c0       	rjmp	.+394    	; 0x173e <__mulsf3+0x1e6>
    15b4:	92 30       	cpi	r25, 0x02	; 2
    15b6:	51 f4       	brne	.+20     	; 0x15cc <__mulsf3+0x74>
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
    15bc:	9a 89       	ldd	r25, Y+18	; 0x12
    15be:	29 17       	cp	r18, r25
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <__mulsf3+0x6c>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	8a 8f       	std	Y+26, r24	; 0x1a
    15c6:	ce 01       	movw	r24, r28
    15c8:	49 96       	adiw	r24, 0x19	; 25
    15ca:	bb c0       	rjmp	.+374    	; 0x1742 <__mulsf3+0x1ea>
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	51 f4       	brne	.+20     	; 0x15e4 <__mulsf3+0x8c>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    15d4:	9a 89       	ldd	r25, Y+18	; 0x12
    15d6:	29 17       	cp	r18, r25
    15d8:	09 f4       	brne	.+2      	; 0x15dc <__mulsf3+0x84>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	8a 8b       	std	Y+18, r24	; 0x12
    15de:	ce 01       	movw	r24, r28
    15e0:	41 96       	adiw	r24, 0x11	; 17
    15e2:	af c0       	rjmp	.+350    	; 0x1742 <__mulsf3+0x1ea>
    15e4:	4d 8c       	ldd	r4, Y+29	; 0x1d
    15e6:	5e 8c       	ldd	r5, Y+30	; 0x1e
    15e8:	6f 8c       	ldd	r6, Y+31	; 0x1f
    15ea:	78 a0       	lds	r23, 0x88
    15ec:	0d 89       	ldd	r16, Y+21	; 0x15
    15ee:	1e 89       	ldd	r17, Y+22	; 0x16
    15f0:	2f 89       	ldd	r18, Y+23	; 0x17
    15f2:	38 8d       	ldd	r19, Y+24	; 0x18
    15f4:	e0 e2       	ldi	r30, 0x20	; 32
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	ba 01       	movw	r22, r20
    15fe:	88 24       	eor	r8, r8
    1600:	99 24       	eor	r9, r9
    1602:	54 01       	movw	r10, r8
    1604:	cc 24       	eor	r12, r12
    1606:	dd 24       	eor	r13, r13
    1608:	76 01       	movw	r14, r12
    160a:	c2 01       	movw	r24, r4
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	d1 f0       	breq	.+52     	; 0x1648 <__mulsf3+0xf0>
    1614:	c0 0e       	add	r12, r16
    1616:	d1 1e       	adc	r13, r17
    1618:	e2 1e       	adc	r14, r18
    161a:	f3 1e       	adc	r15, r19
    161c:	db 01       	movw	r26, r22
    161e:	ca 01       	movw	r24, r20
    1620:	88 0d       	add	r24, r8
    1622:	99 1d       	adc	r25, r9
    1624:	aa 1d       	adc	r26, r10
    1626:	bb 1d       	adc	r27, r11
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	c0 16       	cp	r12, r16
    1632:	d1 06       	cpc	r13, r17
    1634:	e2 06       	cpc	r14, r18
    1636:	f3 06       	cpc	r15, r19
    1638:	18 f0       	brcs	.+6      	; 0x1640 <__mulsf3+0xe8>
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	ba 01       	movw	r22, r20
    1640:	48 0f       	add	r20, r24
    1642:	59 1f       	adc	r21, r25
    1644:	6a 1f       	adc	r22, r26
    1646:	7b 1f       	adc	r23, r27
    1648:	88 0c       	add	r8, r8
    164a:	99 1c       	adc	r9, r9
    164c:	aa 1c       	adc	r10, r10
    164e:	bb 1c       	adc	r11, r11
    1650:	37 ff       	sbrs	r19, 7
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <__mulsf3+0x10c>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	88 2a       	or	r8, r24
    165e:	99 2a       	or	r9, r25
    1660:	aa 2a       	or	r10, r26
    1662:	bb 2a       	or	r11, r27
    1664:	00 0f       	add	r16, r16
    1666:	11 1f       	adc	r17, r17
    1668:	22 1f       	adc	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	76 94       	lsr	r7
    166e:	67 94       	ror	r6
    1670:	57 94       	ror	r5
    1672:	47 94       	ror	r4
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	49 f6       	brne	.-110    	; 0x160a <__mulsf3+0xb2>
    1678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167c:	2b 89       	ldd	r18, Y+19	; 0x13
    167e:	3c 89       	ldd	r19, Y+20	; 0x14
    1680:	82 0f       	add	r24, r18
    1682:	93 1f       	adc	r25, r19
    1684:	02 96       	adiw	r24, 0x02	; 2
    1686:	9c 87       	std	Y+12, r25	; 0x0c
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    168e:	9a 89       	ldd	r25, Y+18	; 0x12
    1690:	29 17       	cp	r18, r25
    1692:	09 f4       	brne	.+2      	; 0x1696 <__mulsf3+0x13e>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	8a 87       	std	Y+10, r24	; 0x0a
    1698:	2b 85       	ldd	r18, Y+11	; 0x0b
    169a:	3c 85       	ldd	r19, Y+12	; 0x0c
    169c:	17 c0       	rjmp	.+46     	; 0x16cc <__mulsf3+0x174>
    169e:	ca 01       	movw	r24, r20
    16a0:	81 70       	andi	r24, 0x01	; 1
    16a2:	90 70       	andi	r25, 0x00	; 0
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <__mulsf3+0x168>
    16a8:	f6 94       	lsr	r15
    16aa:	e7 94       	ror	r14
    16ac:	d7 94       	ror	r13
    16ae:	c7 94       	ror	r12
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e8       	ldi	r27, 0x80	; 128
    16b8:	c8 2a       	or	r12, r24
    16ba:	d9 2a       	or	r13, r25
    16bc:	ea 2a       	or	r14, r26
    16be:	fb 2a       	or	r15, r27
    16c0:	76 95       	lsr	r23
    16c2:	67 95       	ror	r22
    16c4:	57 95       	ror	r21
    16c6:	47 95       	ror	r20
    16c8:	2f 5f       	subi	r18, 0xFF	; 255
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	77 fd       	sbrc	r23, 7
    16ce:	e7 cf       	rjmp	.-50     	; 0x169e <__mulsf3+0x146>
    16d0:	c9 01       	movw	r24, r18
    16d2:	0b c0       	rjmp	.+22     	; 0x16ea <__mulsf3+0x192>
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	f7 fc       	sbrc	r15, 7
    16de:	41 60       	ori	r20, 0x01	; 1
    16e0:	cc 0c       	add	r12, r12
    16e2:	dd 1c       	adc	r13, r13
    16e4:	ee 1c       	adc	r14, r14
    16e6:	ff 1c       	adc	r15, r15
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	40 30       	cpi	r20, 0x00	; 0
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	5a 07       	cpc	r21, r26
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	6a 07       	cpc	r22, r26
    16f4:	a0 e4       	ldi	r26, 0x40	; 64
    16f6:	7a 07       	cpc	r23, r26
    16f8:	68 f3       	brcs	.-38     	; 0x16d4 <__mulsf3+0x17c>
    16fa:	8b 87       	std	Y+11, r24	; 0x0b
    16fc:	9c 87       	std	Y+12, r25	; 0x0c
    16fe:	db 01       	movw	r26, r22
    1700:	ca 01       	movw	r24, r20
    1702:	8f 77       	andi	r24, 0x7F	; 127
    1704:	90 70       	andi	r25, 0x00	; 0
    1706:	a0 70       	andi	r26, 0x00	; 0
    1708:	b0 70       	andi	r27, 0x00	; 0
    170a:	80 34       	cpi	r24, 0x40	; 64
    170c:	91 05       	cpc	r25, r1
    170e:	a1 05       	cpc	r26, r1
    1710:	b1 05       	cpc	r27, r1
    1712:	61 f4       	brne	.+24     	; 0x172c <__mulsf3+0x1d4>
    1714:	47 fd       	sbrc	r20, 7
    1716:	0a c0       	rjmp	.+20     	; 0x172c <__mulsf3+0x1d4>
    1718:	c1 14       	cp	r12, r1
    171a:	d1 04       	cpc	r13, r1
    171c:	e1 04       	cpc	r14, r1
    171e:	f1 04       	cpc	r15, r1
    1720:	29 f0       	breq	.+10     	; 0x172c <__mulsf3+0x1d4>
    1722:	40 5c       	subi	r20, 0xC0	; 192
    1724:	5f 4f       	sbci	r21, 0xFF	; 255
    1726:	6f 4f       	sbci	r22, 0xFF	; 255
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	40 78       	andi	r20, 0x80	; 128
    172c:	4d 87       	std	Y+13, r20	; 0x0d
    172e:	5e 87       	std	Y+14, r21	; 0x0e
    1730:	6f 87       	std	Y+15, r22	; 0x0f
    1732:	78 8b       	std	Y+16, r23	; 0x10
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	89 87       	std	Y+9, r24	; 0x09
    1738:	ce 01       	movw	r24, r28
    173a:	09 96       	adiw	r24, 0x09	; 9
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <__mulsf3+0x1ea>
    173e:	8d e5       	ldi	r24, 0x5D	; 93
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__pack_f>
    1746:	46 2f       	mov	r20, r22
    1748:	57 2f       	mov	r21, r23
    174a:	68 2f       	mov	r22, r24
    174c:	79 2f       	mov	r23, r25
    174e:	cb 01       	movw	r24, r22
    1750:	ba 01       	movw	r22, r20
    1752:	a0 96       	adiw	r28, 0x20	; 32
    1754:	e0 e1       	ldi	r30, 0x10	; 16
    1756:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__+0x4>

0000175a <__gesf2>:
    175a:	a8 e1       	ldi	r26, 0x18	; 24
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e3 eb       	ldi	r30, 0xB3	; 179
    1760:	fb e0       	ldi	r31, 0x0B	; 11
    1762:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__+0x20>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	af 83       	std	Y+7, r26	; 0x07
    1770:	b8 87       	std	Y+8, r27	; 0x08
    1772:	29 83       	std	Y+1, r18	; 0x01
    1774:	3a 83       	std	Y+2, r19	; 0x02
    1776:	4b 83       	std	Y+3, r20	; 0x03
    1778:	5c 83       	std	Y+4, r21	; 0x04
    177a:	ce 01       	movw	r24, r28
    177c:	05 96       	adiw	r24, 0x05	; 5
    177e:	be 01       	movw	r22, r28
    1780:	6f 5e       	subi	r22, 0xEF	; 239
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	be 01       	movw	r22, r28
    178e:	67 5f       	subi	r22, 0xF7	; 247
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    1796:	89 89       	ldd	r24, Y+17	; 0x11
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	58 f0       	brcs	.+22     	; 0x17b2 <__gesf2+0x58>
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	40 f0       	brcs	.+16     	; 0x17b2 <__gesf2+0x58>
    17a2:	ce 01       	movw	r24, r28
    17a4:	41 96       	adiw	r24, 0x11	; 17
    17a6:	be 01       	movw	r22, r28
    17a8:	67 5f       	subi	r22, 0xF7	; 247
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fpcmp_parts_f>
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <__gesf2+0x5a>
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	68 96       	adiw	r28, 0x18	; 24
    17b6:	e2 e0       	ldi	r30, 0x02	; 2
    17b8:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__+0x20>

000017bc <__floatsisf>:
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	28 97       	sbiw	r28, 0x08	; 8
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	6b 01       	movw	r12, r22
    17da:	7c 01       	movw	r14, r24
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	d7 01       	movw	r26, r14
    17e2:	c6 01       	movw	r24, r12
    17e4:	88 27       	eor	r24, r24
    17e6:	b7 fd       	sbrc	r27, 7
    17e8:	83 95       	inc	r24
    17ea:	99 27       	eor	r25, r25
    17ec:	aa 27       	eor	r26, r26
    17ee:	bb 27       	eor	r27, r27
    17f0:	28 2f       	mov	r18, r24
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	c1 14       	cp	r12, r1
    17f6:	d1 04       	cpc	r13, r1
    17f8:	e1 04       	cpc	r14, r1
    17fa:	f1 04       	cpc	r15, r1
    17fc:	19 f4       	brne	.+6      	; 0x1804 <__floatsisf+0x48>
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	35 c0       	rjmp	.+106    	; 0x186e <__floatsisf+0xb2>
    1804:	8e e1       	ldi	r24, 0x1E	; 30
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	22 23       	and	r18, r18
    180e:	89 f0       	breq	.+34     	; 0x1832 <__floatsisf+0x76>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	c8 16       	cp	r12, r24
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	d8 06       	cpc	r13, r24
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	e8 06       	cpc	r14, r24
    181c:	80 e8       	ldi	r24, 0x80	; 128
    181e:	f8 06       	cpc	r15, r24
    1820:	59 f1       	breq	.+86     	; 0x1878 <__floatsisf+0xbc>
    1822:	f0 94       	com	r15
    1824:	e0 94       	com	r14
    1826:	d0 94       	com	r13
    1828:	c0 94       	com	r12
    182a:	c1 1c       	adc	r12, r1
    182c:	d1 1c       	adc	r13, r1
    182e:	e1 1c       	adc	r14, r1
    1830:	f1 1c       	adc	r15, r1
    1832:	cd 82       	std	Y+5, r12	; 0x05
    1834:	de 82       	std	Y+6, r13	; 0x06
    1836:	ef 82       	std	Y+7, r14	; 0x07
    1838:	f8 86       	std	Y+8, r15	; 0x08
    183a:	c7 01       	movw	r24, r14
    183c:	b6 01       	movw	r22, r12
    183e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__clzsi2>
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	18 16       	cp	r1, r24
    1846:	19 06       	cpc	r1, r25
    1848:	94 f4       	brge	.+36     	; 0x186e <__floatsisf+0xb2>
    184a:	08 2e       	mov	r0, r24
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <__floatsisf+0x9a>
    184e:	cc 0c       	add	r12, r12
    1850:	dd 1c       	adc	r13, r13
    1852:	ee 1c       	adc	r14, r14
    1854:	ff 1c       	adc	r15, r15
    1856:	0a 94       	dec	r0
    1858:	d2 f7       	brpl	.-12     	; 0x184e <__floatsisf+0x92>
    185a:	cd 82       	std	Y+5, r12	; 0x05
    185c:	de 82       	std	Y+6, r13	; 0x06
    185e:	ef 82       	std	Y+7, r14	; 0x07
    1860:	f8 86       	std	Y+8, r15	; 0x08
    1862:	2e e1       	ldi	r18, 0x1E	; 30
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	28 1b       	sub	r18, r24
    1868:	39 0b       	sbc	r19, r25
    186a:	3c 83       	std	Y+4, r19	; 0x04
    186c:	2b 83       	std	Y+3, r18	; 0x03
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__pack_f>
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <__floatsisf+0xc4>
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	9f ec       	ldi	r25, 0xCF	; 207
    1880:	38 2f       	mov	r19, r24
    1882:	29 2f       	mov	r18, r25
    1884:	86 2f       	mov	r24, r22
    1886:	97 2f       	mov	r25, r23
    1888:	a3 2f       	mov	r26, r19
    188a:	b2 2f       	mov	r27, r18
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	28 96       	adiw	r28, 0x08	; 8
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <__fixsfsi>:
    18aa:	ac e0       	ldi	r26, 0x0C	; 12
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e5       	ldi	r30, 0x5B	; 91
    18b0:	fc e0       	ldi	r31, 0x0C	; 12
    18b2:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__prologue_saves__+0x1c>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	ab 83       	std	Y+3, r26	; 0x03
    18c0:	bc 83       	std	Y+4, r27	; 0x04
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	be 01       	movw	r22, r28
    18c8:	6b 5f       	subi	r22, 0xFB	; 251
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__unpack_f>
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	69 f1       	breq	.+90     	; 0x1930 <__fixsfsi+0x86>
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	58 f1       	brcs	.+86     	; 0x1930 <__fixsfsi+0x86>
    18da:	84 30       	cpi	r24, 0x04	; 4
    18dc:	39 f0       	breq	.+14     	; 0x18ec <__fixsfsi+0x42>
    18de:	2f 81       	ldd	r18, Y+7	; 0x07
    18e0:	38 85       	ldd	r19, Y+8	; 0x08
    18e2:	37 fd       	sbrc	r19, 7
    18e4:	25 c0       	rjmp	.+74     	; 0x1930 <__fixsfsi+0x86>
    18e6:	2f 31       	cpi	r18, 0x1F	; 31
    18e8:	31 05       	cpc	r19, r1
    18ea:	44 f0       	brlt	.+16     	; 0x18fc <__fixsfsi+0x52>
    18ec:	8e 81       	ldd	r24, Y+6	; 0x06
    18ee:	88 23       	and	r24, r24
    18f0:	19 f1       	breq	.+70     	; 0x1938 <__fixsfsi+0x8e>
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e8       	ldi	r19, 0x80	; 128
    18fa:	22 c0       	rjmp	.+68     	; 0x1940 <__fixsfsi+0x96>
    18fc:	8e e1       	ldi	r24, 0x1E	; 30
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	82 1b       	sub	r24, r18
    1902:	93 0b       	sbc	r25, r19
    1904:	09 85       	ldd	r16, Y+9	; 0x09
    1906:	1a 85       	ldd	r17, Y+10	; 0x0a
    1908:	2b 85       	ldd	r18, Y+11	; 0x0b
    190a:	3c 85       	ldd	r19, Y+12	; 0x0c
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__fixsfsi+0x6c>
    190e:	36 95       	lsr	r19
    1910:	27 95       	ror	r18
    1912:	17 95       	ror	r17
    1914:	07 95       	ror	r16
    1916:	8a 95       	dec	r24
    1918:	d2 f7       	brpl	.-12     	; 0x190e <__fixsfsi+0x64>
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	88 23       	and	r24, r24
    191e:	81 f0       	breq	.+32     	; 0x1940 <__fixsfsi+0x96>
    1920:	30 95       	com	r19
    1922:	20 95       	com	r18
    1924:	10 95       	com	r17
    1926:	01 95       	neg	r16
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	2f 4f       	sbci	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <__fixsfsi+0x96>
    1930:	00 e0       	ldi	r16, 0x00	; 0
    1932:	10 e0       	ldi	r17, 0x00	; 0
    1934:	98 01       	movw	r18, r16
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__fixsfsi+0x96>
    1938:	0f ef       	ldi	r16, 0xFF	; 255
    193a:	1f ef       	ldi	r17, 0xFF	; 255
    193c:	2f ef       	ldi	r18, 0xFF	; 255
    193e:	3f e7       	ldi	r19, 0x7F	; 127
    1940:	b8 01       	movw	r22, r16
    1942:	c9 01       	movw	r24, r18
    1944:	2c 96       	adiw	r28, 0x0c	; 12
    1946:	e4 e0       	ldi	r30, 0x04	; 4
    1948:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x1c>

0000194c <__floatunsisf>:
    194c:	a8 e0       	ldi	r26, 0x08	; 8
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ec ea       	ldi	r30, 0xAC	; 172
    1952:	fc e0       	ldi	r31, 0x0C	; 12
    1954:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__prologue_saves__+0x14>
    1958:	6b 01       	movw	r12, r22
    195a:	7c 01       	movw	r14, r24
    195c:	1a 82       	std	Y+2, r1	; 0x02
    195e:	61 15       	cp	r22, r1
    1960:	71 05       	cpc	r23, r1
    1962:	81 05       	cpc	r24, r1
    1964:	91 05       	cpc	r25, r1
    1966:	19 f4       	brne	.+6      	; 0x196e <__floatunsisf+0x22>
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	5e c0       	rjmp	.+188    	; 0x1a2a <__floatunsisf+0xde>
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	0e e1       	ldi	r16, 0x1E	; 30
    1974:	10 e0       	ldi	r17, 0x00	; 0
    1976:	1c 83       	std	Y+4, r17	; 0x04
    1978:	0b 83       	std	Y+3, r16	; 0x03
    197a:	cd 82       	std	Y+5, r12	; 0x05
    197c:	de 82       	std	Y+6, r13	; 0x06
    197e:	ef 82       	std	Y+7, r14	; 0x07
    1980:	f8 86       	std	Y+8, r15	; 0x08
    1982:	c7 01       	movw	r24, r14
    1984:	b6 01       	movw	r22, r12
    1986:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__clzsi2>
    198a:	9c 01       	movw	r18, r24
    198c:	21 50       	subi	r18, 0x01	; 1
    198e:	30 40       	sbci	r19, 0x00	; 0
    1990:	37 ff       	sbrs	r19, 7
    1992:	38 c0       	rjmp	.+112    	; 0x1a04 <__floatunsisf+0xb8>
    1994:	ee 27       	eor	r30, r30
    1996:	ff 27       	eor	r31, r31
    1998:	e2 1b       	sub	r30, r18
    199a:	f3 0b       	sbc	r31, r19
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e0       	ldi	r26, 0x00	; 0
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	0e 2e       	mov	r0, r30
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <__floatunsisf+0x64>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	aa 1f       	adc	r26, r26
    19ae:	bb 1f       	adc	r27, r27
    19b0:	0a 94       	dec	r0
    19b2:	d2 f7       	brpl	.-12     	; 0x19a8 <__floatunsisf+0x5c>
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	a1 09       	sbc	r26, r1
    19b8:	b1 09       	sbc	r27, r1
    19ba:	8c 21       	and	r24, r12
    19bc:	9d 21       	and	r25, r13
    19be:	ae 21       	and	r26, r14
    19c0:	bf 21       	and	r27, r15
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	a1 05       	cpc	r26, r1
    19ce:	b1 05       	cpc	r27, r1
    19d0:	19 f4       	brne	.+6      	; 0x19d8 <__floatunsisf+0x8c>
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	ba 01       	movw	r22, r20
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <__floatunsisf+0x96>
    19da:	f6 94       	lsr	r15
    19dc:	e7 94       	ror	r14
    19de:	d7 94       	ror	r13
    19e0:	c7 94       	ror	r12
    19e2:	ea 95       	dec	r30
    19e4:	d2 f7       	brpl	.-12     	; 0x19da <__floatunsisf+0x8e>
    19e6:	c4 2a       	or	r12, r20
    19e8:	d5 2a       	or	r13, r21
    19ea:	e6 2a       	or	r14, r22
    19ec:	f7 2a       	or	r15, r23
    19ee:	cd 82       	std	Y+5, r12	; 0x05
    19f0:	de 82       	std	Y+6, r13	; 0x06
    19f2:	ef 82       	std	Y+7, r14	; 0x07
    19f4:	f8 86       	std	Y+8, r15	; 0x08
    19f6:	8e e1       	ldi	r24, 0x1E	; 30
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	82 1b       	sub	r24, r18
    19fc:	93 0b       	sbc	r25, r19
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <__floatunsisf+0xde>
    1a04:	21 15       	cp	r18, r1
    1a06:	31 05       	cpc	r19, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <__floatunsisf+0xde>
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <__floatunsisf+0xca>
    1a0e:	cc 0c       	add	r12, r12
    1a10:	dd 1c       	adc	r13, r13
    1a12:	ee 1c       	adc	r14, r14
    1a14:	ff 1c       	adc	r15, r15
    1a16:	0a 94       	dec	r0
    1a18:	d2 f7       	brpl	.-12     	; 0x1a0e <__floatunsisf+0xc2>
    1a1a:	cd 82       	std	Y+5, r12	; 0x05
    1a1c:	de 82       	std	Y+6, r13	; 0x06
    1a1e:	ef 82       	std	Y+7, r14	; 0x07
    1a20:	f8 86       	std	Y+8, r15	; 0x08
    1a22:	02 1b       	sub	r16, r18
    1a24:	13 0b       	sbc	r17, r19
    1a26:	1c 83       	std	Y+4, r17	; 0x04
    1a28:	0b 83       	std	Y+3, r16	; 0x03
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__pack_f>
    1a32:	46 2f       	mov	r20, r22
    1a34:	57 2f       	mov	r21, r23
    1a36:	68 2f       	mov	r22, r24
    1a38:	79 2f       	mov	r23, r25
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	ba 01       	movw	r22, r20
    1a3e:	28 96       	adiw	r28, 0x08	; 8
    1a40:	e8 e0       	ldi	r30, 0x08	; 8
    1a42:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__epilogue_restores__+0x14>

00001a46 <__clzsi2>:
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	8b 01       	movw	r16, r22
    1a54:	9c 01       	movw	r18, r24
    1a56:	00 30       	cpi	r16, 0x00	; 0
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	18 07       	cpc	r17, r24
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	28 07       	cpc	r18, r24
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	38 07       	cpc	r19, r24
    1a64:	50 f4       	brcc	.+20     	; 0x1a7a <__clzsi2+0x34>
    1a66:	0f 3f       	cpi	r16, 0xFF	; 255
    1a68:	11 05       	cpc	r17, r1
    1a6a:	21 05       	cpc	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <__clzsi2+0x2c>
    1a70:	88 f4       	brcc	.+34     	; 0x1a94 <__clzsi2+0x4e>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	dc 01       	movw	r26, r24
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <__clzsi2+0x60>
    1a7a:	00 30       	cpi	r16, 0x00	; 0
    1a7c:	e0 e0       	ldi	r30, 0x00	; 0
    1a7e:	1e 07       	cpc	r17, r30
    1a80:	e0 e0       	ldi	r30, 0x00	; 0
    1a82:	2e 07       	cpc	r18, r30
    1a84:	e1 e0       	ldi	r30, 0x01	; 1
    1a86:	3e 07       	cpc	r19, r30
    1a88:	50 f4       	brcc	.+20     	; 0x1a9e <__clzsi2+0x58>
    1a8a:	80 e1       	ldi	r24, 0x10	; 16
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <__clzsi2+0x60>
    1a94:	88 e0       	ldi	r24, 0x08	; 8
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__clzsi2+0x60>
    1a9e:	88 e1       	ldi	r24, 0x18	; 24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e0       	ldi	r26, 0x00	; 0
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	48 1b       	sub	r20, r24
    1ab0:	59 0b       	sbc	r21, r25
    1ab2:	6a 0b       	sbc	r22, r26
    1ab4:	7b 0b       	sbc	r23, r27
    1ab6:	68 01       	movw	r12, r16
    1ab8:	79 01       	movw	r14, r18
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <__clzsi2+0x7e>
    1abc:	f6 94       	lsr	r15
    1abe:	e7 94       	ror	r14
    1ac0:	d7 94       	ror	r13
    1ac2:	c7 94       	ror	r12
    1ac4:	8a 95       	dec	r24
    1ac6:	d2 f7       	brpl	.-12     	; 0x1abc <__clzsi2+0x76>
    1ac8:	d7 01       	movw	r26, r14
    1aca:	c6 01       	movw	r24, r12
    1acc:	8b 59       	subi	r24, 0x9B	; 155
    1ace:	9c 4f       	sbci	r25, 0xFC	; 252
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 1b       	sub	r20, r24
    1ad6:	51 09       	sbc	r21, r1
    1ad8:	61 09       	sbc	r22, r1
    1ada:	71 09       	sbc	r23, r1
    1adc:	ca 01       	movw	r24, r20
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	cf 90       	pop	r12
    1aea:	08 95       	ret

00001aec <__pack_f>:
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	dc 01       	movw	r26, r24
    1afa:	14 96       	adiw	r26, 0x04	; 4
    1afc:	4d 91       	ld	r20, X+
    1afe:	5d 91       	ld	r21, X+
    1b00:	6d 91       	ld	r22, X+
    1b02:	7c 91       	ld	r23, X
    1b04:	17 97       	sbiw	r26, 0x07	; 7
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	ec 91       	ld	r30, X
    1b0a:	11 97       	sbiw	r26, 0x01	; 1
    1b0c:	8c 91       	ld	r24, X
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	20 f4       	brcc	.+8      	; 0x1b1a <__pack_f+0x2e>
    1b12:	60 61       	ori	r22, 0x10	; 16
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a5 c0       	rjmp	.+330    	; 0x1c64 <__pack_f+0x178>
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <__pack_f+0x34>
    1b1e:	9d c0       	rjmp	.+314    	; 0x1c5a <__pack_f+0x16e>
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__pack_f+0x3a>
    1b24:	94 c0       	rjmp	.+296    	; 0x1c4e <__pack_f+0x162>
    1b26:	41 15       	cp	r20, r1
    1b28:	51 05       	cpc	r21, r1
    1b2a:	61 05       	cpc	r22, r1
    1b2c:	71 05       	cpc	r23, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <__pack_f+0x46>
    1b30:	91 c0       	rjmp	.+290    	; 0x1c54 <__pack_f+0x168>
    1b32:	12 96       	adiw	r26, 0x02	; 2
    1b34:	8d 91       	ld	r24, X+
    1b36:	9c 91       	ld	r25, X
    1b38:	13 97       	sbiw	r26, 0x03	; 3
    1b3a:	2f ef       	ldi	r18, 0xFF	; 255
    1b3c:	82 38       	cpi	r24, 0x82	; 130
    1b3e:	92 07       	cpc	r25, r18
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <__pack_f+0x58>
    1b42:	59 c0       	rjmp	.+178    	; 0x1bf6 <__pack_f+0x10a>
    1b44:	22 e8       	ldi	r18, 0x82	; 130
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	28 1b       	sub	r18, r24
    1b4a:	39 0b       	sbc	r19, r25
    1b4c:	2a 31       	cpi	r18, 0x1A	; 26
    1b4e:	31 05       	cpc	r19, r1
    1b50:	64 f5       	brge	.+88     	; 0x1baa <__pack_f+0xbe>
    1b52:	6a 01       	movw	r12, r20
    1b54:	7b 01       	movw	r14, r22
    1b56:	02 2e       	mov	r0, r18
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <__pack_f+0x76>
    1b5a:	f6 94       	lsr	r15
    1b5c:	e7 94       	ror	r14
    1b5e:	d7 94       	ror	r13
    1b60:	c7 94       	ror	r12
    1b62:	0a 94       	dec	r0
    1b64:	d2 f7       	brpl	.-12     	; 0x1b5a <__pack_f+0x6e>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <__pack_f+0x8c>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	aa 1f       	adc	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	2a 95       	dec	r18
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <__pack_f+0x84>
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	a1 09       	sbc	r26, r1
    1b80:	b1 09       	sbc	r27, r1
    1b82:	84 23       	and	r24, r20
    1b84:	95 23       	and	r25, r21
    1b86:	a6 23       	and	r26, r22
    1b88:	b7 23       	and	r27, r23
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	a1 05       	cpc	r26, r1
    1b96:	b1 05       	cpc	r27, r1
    1b98:	19 f4       	brne	.+6      	; 0x1ba0 <__pack_f+0xb4>
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	ba 01       	movw	r22, r20
    1ba0:	4c 29       	or	r20, r12
    1ba2:	5d 29       	or	r21, r13
    1ba4:	6e 29       	or	r22, r14
    1ba6:	7f 29       	or	r23, r15
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <__pack_f+0xc4>
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	ba 01       	movw	r22, r20
    1bb0:	db 01       	movw	r26, r22
    1bb2:	ca 01       	movw	r24, r20
    1bb4:	8f 77       	andi	r24, 0x7F	; 127
    1bb6:	90 70       	andi	r25, 0x00	; 0
    1bb8:	a0 70       	andi	r26, 0x00	; 0
    1bba:	b0 70       	andi	r27, 0x00	; 0
    1bbc:	80 34       	cpi	r24, 0x40	; 64
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	a1 05       	cpc	r26, r1
    1bc2:	b1 05       	cpc	r27, r1
    1bc4:	39 f4       	brne	.+14     	; 0x1bd4 <__pack_f+0xe8>
    1bc6:	47 ff       	sbrs	r20, 7
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <__pack_f+0xf0>
    1bca:	40 5c       	subi	r20, 0xC0	; 192
    1bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bce:	6f 4f       	sbci	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <__pack_f+0xf0>
    1bd4:	41 5c       	subi	r20, 0xC1	; 193
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	6f 4f       	sbci	r22, 0xFF	; 255
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	40 30       	cpi	r20, 0x00	; 0
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	52 07       	cpc	r21, r18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	62 07       	cpc	r22, r18
    1bea:	20 e4       	ldi	r18, 0x40	; 64
    1bec:	72 07       	cpc	r23, r18
    1bee:	38 f5       	brcc	.+78     	; 0x1c3e <__pack_f+0x152>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	24 c0       	rjmp	.+72     	; 0x1c3e <__pack_f+0x152>
    1bf6:	80 38       	cpi	r24, 0x80	; 128
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	7c f5       	brge	.+94     	; 0x1c5a <__pack_f+0x16e>
    1bfc:	8a 01       	movw	r16, r20
    1bfe:	9b 01       	movw	r18, r22
    1c00:	0f 77       	andi	r16, 0x7F	; 127
    1c02:	10 70       	andi	r17, 0x00	; 0
    1c04:	20 70       	andi	r18, 0x00	; 0
    1c06:	30 70       	andi	r19, 0x00	; 0
    1c08:	00 34       	cpi	r16, 0x40	; 64
    1c0a:	11 05       	cpc	r17, r1
    1c0c:	21 05       	cpc	r18, r1
    1c0e:	31 05       	cpc	r19, r1
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <__pack_f+0x134>
    1c12:	47 ff       	sbrs	r20, 7
    1c14:	09 c0       	rjmp	.+18     	; 0x1c28 <__pack_f+0x13c>
    1c16:	40 5c       	subi	r20, 0xC0	; 192
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	6f 4f       	sbci	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <__pack_f+0x13c>
    1c20:	41 5c       	subi	r20, 0xC1	; 193
    1c22:	5f 4f       	sbci	r21, 0xFF	; 255
    1c24:	6f 4f       	sbci	r22, 0xFF	; 255
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	77 fd       	sbrc	r23, 7
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <__pack_f+0x146>
    1c2c:	81 58       	subi	r24, 0x81	; 129
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <__pack_f+0x152>
    1c32:	76 95       	lsr	r23
    1c34:	67 95       	ror	r22
    1c36:	57 95       	ror	r21
    1c38:	47 95       	ror	r20
    1c3a:	80 58       	subi	r24, 0x80	; 128
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	97 e0       	ldi	r25, 0x07	; 7
    1c40:	76 95       	lsr	r23
    1c42:	67 95       	ror	r22
    1c44:	57 95       	ror	r21
    1c46:	47 95       	ror	r20
    1c48:	9a 95       	dec	r25
    1c4a:	d1 f7       	brne	.-12     	; 0x1c40 <__pack_f+0x154>
    1c4c:	0b c0       	rjmp	.+22     	; 0x1c64 <__pack_f+0x178>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <__pack_f+0x172>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <__pack_f+0x178>
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	ba 01       	movw	r22, r20
    1c64:	98 2f       	mov	r25, r24
    1c66:	97 95       	ror	r25
    1c68:	99 27       	eor	r25, r25
    1c6a:	97 95       	ror	r25
    1c6c:	a6 2f       	mov	r26, r22
    1c6e:	af 77       	andi	r26, 0x7F	; 127
    1c70:	e7 95       	ror	r30
    1c72:	ee 27       	eor	r30, r30
    1c74:	e7 95       	ror	r30
    1c76:	86 95       	lsr	r24
    1c78:	3a 2f       	mov	r19, r26
    1c7a:	39 2b       	or	r19, r25
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	2e 2b       	or	r18, r30
    1c80:	84 2f       	mov	r24, r20
    1c82:	95 2f       	mov	r25, r21
    1c84:	a3 2f       	mov	r26, r19
    1c86:	b2 2f       	mov	r27, r18
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <__unpack_f>:
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	fb 01       	movw	r30, r22
    1c9e:	4c 91       	ld	r20, X
    1ca0:	11 96       	adiw	r26, 0x01	; 1
    1ca2:	5c 91       	ld	r21, X
    1ca4:	11 97       	sbiw	r26, 0x01	; 1
    1ca6:	12 96       	adiw	r26, 0x02	; 2
    1ca8:	8c 91       	ld	r24, X
    1caa:	12 97       	sbiw	r26, 0x02	; 2
    1cac:	68 2f       	mov	r22, r24
    1cae:	6f 77       	andi	r22, 0x7F	; 127
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	99 27       	eor	r25, r25
    1cb8:	99 1f       	adc	r25, r25
    1cba:	13 96       	adiw	r26, 0x03	; 3
    1cbc:	2c 91       	ld	r18, X
    1cbe:	13 97       	sbiw	r26, 0x03	; 3
    1cc0:	82 2f       	mov	r24, r18
    1cc2:	88 0f       	add	r24, r24
    1cc4:	89 2b       	or	r24, r25
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	22 1f       	adc	r18, r18
    1cca:	22 27       	eor	r18, r18
    1ccc:	22 1f       	adc	r18, r18
    1cce:	21 83       	std	Z+1, r18	; 0x01
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	39 f5       	brne	.+78     	; 0x1d22 <__unpack_f+0x88>
    1cd4:	41 15       	cp	r20, r1
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	61 05       	cpc	r22, r1
    1cda:	71 05       	cpc	r23, r1
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <__unpack_f+0x48>
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	29 c0       	rjmp	.+82     	; 0x1d34 <__unpack_f+0x9a>
    1ce2:	82 e8       	ldi	r24, 0x82	; 130
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	93 83       	std	Z+3, r25	; 0x03
    1ce8:	82 83       	std	Z+2, r24	; 0x02
    1cea:	27 e0       	ldi	r18, 0x07	; 7
    1cec:	44 0f       	add	r20, r20
    1cee:	55 1f       	adc	r21, r21
    1cf0:	66 1f       	adc	r22, r22
    1cf2:	77 1f       	adc	r23, r23
    1cf4:	2a 95       	dec	r18
    1cf6:	d1 f7       	brne	.-12     	; 0x1cec <__unpack_f+0x52>
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	80 83       	st	Z, r24
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <__unpack_f+0x76>
    1cfe:	44 0f       	add	r20, r20
    1d00:	55 1f       	adc	r21, r21
    1d02:	66 1f       	adc	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	93 81       	ldd	r25, Z+3	; 0x03
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	93 83       	std	Z+3, r25	; 0x03
    1d0e:	82 83       	std	Z+2, r24	; 0x02
    1d10:	40 30       	cpi	r20, 0x00	; 0
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	58 07       	cpc	r21, r24
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	68 07       	cpc	r22, r24
    1d1a:	80 e4       	ldi	r24, 0x40	; 64
    1d1c:	78 07       	cpc	r23, r24
    1d1e:	78 f3       	brcs	.-34     	; 0x1cfe <__unpack_f+0x64>
    1d20:	20 c0       	rjmp	.+64     	; 0x1d62 <__unpack_f+0xc8>
    1d22:	8f 3f       	cpi	r24, 0xFF	; 255
    1d24:	91 05       	cpc	r25, r1
    1d26:	79 f4       	brne	.+30     	; 0x1d46 <__unpack_f+0xac>
    1d28:	41 15       	cp	r20, r1
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	61 05       	cpc	r22, r1
    1d2e:	71 05       	cpc	r23, r1
    1d30:	19 f4       	brne	.+6      	; 0x1d38 <__unpack_f+0x9e>
    1d32:	84 e0       	ldi	r24, 0x04	; 4
    1d34:	80 83       	st	Z, r24
    1d36:	08 95       	ret
    1d38:	64 ff       	sbrs	r22, 4
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <__unpack_f+0xa8>
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 83       	st	Z, r24
    1d40:	10 c0       	rjmp	.+32     	; 0x1d62 <__unpack_f+0xc8>
    1d42:	10 82       	st	Z, r1
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <__unpack_f+0xc8>
    1d46:	8f 57       	subi	r24, 0x7F	; 127
    1d48:	90 40       	sbci	r25, 0x00	; 0
    1d4a:	93 83       	std	Z+3, r25	; 0x03
    1d4c:	82 83       	std	Z+2, r24	; 0x02
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	80 83       	st	Z, r24
    1d52:	87 e0       	ldi	r24, 0x07	; 7
    1d54:	44 0f       	add	r20, r20
    1d56:	55 1f       	adc	r21, r21
    1d58:	66 1f       	adc	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	8a 95       	dec	r24
    1d5e:	d1 f7       	brne	.-12     	; 0x1d54 <__unpack_f+0xba>
    1d60:	70 64       	ori	r23, 0x40	; 64
    1d62:	44 83       	std	Z+4, r20	; 0x04
    1d64:	55 83       	std	Z+5, r21	; 0x05
    1d66:	66 83       	std	Z+6, r22	; 0x06
    1d68:	77 83       	std	Z+7, r23	; 0x07
    1d6a:	08 95       	ret

00001d6c <__fpcmp_parts_f>:
    1d6c:	cf 93       	push	r28
    1d6e:	fc 01       	movw	r30, r24
    1d70:	db 01       	movw	r26, r22
    1d72:	90 81       	ld	r25, Z
    1d74:	92 30       	cpi	r25, 0x02	; 2
    1d76:	08 f4       	brcc	.+2      	; 0x1d7a <__fpcmp_parts_f+0xe>
    1d78:	4c c0       	rjmp	.+152    	; 0x1e12 <__fpcmp_parts_f+0xa6>
    1d7a:	8c 91       	ld	r24, X
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <__fpcmp_parts_f+0x16>
    1d80:	48 c0       	rjmp	.+144    	; 0x1e12 <__fpcmp_parts_f+0xa6>
    1d82:	94 30       	cpi	r25, 0x04	; 4
    1d84:	69 f4       	brne	.+26     	; 0x1da0 <__fpcmp_parts_f+0x34>
    1d86:	21 81       	ldd	r18, Z+1	; 0x01
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	39 f4       	brne	.+14     	; 0x1d9a <__fpcmp_parts_f+0x2e>
    1d8c:	11 96       	adiw	r26, 0x01	; 1
    1d8e:	8c 91       	ld	r24, X
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	82 1b       	sub	r24, r18
    1d96:	91 09       	sbc	r25, r1
    1d98:	44 c0       	rjmp	.+136    	; 0x1e22 <__fpcmp_parts_f+0xb6>
    1d9a:	22 23       	and	r18, r18
    1d9c:	d1 f1       	breq	.+116    	; 0x1e12 <__fpcmp_parts_f+0xa6>
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <__fpcmp_parts_f+0xb2>
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	21 f0       	breq	.+8      	; 0x1dac <__fpcmp_parts_f+0x40>
    1da4:	92 30       	cpi	r25, 0x02	; 2
    1da6:	41 f4       	brne	.+16     	; 0x1db8 <__fpcmp_parts_f+0x4c>
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	b1 f1       	breq	.+108    	; 0x1e18 <__fpcmp_parts_f+0xac>
    1dac:	11 96       	adiw	r26, 0x01	; 1
    1dae:	8c 91       	ld	r24, X
    1db0:	11 97       	sbiw	r26, 0x01	; 1
    1db2:	88 23       	and	r24, r24
    1db4:	a1 f1       	breq	.+104    	; 0x1e1e <__fpcmp_parts_f+0xb2>
    1db6:	2d c0       	rjmp	.+90     	; 0x1e12 <__fpcmp_parts_f+0xa6>
    1db8:	c1 81       	ldd	r28, Z+1	; 0x01
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	01 f1       	breq	.+64     	; 0x1dfe <__fpcmp_parts_f+0x92>
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	8c 91       	ld	r24, X
    1dc2:	11 97       	sbiw	r26, 0x01	; 1
    1dc4:	c8 17       	cp	r28, r24
    1dc6:	d9 f4       	brne	.+54     	; 0x1dfe <__fpcmp_parts_f+0x92>
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	12 96       	adiw	r26, 0x02	; 2
    1dce:	2d 91       	ld	r18, X+
    1dd0:	3c 91       	ld	r19, X
    1dd2:	13 97       	sbiw	r26, 0x03	; 3
    1dd4:	28 17       	cp	r18, r24
    1dd6:	39 07       	cpc	r19, r25
    1dd8:	94 f0       	brlt	.+36     	; 0x1dfe <__fpcmp_parts_f+0x92>
    1dda:	82 17       	cp	r24, r18
    1ddc:	93 07       	cpc	r25, r19
    1dde:	bc f0       	brlt	.+46     	; 0x1e0e <__fpcmp_parts_f+0xa2>
    1de0:	44 81       	ldd	r20, Z+4	; 0x04
    1de2:	55 81       	ldd	r21, Z+5	; 0x05
    1de4:	66 81       	ldd	r22, Z+6	; 0x06
    1de6:	77 81       	ldd	r23, Z+7	; 0x07
    1de8:	14 96       	adiw	r26, 0x04	; 4
    1dea:	8d 91       	ld	r24, X+
    1dec:	9d 91       	ld	r25, X+
    1dee:	0d 90       	ld	r0, X+
    1df0:	bc 91       	ld	r27, X
    1df2:	a0 2d       	mov	r26, r0
    1df4:	84 17       	cp	r24, r20
    1df6:	95 07       	cpc	r25, r21
    1df8:	a6 07       	cpc	r26, r22
    1dfa:	b7 07       	cpc	r27, r23
    1dfc:	18 f4       	brcc	.+6      	; 0x1e04 <__fpcmp_parts_f+0x98>
    1dfe:	cc 23       	and	r28, r28
    1e00:	41 f0       	breq	.+16     	; 0x1e12 <__fpcmp_parts_f+0xa6>
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <__fpcmp_parts_f+0xb2>
    1e04:	48 17       	cp	r20, r24
    1e06:	59 07       	cpc	r21, r25
    1e08:	6a 07       	cpc	r22, r26
    1e0a:	7b 07       	cpc	r23, r27
    1e0c:	28 f4       	brcc	.+10     	; 0x1e18 <__fpcmp_parts_f+0xac>
    1e0e:	cc 23       	and	r28, r28
    1e10:	31 f0       	breq	.+12     	; 0x1e1e <__fpcmp_parts_f+0xb2>
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <__fpcmp_parts_f+0xb6>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <__fpcmp_parts_f+0xb6>
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
    1e20:	9f ef       	ldi	r25, 0xFF	; 255
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <main>:
#include"uart.h"
#include"led.h"
#include"adc.h"
#include"spi.h"
int main()
{
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	2a 97       	sbiw	r28, 0x0a	; 10
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	uart_init();
    1e3a:	0e 94 34 07 	call	0xe68	; 0xe68 <uart_init>
	task_init();
    1e3e:	0e 94 b7 03 	call	0x76e	; 0x76e <task_init>
	timer_init();
    1e42:	0e 94 bc 06 	call	0xd78	; 0xd78 <timer_init>
	adc_init();
    1e46:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    1e4a:	0e 94 af 08 	call	0x115e	; 0x115e <spi_init>
	led_init();
    1e4e:	0e 94 ab 00 	call	0x156	; 0x156 <led_init>

	printf("$ ");
    1e52:	0f 92       	push	r0
    1e54:	0f 92       	push	r0
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	ed b7       	in	r30, 0x3d	; 61
    1e5c:	fe b7       	in	r31, 0x3e	; 62
    1e5e:	92 83       	std	Z+2, r25	; 0x02
    1e60:	81 83       	std	Z+1, r24	; 0x01
    1e62:	0e 94 8c 11 	call	0x2318	; 0x2318 <printf>
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0

	while(1) {
		cli();
    1e6a:	f8 94       	cli
		tag = task_delete(&task);
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	0e 94 fd 03 	call	0x7fa	; 0x7fa <task_delete>
		sei();
    1e74:	78 94       	sei
		if(tag)
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	c1 f3       	breq	.-16     	; 0x1e6a <main+0x44>
			(*(task.fun))(task.arg);
    1e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7e:	ce 01       	movw	r24, r28
    1e80:	03 96       	adiw	r24, 0x03	; 3
    1e82:	19 95       	eicall
    1e84:	f2 cf       	rjmp	.-28     	; 0x1e6a <main+0x44>

00001e86 <__divmodhi4>:
    1e86:	97 fb       	bst	r25, 7
    1e88:	09 2e       	mov	r0, r25
    1e8a:	07 26       	eor	r0, r23
    1e8c:	0a d0       	rcall	.+20     	; 0x1ea2 <__divmodhi4_neg1>
    1e8e:	77 fd       	sbrc	r23, 7
    1e90:	04 d0       	rcall	.+8      	; 0x1e9a <__divmodhi4_neg2>
    1e92:	0c d0       	rcall	.+24     	; 0x1eac <__udivmodhi4>
    1e94:	06 d0       	rcall	.+12     	; 0x1ea2 <__divmodhi4_neg1>
    1e96:	00 20       	and	r0, r0
    1e98:	1a f4       	brpl	.+6      	; 0x1ea0 <__divmodhi4_exit>

00001e9a <__divmodhi4_neg2>:
    1e9a:	70 95       	com	r23
    1e9c:	61 95       	neg	r22
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255

00001ea0 <__divmodhi4_exit>:
    1ea0:	08 95       	ret

00001ea2 <__divmodhi4_neg1>:
    1ea2:	f6 f7       	brtc	.-4      	; 0x1ea0 <__divmodhi4_exit>
    1ea4:	90 95       	com	r25
    1ea6:	81 95       	neg	r24
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	08 95       	ret

00001eac <__udivmodhi4>:
    1eac:	aa 1b       	sub	r26, r26
    1eae:	bb 1b       	sub	r27, r27
    1eb0:	51 e1       	ldi	r21, 0x11	; 17
    1eb2:	07 c0       	rjmp	.+14     	; 0x1ec2 <__udivmodhi4_ep>

00001eb4 <__udivmodhi4_loop>:
    1eb4:	aa 1f       	adc	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	a6 17       	cp	r26, r22
    1eba:	b7 07       	cpc	r27, r23
    1ebc:	10 f0       	brcs	.+4      	; 0x1ec2 <__udivmodhi4_ep>
    1ebe:	a6 1b       	sub	r26, r22
    1ec0:	b7 0b       	sbc	r27, r23

00001ec2 <__udivmodhi4_ep>:
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	5a 95       	dec	r21
    1ec8:	a9 f7       	brne	.-22     	; 0x1eb4 <__udivmodhi4_loop>
    1eca:	80 95       	com	r24
    1ecc:	90 95       	com	r25
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	08 95       	ret

00001ed4 <__prologue_saves__>:
    1ed4:	2f 92       	push	r2
    1ed6:	3f 92       	push	r3
    1ed8:	4f 92       	push	r4
    1eda:	5f 92       	push	r5
    1edc:	6f 92       	push	r6
    1ede:	7f 92       	push	r7
    1ee0:	8f 92       	push	r8
    1ee2:	9f 92       	push	r9
    1ee4:	af 92       	push	r10
    1ee6:	bf 92       	push	r11
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	ca 1b       	sub	r28, r26
    1efe:	db 0b       	sbc	r29, r27
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	19 94       	eijmp

00001f0c <__epilogue_restores__>:
    1f0c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f0e:	39 88       	ldd	r3, Y+17	; 0x11
    1f10:	48 88       	ldd	r4, Y+16	; 0x10
    1f12:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f14:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f16:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f18:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f1e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f20:	c8 84       	ldd	r12, Y+8	; 0x08
    1f22:	df 80       	ldd	r13, Y+7	; 0x07
    1f24:	ee 80       	ldd	r14, Y+6	; 0x06
    1f26:	fd 80       	ldd	r15, Y+5	; 0x05
    1f28:	0c 81       	ldd	r16, Y+4	; 0x04
    1f2a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f30:	ce 0f       	add	r28, r30
    1f32:	d1 1d       	adc	r29, r1
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	ed 01       	movw	r28, r26
    1f40:	08 95       	ret

00001f42 <malloc>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	ac 01       	movw	r20, r24
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	10 f4       	brcc	.+4      	; 0x1f52 <malloc+0x10>
    1f4e:	42 e0       	ldi	r20, 0x02	; 2
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	e0 91 28 07 	lds	r30, 0x0728
    1f56:	f0 91 29 07 	lds	r31, 0x0729
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	24 c0       	rjmp	.+72     	; 0x1fac <malloc+0x6a>
    1f64:	80 81       	ld	r24, Z
    1f66:	91 81       	ldd	r25, Z+1	; 0x01
    1f68:	84 17       	cp	r24, r20
    1f6a:	95 07       	cpc	r25, r21
    1f6c:	d0 f0       	brcs	.+52     	; 0x1fa2 <malloc+0x60>
    1f6e:	84 17       	cp	r24, r20
    1f70:	95 07       	cpc	r25, r21
    1f72:	71 f4       	brne	.+28     	; 0x1f90 <malloc+0x4e>
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	10 97       	sbiw	r26, 0x00	; 0
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <malloc+0x44>
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
    1f82:	12 97       	sbiw	r26, 0x02	; 2
    1f84:	2c c0       	rjmp	.+88     	; 0x1fde <malloc+0x9c>
    1f86:	90 93 29 07 	sts	0x0729, r25
    1f8a:	80 93 28 07 	sts	0x0728, r24
    1f8e:	27 c0       	rjmp	.+78     	; 0x1fde <malloc+0x9c>
    1f90:	21 15       	cp	r18, r1
    1f92:	31 05       	cpc	r19, r1
    1f94:	19 f0       	breq	.+6      	; 0x1f9c <malloc+0x5a>
    1f96:	82 17       	cp	r24, r18
    1f98:	93 07       	cpc	r25, r19
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <malloc+0x60>
    1f9c:	9c 01       	movw	r18, r24
    1f9e:	bd 01       	movw	r22, r26
    1fa0:	ef 01       	movw	r28, r30
    1fa2:	92 81       	ldd	r25, Z+2	; 0x02
    1fa4:	83 81       	ldd	r24, Z+3	; 0x03
    1fa6:	df 01       	movw	r26, r30
    1fa8:	e9 2f       	mov	r30, r25
    1faa:	f8 2f       	mov	r31, r24
    1fac:	30 97       	sbiw	r30, 0x00	; 0
    1fae:	d1 f6       	brne	.-76     	; 0x1f64 <malloc+0x22>
    1fb0:	21 15       	cp	r18, r1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	f9 f0       	breq	.+62     	; 0x1ff4 <malloc+0xb2>
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	84 1b       	sub	r24, r20
    1fba:	95 0b       	sbc	r25, r21
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	80 f4       	brcc	.+32     	; 0x1fe2 <malloc+0xa0>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	61 15       	cp	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <malloc+0x92>
    1fcc:	fb 01       	movw	r30, r22
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	82 83       	std	Z+2, r24	; 0x02
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <malloc+0x9a>
    1fd4:	90 93 29 07 	sts	0x0729, r25
    1fd8:	80 93 28 07 	sts	0x0728, r24
    1fdc:	fe 01       	movw	r30, r28
    1fde:	32 96       	adiw	r30, 0x02	; 2
    1fe0:	42 c0       	rjmp	.+132    	; 0x2066 <malloc+0x124>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e8 0f       	add	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	41 93       	st	Z+, r20
    1fea:	51 93       	st	Z+, r21
    1fec:	02 97       	sbiw	r24, 0x02	; 2
    1fee:	99 83       	std	Y+1, r25	; 0x01
    1ff0:	88 83       	st	Y, r24
    1ff2:	39 c0       	rjmp	.+114    	; 0x2066 <malloc+0x124>
    1ff4:	80 91 26 07 	lds	r24, 0x0726
    1ff8:	90 91 27 07 	lds	r25, 0x0727
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	41 f4       	brne	.+16     	; 0x2010 <malloc+0xce>
    2000:	80 91 67 04 	lds	r24, 0x0467
    2004:	90 91 68 04 	lds	r25, 0x0468
    2008:	90 93 27 07 	sts	0x0727, r25
    200c:	80 93 26 07 	sts	0x0726, r24
    2010:	20 91 65 04 	lds	r18, 0x0465
    2014:	30 91 66 04 	lds	r19, 0x0466
    2018:	21 15       	cp	r18, r1
    201a:	31 05       	cpc	r19, r1
    201c:	41 f4       	brne	.+16     	; 0x202e <malloc+0xec>
    201e:	2d b7       	in	r18, 0x3d	; 61
    2020:	3e b7       	in	r19, 0x3e	; 62
    2022:	80 91 69 04 	lds	r24, 0x0469
    2026:	90 91 6a 04 	lds	r25, 0x046A
    202a:	28 1b       	sub	r18, r24
    202c:	39 0b       	sbc	r19, r25
    202e:	e0 91 26 07 	lds	r30, 0x0726
    2032:	f0 91 27 07 	lds	r31, 0x0727
    2036:	e2 17       	cp	r30, r18
    2038:	f3 07       	cpc	r31, r19
    203a:	98 f4       	brcc	.+38     	; 0x2062 <malloc+0x120>
    203c:	2e 1b       	sub	r18, r30
    203e:	3f 0b       	sbc	r19, r31
    2040:	24 17       	cp	r18, r20
    2042:	35 07       	cpc	r19, r21
    2044:	70 f0       	brcs	.+28     	; 0x2062 <malloc+0x120>
    2046:	ca 01       	movw	r24, r20
    2048:	02 96       	adiw	r24, 0x02	; 2
    204a:	28 17       	cp	r18, r24
    204c:	39 07       	cpc	r19, r25
    204e:	48 f0       	brcs	.+18     	; 0x2062 <malloc+0x120>
    2050:	8e 0f       	add	r24, r30
    2052:	9f 1f       	adc	r25, r31
    2054:	90 93 27 07 	sts	0x0727, r25
    2058:	80 93 26 07 	sts	0x0726, r24
    205c:	41 93       	st	Z+, r20
    205e:	51 93       	st	Z+, r21
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <malloc+0x124>
    2062:	e0 e0       	ldi	r30, 0x00	; 0
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	cf 01       	movw	r24, r30
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <free>:
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	9c 01       	movw	r18, r24
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	09 f4       	brne	.+2      	; 0x207e <free+0x10>
    207c:	8c c0       	rjmp	.+280    	; 0x2196 <free+0x128>
    207e:	dc 01       	movw	r26, r24
    2080:	12 97       	sbiw	r26, 0x02	; 2
    2082:	13 96       	adiw	r26, 0x03	; 3
    2084:	1c 92       	st	X, r1
    2086:	1e 92       	st	-X, r1
    2088:	12 97       	sbiw	r26, 0x02	; 2
    208a:	60 91 28 07 	lds	r22, 0x0728
    208e:	70 91 29 07 	lds	r23, 0x0729
    2092:	61 15       	cp	r22, r1
    2094:	71 05       	cpc	r23, r1
    2096:	89 f4       	brne	.+34     	; 0x20ba <free+0x4c>
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	11 97       	sbiw	r26, 0x01	; 1
    209e:	82 0f       	add	r24, r18
    20a0:	93 1f       	adc	r25, r19
    20a2:	20 91 26 07 	lds	r18, 0x0726
    20a6:	30 91 27 07 	lds	r19, 0x0727
    20aa:	28 17       	cp	r18, r24
    20ac:	39 07       	cpc	r19, r25
    20ae:	69 f5       	brne	.+90     	; 0x210a <free+0x9c>
    20b0:	b0 93 27 07 	sts	0x0727, r27
    20b4:	a0 93 26 07 	sts	0x0726, r26
    20b8:	6e c0       	rjmp	.+220    	; 0x2196 <free+0x128>
    20ba:	fb 01       	movw	r30, r22
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <free+0x56>
    20c2:	fc 01       	movw	r30, r24
    20c4:	ea 17       	cp	r30, r26
    20c6:	fb 07       	cpc	r31, r27
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <free+0x68>
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	af 01       	movw	r20, r30
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	b9 f7       	brne	.-18     	; 0x20c2 <free+0x54>
    20d4:	1f c0       	rjmp	.+62     	; 0x2114 <free+0xa6>
    20d6:	e9 01       	movw	r28, r18
    20d8:	22 97       	sbiw	r28, 0x02	; 2
    20da:	fb 83       	std	Y+3, r31	; 0x03
    20dc:	ea 83       	std	Y+2, r30	; 0x02
    20de:	08 81       	ld	r16, Y
    20e0:	19 81       	ldd	r17, Y+1	; 0x01
    20e2:	c9 01       	movw	r24, r18
    20e4:	80 0f       	add	r24, r16
    20e6:	91 1f       	adc	r25, r17
    20e8:	8e 17       	cp	r24, r30
    20ea:	9f 07       	cpc	r25, r31
    20ec:	59 f4       	brne	.+22     	; 0x2104 <free+0x96>
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	80 0f       	add	r24, r16
    20f4:	91 1f       	adc	r25, r17
    20f6:	02 96       	adiw	r24, 0x02	; 2
    20f8:	99 83       	std	Y+1, r25	; 0x01
    20fa:	88 83       	st	Y, r24
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	9b 83       	std	Y+3, r25	; 0x03
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	41 15       	cp	r20, r1
    2106:	51 05       	cpc	r21, r1
    2108:	29 f4       	brne	.+10     	; 0x2114 <free+0xa6>
    210a:	b0 93 29 07 	sts	0x0729, r27
    210e:	a0 93 28 07 	sts	0x0728, r26
    2112:	41 c0       	rjmp	.+130    	; 0x2196 <free+0x128>
    2114:	fa 01       	movw	r30, r20
    2116:	b3 83       	std	Z+3, r27	; 0x03
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	c1 91       	ld	r28, Z+
    211c:	d1 91       	ld	r29, Z+
    211e:	ec 0f       	add	r30, r28
    2120:	fd 1f       	adc	r31, r29
    2122:	ae 17       	cp	r26, r30
    2124:	bf 07       	cpc	r27, r31
    2126:	81 f4       	brne	.+32     	; 0x2148 <free+0xda>
    2128:	f9 01       	movw	r30, r18
    212a:	92 91       	ld	r25, -Z
    212c:	82 91       	ld	r24, -Z
    212e:	8c 0f       	add	r24, r28
    2130:	9d 1f       	adc	r25, r29
    2132:	02 96       	adiw	r24, 0x02	; 2
    2134:	da 01       	movw	r26, r20
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	9c 93       	st	X, r25
    213a:	8e 93       	st	-X, r24
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	13 96       	adiw	r26, 0x03	; 3
    2142:	9c 93       	st	X, r25
    2144:	8e 93       	st	-X, r24
    2146:	12 97       	sbiw	r26, 0x02	; 2
    2148:	e0 e0       	ldi	r30, 0x00	; 0
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <free+0xe4>
    214e:	fb 01       	movw	r30, r22
    2150:	bc 01       	movw	r22, r24
    2152:	db 01       	movw	r26, r22
    2154:	12 96       	adiw	r26, 0x02	; 2
    2156:	8d 91       	ld	r24, X+
    2158:	9c 91       	ld	r25, X
    215a:	13 97       	sbiw	r26, 0x03	; 3
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	b9 f7       	brne	.-18     	; 0x214e <free+0xe0>
    2160:	cb 01       	movw	r24, r22
    2162:	02 96       	adiw	r24, 0x02	; 2
    2164:	2d 91       	ld	r18, X+
    2166:	3c 91       	ld	r19, X
    2168:	11 97       	sbiw	r26, 0x01	; 1
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	20 91 26 07 	lds	r18, 0x0726
    2172:	30 91 27 07 	lds	r19, 0x0727
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	69 f4       	brne	.+26     	; 0x2196 <free+0x128>
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	29 f4       	brne	.+10     	; 0x218a <free+0x11c>
    2180:	10 92 29 07 	sts	0x0729, r1
    2184:	10 92 28 07 	sts	0x0728, r1
    2188:	02 c0       	rjmp	.+4      	; 0x218e <free+0x120>
    218a:	13 82       	std	Z+3, r1	; 0x03
    218c:	12 82       	std	Z+2, r1	; 0x02
    218e:	70 93 27 07 	sts	0x0727, r23
    2192:	60 93 26 07 	sts	0x0726, r22
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <atoi>:
    21a0:	fc 01       	movw	r30, r24
    21a2:	88 27       	eor	r24, r24
    21a4:	99 27       	eor	r25, r25
    21a6:	e8 94       	clt
    21a8:	21 91       	ld	r18, Z+
    21aa:	20 32       	cpi	r18, 0x20	; 32
    21ac:	e9 f3       	breq	.-6      	; 0x21a8 <atoi+0x8>
    21ae:	29 30       	cpi	r18, 0x09	; 9
    21b0:	10 f0       	brcs	.+4      	; 0x21b6 <atoi+0x16>
    21b2:	2e 30       	cpi	r18, 0x0E	; 14
    21b4:	c8 f3       	brcs	.-14     	; 0x21a8 <atoi+0x8>
    21b6:	2b 32       	cpi	r18, 0x2B	; 43
    21b8:	41 f0       	breq	.+16     	; 0x21ca <atoi+0x2a>
    21ba:	2d 32       	cpi	r18, 0x2D	; 45
    21bc:	39 f4       	brne	.+14     	; 0x21cc <atoi+0x2c>
    21be:	68 94       	set
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <atoi+0x2a>
    21c2:	0e 94 2a 11 	call	0x2254	; 0x2254 <__mulhi_const_10>
    21c6:	82 0f       	add	r24, r18
    21c8:	91 1d       	adc	r25, r1
    21ca:	21 91       	ld	r18, Z+
    21cc:	20 53       	subi	r18, 0x30	; 48
    21ce:	2a 30       	cpi	r18, 0x0A	; 10
    21d0:	c0 f3       	brcs	.-16     	; 0x21c2 <atoi+0x22>
    21d2:	1e f4       	brtc	.+6      	; 0x21da <atoi+0x3a>
    21d4:	90 95       	com	r25
    21d6:	81 95       	neg	r24
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	08 95       	ret

000021dc <strtok>:
    21dc:	45 e7       	ldi	r20, 0x75	; 117
    21de:	54 e0       	ldi	r21, 0x04	; 4
    21e0:	0e 94 03 11 	call	0x2206	; 0x2206 <strtok_r>
    21e4:	08 95       	ret

000021e6 <strcmp>:
    21e6:	fb 01       	movw	r30, r22
    21e8:	dc 01       	movw	r26, r24
    21ea:	8d 91       	ld	r24, X+
    21ec:	01 90       	ld	r0, Z+
    21ee:	80 19       	sub	r24, r0
    21f0:	01 10       	cpse	r0, r1
    21f2:	d9 f3       	breq	.-10     	; 0x21ea <strcmp+0x4>
    21f4:	99 0b       	sbc	r25, r25
    21f6:	08 95       	ret

000021f8 <strcpy>:
    21f8:	fb 01       	movw	r30, r22
    21fa:	dc 01       	movw	r26, r24
    21fc:	01 90       	ld	r0, Z+
    21fe:	0d 92       	st	X+, r0
    2200:	00 20       	and	r0, r0
    2202:	e1 f7       	brne	.-8      	; 0x21fc <strcpy+0x4>
    2204:	08 95       	ret

00002206 <strtok_r>:
    2206:	fa 01       	movw	r30, r20
    2208:	a1 91       	ld	r26, Z+
    220a:	b0 81       	ld	r27, Z
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	19 f4       	brne	.+6      	; 0x2216 <strtok_r+0x10>
    2210:	10 97       	sbiw	r26, 0x00	; 0
    2212:	e1 f0       	breq	.+56     	; 0x224c <strtok_r+0x46>
    2214:	cd 01       	movw	r24, r26
    2216:	dc 01       	movw	r26, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0d 90       	ld	r0, X+
    221c:	00 20       	and	r0, r0
    221e:	11 f4       	brne	.+4      	; 0x2224 <strtok_r+0x1e>
    2220:	c0 01       	movw	r24, r0
    2222:	13 c0       	rjmp	.+38     	; 0x224a <strtok_r+0x44>
    2224:	fb 01       	movw	r30, r22
    2226:	21 91       	ld	r18, Z+
    2228:	22 23       	and	r18, r18
    222a:	19 f0       	breq	.+6      	; 0x2232 <strtok_r+0x2c>
    222c:	20 15       	cp	r18, r0
    222e:	d9 f7       	brne	.-10     	; 0x2226 <strtok_r+0x20>
    2230:	f3 cf       	rjmp	.-26     	; 0x2218 <strtok_r+0x12>
    2232:	fb 01       	movw	r30, r22
    2234:	21 91       	ld	r18, Z+
    2236:	20 15       	cp	r18, r0
    2238:	19 f4       	brne	.+6      	; 0x2240 <strtok_r+0x3a>
    223a:	1e 92       	st	-X, r1
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	06 c0       	rjmp	.+12     	; 0x224c <strtok_r+0x46>
    2240:	22 23       	and	r18, r18
    2242:	c1 f7       	brne	.-16     	; 0x2234 <strtok_r+0x2e>
    2244:	0d 90       	ld	r0, X+
    2246:	00 20       	and	r0, r0
    2248:	a1 f7       	brne	.-24     	; 0x2232 <strtok_r+0x2c>
    224a:	d0 01       	movw	r26, r0
    224c:	fa 01       	movw	r30, r20
    224e:	a1 93       	st	Z+, r26
    2250:	b0 83       	st	Z, r27
    2252:	08 95       	ret

00002254 <__mulhi_const_10>:
    2254:	7a e0       	ldi	r23, 0x0A	; 10
    2256:	97 9f       	mul	r25, r23
    2258:	90 2d       	mov	r25, r0
    225a:	87 9f       	mul	r24, r23
    225c:	80 2d       	mov	r24, r0
    225e:	91 0d       	add	r25, r1
    2260:	11 24       	eor	r1, r1
    2262:	08 95       	ret

00002264 <fgets>:
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	8c 01       	movw	r16, r24
    2276:	6a 01       	movw	r12, r20
    2278:	fa 01       	movw	r30, r20
    227a:	83 81       	ldd	r24, Z+3	; 0x03
    227c:	80 ff       	sbrs	r24, 0
    227e:	1a c0       	rjmp	.+52     	; 0x22b4 <fgets+0x50>
    2280:	16 16       	cp	r1, r22
    2282:	17 06       	cpc	r1, r23
    2284:	bc f4       	brge	.+46     	; 0x22b4 <fgets+0x50>
    2286:	7b 01       	movw	r14, r22
    2288:	e8 01       	movw	r28, r16
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <fgets+0x44>
    228c:	c6 01       	movw	r24, r12
    228e:	0e 94 1f 14 	call	0x283e	; 0x283e <fgetc>
    2292:	ff ef       	ldi	r31, 0xFF	; 255
    2294:	8f 3f       	cpi	r24, 0xFF	; 255
    2296:	9f 07       	cpc	r25, r31
    2298:	69 f0       	breq	.+26     	; 0x22b4 <fgets+0x50>
    229a:	89 93       	st	Y+, r24
    229c:	08 94       	sec
    229e:	e1 08       	sbc	r14, r1
    22a0:	f1 08       	sbc	r15, r1
    22a2:	8a 30       	cpi	r24, 0x0A	; 10
    22a4:	91 05       	cpc	r25, r1
    22a6:	21 f0       	breq	.+8      	; 0x22b0 <fgets+0x4c>
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	e2 16       	cp	r14, r18
    22ac:	f1 04       	cpc	r15, r1
    22ae:	71 f7       	brne	.-36     	; 0x228c <fgets+0x28>
    22b0:	18 82       	st	Y, r1
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <fgets+0x54>
    22b4:	00 e0       	ldi	r16, 0x00	; 0
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	c8 01       	movw	r24, r16
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	08 95       	ret

000022cc <gets>:
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	8c 01       	movw	r16, r24
    22d6:	e0 91 2a 07 	lds	r30, 0x072A
    22da:	f0 91 2b 07 	lds	r31, 0x072B
    22de:	83 81       	ldd	r24, Z+3	; 0x03
    22e0:	80 ff       	sbrs	r24, 0
    22e2:	12 c0       	rjmp	.+36     	; 0x2308 <gets+0x3c>
    22e4:	e8 01       	movw	r28, r16
    22e6:	80 91 2a 07 	lds	r24, 0x072A
    22ea:	90 91 2b 07 	lds	r25, 0x072B
    22ee:	0e 94 1f 14 	call	0x283e	; 0x283e <fgetc>
    22f2:	2f ef       	ldi	r18, 0xFF	; 255
    22f4:	8f 3f       	cpi	r24, 0xFF	; 255
    22f6:	92 07       	cpc	r25, r18
    22f8:	39 f0       	breq	.+14     	; 0x2308 <gets+0x3c>
    22fa:	89 93       	st	Y+, r24
    22fc:	8a 30       	cpi	r24, 0x0A	; 10
    22fe:	91 05       	cpc	r25, r1
    2300:	91 f7       	brne	.-28     	; 0x22e6 <gets+0x1a>
    2302:	21 97       	sbiw	r28, 0x01	; 1
    2304:	18 82       	st	Y, r1
    2306:	02 c0       	rjmp	.+4      	; 0x230c <gets+0x40>
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	c8 01       	movw	r24, r16
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret

00002318 <printf>:
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	fe 01       	movw	r30, r28
    2322:	36 96       	adiw	r30, 0x06	; 6
    2324:	61 91       	ld	r22, Z+
    2326:	71 91       	ld	r23, Z+
    2328:	80 91 2c 07 	lds	r24, 0x072C
    232c:	90 91 2d 07 	lds	r25, 0x072D
    2330:	af 01       	movw	r20, r30
    2332:	0e 94 02 12 	call	0x2404	; 0x2404 <vfprintf>
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <putchar>:
    233c:	60 91 2c 07 	lds	r22, 0x072C
    2340:	70 91 2d 07 	lds	r23, 0x072D
    2344:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    2348:	08 95       	ret

0000234a <puts>:
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	8c 01       	movw	r16, r24
    2354:	e0 91 2c 07 	lds	r30, 0x072C
    2358:	f0 91 2d 07 	lds	r31, 0x072D
    235c:	83 81       	ldd	r24, Z+3	; 0x03
    235e:	81 ff       	sbrs	r24, 1
    2360:	1a c0       	rjmp	.+52     	; 0x2396 <puts+0x4c>
    2362:	c0 e0       	ldi	r28, 0x00	; 0
    2364:	d0 e0       	ldi	r29, 0x00	; 0
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <puts+0x28>
    2368:	19 95       	eicall
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	11 f0       	breq	.+4      	; 0x2372 <puts+0x28>
    236e:	cf ef       	ldi	r28, 0xFF	; 255
    2370:	df ef       	ldi	r29, 0xFF	; 255
    2372:	f8 01       	movw	r30, r16
    2374:	81 91       	ld	r24, Z+
    2376:	8f 01       	movw	r16, r30
    2378:	60 91 2c 07 	lds	r22, 0x072C
    237c:	70 91 2d 07 	lds	r23, 0x072D
    2380:	db 01       	movw	r26, r22
    2382:	18 96       	adiw	r26, 0x08	; 8
    2384:	ed 91       	ld	r30, X+
    2386:	fc 91       	ld	r31, X
    2388:	19 97       	sbiw	r26, 0x09	; 9
    238a:	88 23       	and	r24, r24
    238c:	69 f7       	brne	.-38     	; 0x2368 <puts+0x1e>
    238e:	8a e0       	ldi	r24, 0x0A	; 10
    2390:	19 95       	eicall
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	11 f0       	breq	.+4      	; 0x239a <puts+0x50>
    2396:	cf ef       	ldi	r28, 0xFF	; 255
    2398:	df ef       	ldi	r29, 0xFF	; 255
    239a:	ce 01       	movw	r24, r28
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	08 95       	ret

000023a6 <sprintf>:
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	2e 97       	sbiw	r28, 0x0e	; 14
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	0e 89       	ldd	r16, Y+22	; 0x16
    23c0:	1f 89       	ldd	r17, Y+23	; 0x17
    23c2:	86 e0       	ldi	r24, 0x06	; 6
    23c4:	8c 83       	std	Y+4, r24	; 0x04
    23c6:	1a 83       	std	Y+2, r17	; 0x02
    23c8:	09 83       	std	Y+1, r16	; 0x01
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	9f e7       	ldi	r25, 0x7F	; 127
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	ae 01       	movw	r20, r28
    23d4:	46 5e       	subi	r20, 0xE6	; 230
    23d6:	5f 4f       	sbci	r21, 0xFF	; 255
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	68 8d       	ldd	r22, Y+24	; 0x18
    23de:	79 8d       	ldd	r23, Y+25	; 0x19
    23e0:	0e 94 02 12 	call	0x2404	; 0x2404 <vfprintf>
    23e4:	ef 81       	ldd	r30, Y+7	; 0x07
    23e6:	f8 85       	ldd	r31, Y+8	; 0x08
    23e8:	e0 0f       	add	r30, r16
    23ea:	f1 1f       	adc	r31, r17
    23ec:	10 82       	st	Z, r1
    23ee:	2e 96       	adiw	r28, 0x0e	; 14
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	08 95       	ret

00002404 <vfprintf>:
    2404:	2f 92       	push	r2
    2406:	3f 92       	push	r3
    2408:	4f 92       	push	r4
    240a:	5f 92       	push	r5
    240c:	6f 92       	push	r6
    240e:	7f 92       	push	r7
    2410:	8f 92       	push	r8
    2412:	9f 92       	push	r9
    2414:	af 92       	push	r10
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	2d 97       	sbiw	r28, 0x0d	; 13
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	3c 01       	movw	r6, r24
    243a:	7d 87       	std	Y+13, r23	; 0x0d
    243c:	6c 87       	std	Y+12, r22	; 0x0c
    243e:	5a 01       	movw	r10, r20
    2440:	fc 01       	movw	r30, r24
    2442:	17 82       	std	Z+7, r1	; 0x07
    2444:	16 82       	std	Z+6, r1	; 0x06
    2446:	83 81       	ldd	r24, Z+3	; 0x03
    2448:	81 ff       	sbrs	r24, 1
    244a:	c8 c1       	rjmp	.+912    	; 0x27dc <vfprintf+0x3d8>
    244c:	2e 01       	movw	r4, r28
    244e:	08 94       	sec
    2450:	41 1c       	adc	r4, r1
    2452:	51 1c       	adc	r5, r1
    2454:	f3 01       	movw	r30, r6
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	ec 85       	ldd	r30, Y+12	; 0x0c
    245a:	fd 85       	ldd	r31, Y+13	; 0x0d
    245c:	93 fd       	sbrc	r25, 3
    245e:	85 91       	lpm	r24, Z+
    2460:	93 ff       	sbrs	r25, 3
    2462:	81 91       	ld	r24, Z+
    2464:	fd 87       	std	Y+13, r31	; 0x0d
    2466:	ec 87       	std	Y+12, r30	; 0x0c
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <vfprintf+0x6a>
    246c:	b3 c1       	rjmp	.+870    	; 0x27d4 <vfprintf+0x3d0>
    246e:	85 32       	cpi	r24, 0x25	; 37
    2470:	41 f4       	brne	.+16     	; 0x2482 <vfprintf+0x7e>
    2472:	93 fd       	sbrc	r25, 3
    2474:	85 91       	lpm	r24, Z+
    2476:	93 ff       	sbrs	r25, 3
    2478:	81 91       	ld	r24, Z+
    247a:	fd 87       	std	Y+13, r31	; 0x0d
    247c:	ec 87       	std	Y+12, r30	; 0x0c
    247e:	85 32       	cpi	r24, 0x25	; 37
    2480:	29 f4       	brne	.+10     	; 0x248c <vfprintf+0x88>
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	b3 01       	movw	r22, r6
    2486:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    248a:	e4 cf       	rjmp	.-56     	; 0x2454 <vfprintf+0x50>
    248c:	ff 24       	eor	r15, r15
    248e:	ee 24       	eor	r14, r14
    2490:	10 e0       	ldi	r17, 0x00	; 0
    2492:	10 32       	cpi	r17, 0x20	; 32
    2494:	b0 f4       	brcc	.+44     	; 0x24c2 <vfprintf+0xbe>
    2496:	8b 32       	cpi	r24, 0x2B	; 43
    2498:	69 f0       	breq	.+26     	; 0x24b4 <vfprintf+0xb0>
    249a:	8c 32       	cpi	r24, 0x2C	; 44
    249c:	28 f4       	brcc	.+10     	; 0x24a8 <vfprintf+0xa4>
    249e:	80 32       	cpi	r24, 0x20	; 32
    24a0:	51 f0       	breq	.+20     	; 0x24b6 <vfprintf+0xb2>
    24a2:	83 32       	cpi	r24, 0x23	; 35
    24a4:	71 f4       	brne	.+28     	; 0x24c2 <vfprintf+0xbe>
    24a6:	0b c0       	rjmp	.+22     	; 0x24be <vfprintf+0xba>
    24a8:	8d 32       	cpi	r24, 0x2D	; 45
    24aa:	39 f0       	breq	.+14     	; 0x24ba <vfprintf+0xb6>
    24ac:	80 33       	cpi	r24, 0x30	; 48
    24ae:	49 f4       	brne	.+18     	; 0x24c2 <vfprintf+0xbe>
    24b0:	11 60       	ori	r17, 0x01	; 1
    24b2:	2c c0       	rjmp	.+88     	; 0x250c <vfprintf+0x108>
    24b4:	12 60       	ori	r17, 0x02	; 2
    24b6:	14 60       	ori	r17, 0x04	; 4
    24b8:	29 c0       	rjmp	.+82     	; 0x250c <vfprintf+0x108>
    24ba:	18 60       	ori	r17, 0x08	; 8
    24bc:	27 c0       	rjmp	.+78     	; 0x250c <vfprintf+0x108>
    24be:	10 61       	ori	r17, 0x10	; 16
    24c0:	25 c0       	rjmp	.+74     	; 0x250c <vfprintf+0x108>
    24c2:	17 fd       	sbrc	r17, 7
    24c4:	2e c0       	rjmp	.+92     	; 0x2522 <vfprintf+0x11e>
    24c6:	28 2f       	mov	r18, r24
    24c8:	20 53       	subi	r18, 0x30	; 48
    24ca:	2a 30       	cpi	r18, 0x0A	; 10
    24cc:	98 f4       	brcc	.+38     	; 0x24f4 <vfprintf+0xf0>
    24ce:	16 ff       	sbrs	r17, 6
    24d0:	08 c0       	rjmp	.+16     	; 0x24e2 <vfprintf+0xde>
    24d2:	8f 2d       	mov	r24, r15
    24d4:	88 0f       	add	r24, r24
    24d6:	f8 2e       	mov	r15, r24
    24d8:	ff 0c       	add	r15, r15
    24da:	ff 0c       	add	r15, r15
    24dc:	f8 0e       	add	r15, r24
    24de:	f2 0e       	add	r15, r18
    24e0:	15 c0       	rjmp	.+42     	; 0x250c <vfprintf+0x108>
    24e2:	8e 2d       	mov	r24, r14
    24e4:	88 0f       	add	r24, r24
    24e6:	e8 2e       	mov	r14, r24
    24e8:	ee 0c       	add	r14, r14
    24ea:	ee 0c       	add	r14, r14
    24ec:	e8 0e       	add	r14, r24
    24ee:	e2 0e       	add	r14, r18
    24f0:	10 62       	ori	r17, 0x20	; 32
    24f2:	0c c0       	rjmp	.+24     	; 0x250c <vfprintf+0x108>
    24f4:	8e 32       	cpi	r24, 0x2E	; 46
    24f6:	21 f4       	brne	.+8      	; 0x2500 <vfprintf+0xfc>
    24f8:	16 fd       	sbrc	r17, 6
    24fa:	6c c1       	rjmp	.+728    	; 0x27d4 <vfprintf+0x3d0>
    24fc:	10 64       	ori	r17, 0x40	; 64
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <vfprintf+0x108>
    2500:	8c 36       	cpi	r24, 0x6C	; 108
    2502:	11 f4       	brne	.+4      	; 0x2508 <vfprintf+0x104>
    2504:	10 68       	ori	r17, 0x80	; 128
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfprintf+0x108>
    2508:	88 36       	cpi	r24, 0x68	; 104
    250a:	59 f4       	brne	.+22     	; 0x2522 <vfprintf+0x11e>
    250c:	ec 85       	ldd	r30, Y+12	; 0x0c
    250e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	fd 87       	std	Y+13, r31	; 0x0d
    251a:	ec 87       	std	Y+12, r30	; 0x0c
    251c:	88 23       	and	r24, r24
    251e:	09 f0       	breq	.+2      	; 0x2522 <vfprintf+0x11e>
    2520:	b8 cf       	rjmp	.-144    	; 0x2492 <vfprintf+0x8e>
    2522:	98 2f       	mov	r25, r24
    2524:	95 54       	subi	r25, 0x45	; 69
    2526:	93 30       	cpi	r25, 0x03	; 3
    2528:	18 f0       	brcs	.+6      	; 0x2530 <vfprintf+0x12c>
    252a:	90 52       	subi	r25, 0x20	; 32
    252c:	93 30       	cpi	r25, 0x03	; 3
    252e:	38 f4       	brcc	.+14     	; 0x253e <vfprintf+0x13a>
    2530:	24 e0       	ldi	r18, 0x04	; 4
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	a2 0e       	add	r10, r18
    2536:	b3 1e       	adc	r11, r19
    2538:	3f e3       	ldi	r19, 0x3F	; 63
    253a:	39 83       	std	Y+1, r19	; 0x01
    253c:	0f c0       	rjmp	.+30     	; 0x255c <vfprintf+0x158>
    253e:	83 36       	cpi	r24, 0x63	; 99
    2540:	31 f0       	breq	.+12     	; 0x254e <vfprintf+0x14a>
    2542:	83 37       	cpi	r24, 0x73	; 115
    2544:	81 f0       	breq	.+32     	; 0x2566 <vfprintf+0x162>
    2546:	83 35       	cpi	r24, 0x53	; 83
    2548:	09 f0       	breq	.+2      	; 0x254c <vfprintf+0x148>
    254a:	5a c0       	rjmp	.+180    	; 0x2600 <vfprintf+0x1fc>
    254c:	22 c0       	rjmp	.+68     	; 0x2592 <vfprintf+0x18e>
    254e:	f5 01       	movw	r30, r10
    2550:	80 81       	ld	r24, Z
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	22 e0       	ldi	r18, 0x02	; 2
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	a2 0e       	add	r10, r18
    255a:	b3 1e       	adc	r11, r19
    255c:	21 e0       	ldi	r18, 0x01	; 1
    255e:	c2 2e       	mov	r12, r18
    2560:	d1 2c       	mov	r13, r1
    2562:	42 01       	movw	r8, r4
    2564:	14 c0       	rjmp	.+40     	; 0x258e <vfprintf+0x18a>
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	29 2e       	mov	r2, r25
    256a:	31 2c       	mov	r3, r1
    256c:	2a 0c       	add	r2, r10
    256e:	3b 1c       	adc	r3, r11
    2570:	f5 01       	movw	r30, r10
    2572:	80 80       	ld	r8, Z
    2574:	91 80       	ldd	r9, Z+1	; 0x01
    2576:	16 ff       	sbrs	r17, 6
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <vfprintf+0x17c>
    257a:	6f 2d       	mov	r22, r15
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <vfprintf+0x180>
    2580:	6f ef       	ldi	r22, 0xFF	; 255
    2582:	7f ef       	ldi	r23, 0xFF	; 255
    2584:	c4 01       	movw	r24, r8
    2586:	0e 94 14 14 	call	0x2828	; 0x2828 <strnlen>
    258a:	6c 01       	movw	r12, r24
    258c:	51 01       	movw	r10, r2
    258e:	1f 77       	andi	r17, 0x7F	; 127
    2590:	15 c0       	rjmp	.+42     	; 0x25bc <vfprintf+0x1b8>
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	28 2e       	mov	r2, r24
    2596:	31 2c       	mov	r3, r1
    2598:	2a 0c       	add	r2, r10
    259a:	3b 1c       	adc	r3, r11
    259c:	f5 01       	movw	r30, r10
    259e:	80 80       	ld	r8, Z
    25a0:	91 80       	ldd	r9, Z+1	; 0x01
    25a2:	16 ff       	sbrs	r17, 6
    25a4:	03 c0       	rjmp	.+6      	; 0x25ac <vfprintf+0x1a8>
    25a6:	6f 2d       	mov	r22, r15
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <vfprintf+0x1ac>
    25ac:	6f ef       	ldi	r22, 0xFF	; 255
    25ae:	7f ef       	ldi	r23, 0xFF	; 255
    25b0:	c4 01       	movw	r24, r8
    25b2:	0e 94 09 14 	call	0x2812	; 0x2812 <strnlen_P>
    25b6:	6c 01       	movw	r12, r24
    25b8:	10 68       	ori	r17, 0x80	; 128
    25ba:	51 01       	movw	r10, r2
    25bc:	13 fd       	sbrc	r17, 3
    25be:	1c c0       	rjmp	.+56     	; 0x25f8 <vfprintf+0x1f4>
    25c0:	06 c0       	rjmp	.+12     	; 0x25ce <vfprintf+0x1ca>
    25c2:	80 e2       	ldi	r24, 0x20	; 32
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	b3 01       	movw	r22, r6
    25c8:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    25cc:	ea 94       	dec	r14
    25ce:	8e 2d       	mov	r24, r14
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	c8 16       	cp	r12, r24
    25d4:	d9 06       	cpc	r13, r25
    25d6:	a8 f3       	brcs	.-22     	; 0x25c2 <vfprintf+0x1be>
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <vfprintf+0x1f4>
    25da:	f4 01       	movw	r30, r8
    25dc:	17 fd       	sbrc	r17, 7
    25de:	85 91       	lpm	r24, Z+
    25e0:	17 ff       	sbrs	r17, 7
    25e2:	81 91       	ld	r24, Z+
    25e4:	4f 01       	movw	r8, r30
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	b3 01       	movw	r22, r6
    25ea:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    25ee:	e1 10       	cpse	r14, r1
    25f0:	ea 94       	dec	r14
    25f2:	08 94       	sec
    25f4:	c1 08       	sbc	r12, r1
    25f6:	d1 08       	sbc	r13, r1
    25f8:	c1 14       	cp	r12, r1
    25fa:	d1 04       	cpc	r13, r1
    25fc:	71 f7       	brne	.-36     	; 0x25da <vfprintf+0x1d6>
    25fe:	e7 c0       	rjmp	.+462    	; 0x27ce <vfprintf+0x3ca>
    2600:	84 36       	cpi	r24, 0x64	; 100
    2602:	11 f0       	breq	.+4      	; 0x2608 <vfprintf+0x204>
    2604:	89 36       	cpi	r24, 0x69	; 105
    2606:	51 f5       	brne	.+84     	; 0x265c <vfprintf+0x258>
    2608:	f5 01       	movw	r30, r10
    260a:	17 ff       	sbrs	r17, 7
    260c:	07 c0       	rjmp	.+14     	; 0x261c <vfprintf+0x218>
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	a2 81       	ldd	r26, Z+2	; 0x02
    2614:	b3 81       	ldd	r27, Z+3	; 0x03
    2616:	24 e0       	ldi	r18, 0x04	; 4
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	08 c0       	rjmp	.+16     	; 0x262c <vfprintf+0x228>
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	aa 27       	eor	r26, r26
    2622:	97 fd       	sbrc	r25, 7
    2624:	a0 95       	com	r26
    2626:	ba 2f       	mov	r27, r26
    2628:	22 e0       	ldi	r18, 0x02	; 2
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	a2 0e       	add	r10, r18
    262e:	b3 1e       	adc	r11, r19
    2630:	01 2f       	mov	r16, r17
    2632:	0f 76       	andi	r16, 0x6F	; 111
    2634:	b7 ff       	sbrs	r27, 7
    2636:	08 c0       	rjmp	.+16     	; 0x2648 <vfprintf+0x244>
    2638:	b0 95       	com	r27
    263a:	a0 95       	com	r26
    263c:	90 95       	com	r25
    263e:	81 95       	neg	r24
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	af 4f       	sbci	r26, 0xFF	; 255
    2644:	bf 4f       	sbci	r27, 0xFF	; 255
    2646:	00 68       	ori	r16, 0x80	; 128
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	a2 01       	movw	r20, r4
    264e:	2a e0       	ldi	r18, 0x0A	; 10
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	0e 94 8b 14 	call	0x2916	; 0x2916 <__ultoa_invert>
    2656:	d8 2e       	mov	r13, r24
    2658:	d4 18       	sub	r13, r4
    265a:	3f c0       	rjmp	.+126    	; 0x26da <vfprintf+0x2d6>
    265c:	85 37       	cpi	r24, 0x75	; 117
    265e:	21 f4       	brne	.+8      	; 0x2668 <vfprintf+0x264>
    2660:	1f 7e       	andi	r17, 0xEF	; 239
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	20 c0       	rjmp	.+64     	; 0x26a8 <vfprintf+0x2a4>
    2668:	19 7f       	andi	r17, 0xF9	; 249
    266a:	8f 36       	cpi	r24, 0x6F	; 111
    266c:	a9 f0       	breq	.+42     	; 0x2698 <vfprintf+0x294>
    266e:	80 37       	cpi	r24, 0x70	; 112
    2670:	20 f4       	brcc	.+8      	; 0x267a <vfprintf+0x276>
    2672:	88 35       	cpi	r24, 0x58	; 88
    2674:	09 f0       	breq	.+2      	; 0x2678 <vfprintf+0x274>
    2676:	ae c0       	rjmp	.+348    	; 0x27d4 <vfprintf+0x3d0>
    2678:	0b c0       	rjmp	.+22     	; 0x2690 <vfprintf+0x28c>
    267a:	80 37       	cpi	r24, 0x70	; 112
    267c:	21 f0       	breq	.+8      	; 0x2686 <vfprintf+0x282>
    267e:	88 37       	cpi	r24, 0x78	; 120
    2680:	09 f0       	breq	.+2      	; 0x2684 <vfprintf+0x280>
    2682:	a8 c0       	rjmp	.+336    	; 0x27d4 <vfprintf+0x3d0>
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <vfprintf+0x284>
    2686:	10 61       	ori	r17, 0x10	; 16
    2688:	14 ff       	sbrs	r17, 4
    268a:	09 c0       	rjmp	.+18     	; 0x269e <vfprintf+0x29a>
    268c:	14 60       	ori	r17, 0x04	; 4
    268e:	07 c0       	rjmp	.+14     	; 0x269e <vfprintf+0x29a>
    2690:	14 ff       	sbrs	r17, 4
    2692:	08 c0       	rjmp	.+16     	; 0x26a4 <vfprintf+0x2a0>
    2694:	16 60       	ori	r17, 0x06	; 6
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <vfprintf+0x2a0>
    2698:	28 e0       	ldi	r18, 0x08	; 8
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <vfprintf+0x2a4>
    269e:	20 e1       	ldi	r18, 0x10	; 16
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <vfprintf+0x2a4>
    26a4:	20 e1       	ldi	r18, 0x10	; 16
    26a6:	32 e0       	ldi	r19, 0x02	; 2
    26a8:	f5 01       	movw	r30, r10
    26aa:	17 ff       	sbrs	r17, 7
    26ac:	07 c0       	rjmp	.+14     	; 0x26bc <vfprintf+0x2b8>
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	44 e0       	ldi	r20, 0x04	; 4
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	06 c0       	rjmp	.+12     	; 0x26c8 <vfprintf+0x2c4>
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	42 e0       	ldi	r20, 0x02	; 2
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	a4 0e       	add	r10, r20
    26ca:	b5 1e       	adc	r11, r21
    26cc:	a2 01       	movw	r20, r4
    26ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <__ultoa_invert>
    26d2:	d8 2e       	mov	r13, r24
    26d4:	d4 18       	sub	r13, r4
    26d6:	01 2f       	mov	r16, r17
    26d8:	0f 77       	andi	r16, 0x7F	; 127
    26da:	06 ff       	sbrs	r16, 6
    26dc:	09 c0       	rjmp	.+18     	; 0x26f0 <vfprintf+0x2ec>
    26de:	0e 7f       	andi	r16, 0xFE	; 254
    26e0:	df 14       	cp	r13, r15
    26e2:	30 f4       	brcc	.+12     	; 0x26f0 <vfprintf+0x2ec>
    26e4:	04 ff       	sbrs	r16, 4
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <vfprintf+0x2f0>
    26e8:	02 fd       	sbrc	r16, 2
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <vfprintf+0x2f0>
    26ec:	0f 7e       	andi	r16, 0xEF	; 239
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <vfprintf+0x2f0>
    26f0:	1d 2d       	mov	r17, r13
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <vfprintf+0x2f2>
    26f4:	1f 2d       	mov	r17, r15
    26f6:	80 2f       	mov	r24, r16
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	04 ff       	sbrs	r16, 4
    26fc:	0c c0       	rjmp	.+24     	; 0x2716 <vfprintf+0x312>
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 0d       	add	r30, r13
    2702:	f1 1d       	adc	r31, r1
    2704:	20 81       	ld	r18, Z
    2706:	20 33       	cpi	r18, 0x30	; 48
    2708:	11 f4       	brne	.+4      	; 0x270e <vfprintf+0x30a>
    270a:	09 7e       	andi	r16, 0xE9	; 233
    270c:	09 c0       	rjmp	.+18     	; 0x2720 <vfprintf+0x31c>
    270e:	02 ff       	sbrs	r16, 2
    2710:	06 c0       	rjmp	.+12     	; 0x271e <vfprintf+0x31a>
    2712:	1e 5f       	subi	r17, 0xFE	; 254
    2714:	05 c0       	rjmp	.+10     	; 0x2720 <vfprintf+0x31c>
    2716:	86 78       	andi	r24, 0x86	; 134
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	09 f0       	breq	.+2      	; 0x2720 <vfprintf+0x31c>
    271e:	1f 5f       	subi	r17, 0xFF	; 255
    2720:	80 2e       	mov	r8, r16
    2722:	99 24       	eor	r9, r9
    2724:	03 fd       	sbrc	r16, 3
    2726:	12 c0       	rjmp	.+36     	; 0x274c <vfprintf+0x348>
    2728:	00 ff       	sbrs	r16, 0
    272a:	0d c0       	rjmp	.+26     	; 0x2746 <vfprintf+0x342>
    272c:	fd 2c       	mov	r15, r13
    272e:	1e 15       	cp	r17, r14
    2730:	50 f4       	brcc	.+20     	; 0x2746 <vfprintf+0x342>
    2732:	fe 0c       	add	r15, r14
    2734:	f1 1a       	sub	r15, r17
    2736:	1e 2d       	mov	r17, r14
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <vfprintf+0x342>
    273a:	80 e2       	ldi	r24, 0x20	; 32
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	b3 01       	movw	r22, r6
    2740:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    2744:	1f 5f       	subi	r17, 0xFF	; 255
    2746:	1e 15       	cp	r17, r14
    2748:	c0 f3       	brcs	.-16     	; 0x273a <vfprintf+0x336>
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <vfprintf+0x350>
    274c:	1e 15       	cp	r17, r14
    274e:	10 f4       	brcc	.+4      	; 0x2754 <vfprintf+0x350>
    2750:	e1 1a       	sub	r14, r17
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <vfprintf+0x352>
    2754:	ee 24       	eor	r14, r14
    2756:	84 fe       	sbrs	r8, 4
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <vfprintf+0x374>
    275a:	80 e3       	ldi	r24, 0x30	; 48
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	b3 01       	movw	r22, r6
    2760:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    2764:	82 fe       	sbrs	r8, 2
    2766:	1f c0       	rjmp	.+62     	; 0x27a6 <vfprintf+0x3a2>
    2768:	81 fe       	sbrs	r8, 1
    276a:	03 c0       	rjmp	.+6      	; 0x2772 <vfprintf+0x36e>
    276c:	88 e5       	ldi	r24, 0x58	; 88
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	10 c0       	rjmp	.+32     	; 0x2792 <vfprintf+0x38e>
    2772:	88 e7       	ldi	r24, 0x78	; 120
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0d c0       	rjmp	.+26     	; 0x2792 <vfprintf+0x38e>
    2778:	c4 01       	movw	r24, r8
    277a:	86 78       	andi	r24, 0x86	; 134
    277c:	90 70       	andi	r25, 0x00	; 0
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	91 f0       	breq	.+36     	; 0x27a6 <vfprintf+0x3a2>
    2782:	81 fc       	sbrc	r8, 1
    2784:	02 c0       	rjmp	.+4      	; 0x278a <vfprintf+0x386>
    2786:	80 e2       	ldi	r24, 0x20	; 32
    2788:	01 c0       	rjmp	.+2      	; 0x278c <vfprintf+0x388>
    278a:	8b e2       	ldi	r24, 0x2B	; 43
    278c:	07 fd       	sbrc	r16, 7
    278e:	8d e2       	ldi	r24, 0x2D	; 45
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	b3 01       	movw	r22, r6
    2794:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <vfprintf+0x3a2>
    279a:	80 e3       	ldi	r24, 0x30	; 48
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	b3 01       	movw	r22, r6
    27a0:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    27a4:	fa 94       	dec	r15
    27a6:	df 14       	cp	r13, r15
    27a8:	c0 f3       	brcs	.-16     	; 0x279a <vfprintf+0x396>
    27aa:	da 94       	dec	r13
    27ac:	f2 01       	movw	r30, r4
    27ae:	ed 0d       	add	r30, r13
    27b0:	f1 1d       	adc	r31, r1
    27b2:	80 81       	ld	r24, Z
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	b3 01       	movw	r22, r6
    27b8:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    27bc:	dd 20       	and	r13, r13
    27be:	a9 f7       	brne	.-22     	; 0x27aa <vfprintf+0x3a6>
    27c0:	06 c0       	rjmp	.+12     	; 0x27ce <vfprintf+0x3ca>
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	b3 01       	movw	r22, r6
    27c8:	0e 94 5f 14 	call	0x28be	; 0x28be <fputc>
    27cc:	ea 94       	dec	r14
    27ce:	ee 20       	and	r14, r14
    27d0:	c1 f7       	brne	.-16     	; 0x27c2 <vfprintf+0x3be>
    27d2:	40 ce       	rjmp	.-896    	; 0x2454 <vfprintf+0x50>
    27d4:	f3 01       	movw	r30, r6
    27d6:	86 81       	ldd	r24, Z+6	; 0x06
    27d8:	97 81       	ldd	r25, Z+7	; 0x07
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <vfprintf+0x3dc>
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	9f ef       	ldi	r25, 0xFF	; 255
    27e0:	2d 96       	adiw	r28, 0x0d	; 13
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	bf 90       	pop	r11
    27fe:	af 90       	pop	r10
    2800:	9f 90       	pop	r9
    2802:	8f 90       	pop	r8
    2804:	7f 90       	pop	r7
    2806:	6f 90       	pop	r6
    2808:	5f 90       	pop	r5
    280a:	4f 90       	pop	r4
    280c:	3f 90       	pop	r3
    280e:	2f 90       	pop	r2
    2810:	08 95       	ret

00002812 <strnlen_P>:
    2812:	fc 01       	movw	r30, r24
    2814:	05 90       	lpm	r0, Z+
    2816:	61 50       	subi	r22, 0x01	; 1
    2818:	70 40       	sbci	r23, 0x00	; 0
    281a:	01 10       	cpse	r0, r1
    281c:	d8 f7       	brcc	.-10     	; 0x2814 <strnlen_P+0x2>
    281e:	80 95       	com	r24
    2820:	90 95       	com	r25
    2822:	8e 0f       	add	r24, r30
    2824:	9f 1f       	adc	r25, r31
    2826:	08 95       	ret

00002828 <strnlen>:
    2828:	fc 01       	movw	r30, r24
    282a:	61 50       	subi	r22, 0x01	; 1
    282c:	70 40       	sbci	r23, 0x00	; 0
    282e:	01 90       	ld	r0, Z+
    2830:	01 10       	cpse	r0, r1
    2832:	d8 f7       	brcc	.-10     	; 0x282a <strnlen+0x2>
    2834:	80 95       	com	r24
    2836:	90 95       	com	r25
    2838:	8e 0f       	add	r24, r30
    283a:	9f 1f       	adc	r25, r31
    283c:	08 95       	ret

0000283e <fgetc>:
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	ec 01       	movw	r28, r24
    2844:	2b 81       	ldd	r18, Y+3	; 0x03
    2846:	20 ff       	sbrs	r18, 0
    2848:	35 c0       	rjmp	.+106    	; 0x28b4 <fgetc+0x76>
    284a:	26 ff       	sbrs	r18, 6
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <fgetc+0x22>
    284e:	2f 7b       	andi	r18, 0xBF	; 191
    2850:	2b 83       	std	Y+3, r18	; 0x03
    2852:	8e 81       	ldd	r24, Y+6	; 0x06
    2854:	9f 81       	ldd	r25, Y+7	; 0x07
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	9f 83       	std	Y+7, r25	; 0x07
    285a:	8e 83       	std	Y+6, r24	; 0x06
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 c0       	rjmp	.+80     	; 0x28b0 <fgetc+0x72>
    2860:	22 ff       	sbrs	r18, 2
    2862:	0f c0       	rjmp	.+30     	; 0x2882 <fgetc+0x44>
    2864:	e8 81       	ld	r30, Y
    2866:	f9 81       	ldd	r31, Y+1	; 0x01
    2868:	80 81       	ld	r24, Z
    286a:	99 27       	eor	r25, r25
    286c:	87 fd       	sbrc	r24, 7
    286e:	90 95       	com	r25
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	19 f4       	brne	.+6      	; 0x287a <fgetc+0x3c>
    2874:	20 62       	ori	r18, 0x20	; 32
    2876:	2b 83       	std	Y+3, r18	; 0x03
    2878:	1d c0       	rjmp	.+58     	; 0x28b4 <fgetc+0x76>
    287a:	31 96       	adiw	r30, 0x01	; 1
    287c:	f9 83       	std	Y+1, r31	; 0x01
    287e:	e8 83       	st	Y, r30
    2880:	11 c0       	rjmp	.+34     	; 0x28a4 <fgetc+0x66>
    2882:	ea 85       	ldd	r30, Y+10	; 0x0a
    2884:	fb 85       	ldd	r31, Y+11	; 0x0b
    2886:	ce 01       	movw	r24, r28
    2888:	19 95       	eicall
    288a:	97 ff       	sbrs	r25, 7
    288c:	0b c0       	rjmp	.+22     	; 0x28a4 <fgetc+0x66>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	8f 3f       	cpi	r24, 0xFF	; 255
    2894:	93 07       	cpc	r25, r19
    2896:	11 f4       	brne	.+4      	; 0x289c <fgetc+0x5e>
    2898:	80 e1       	ldi	r24, 0x10	; 16
    289a:	01 c0       	rjmp	.+2      	; 0x289e <fgetc+0x60>
    289c:	80 e2       	ldi	r24, 0x20	; 32
    289e:	82 2b       	or	r24, r18
    28a0:	8b 83       	std	Y+3, r24	; 0x03
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <fgetc+0x76>
    28a4:	2e 81       	ldd	r18, Y+6	; 0x06
    28a6:	3f 81       	ldd	r19, Y+7	; 0x07
    28a8:	2f 5f       	subi	r18, 0xFF	; 255
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	3f 83       	std	Y+7, r19	; 0x07
    28ae:	2e 83       	std	Y+6, r18	; 0x06
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <fgetc+0x7a>
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	9f ef       	ldi	r25, 0xFF	; 255
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <fputc>:
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	8c 01       	movw	r16, r24
    28c8:	eb 01       	movw	r28, r22
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	81 ff       	sbrs	r24, 1
    28ce:	1b c0       	rjmp	.+54     	; 0x2906 <fputc+0x48>
    28d0:	82 ff       	sbrs	r24, 2
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <fputc+0x30>
    28d4:	2e 81       	ldd	r18, Y+6	; 0x06
    28d6:	3f 81       	ldd	r19, Y+7	; 0x07
    28d8:	8c 81       	ldd	r24, Y+4	; 0x04
    28da:	9d 81       	ldd	r25, Y+5	; 0x05
    28dc:	28 17       	cp	r18, r24
    28de:	39 07       	cpc	r19, r25
    28e0:	64 f4       	brge	.+24     	; 0x28fa <fputc+0x3c>
    28e2:	e8 81       	ld	r30, Y
    28e4:	f9 81       	ldd	r31, Y+1	; 0x01
    28e6:	01 93       	st	Z+, r16
    28e8:	f9 83       	std	Y+1, r31	; 0x01
    28ea:	e8 83       	st	Y, r30
    28ec:	06 c0       	rjmp	.+12     	; 0x28fa <fputc+0x3c>
    28ee:	e8 85       	ldd	r30, Y+8	; 0x08
    28f0:	f9 85       	ldd	r31, Y+9	; 0x09
    28f2:	80 2f       	mov	r24, r16
    28f4:	19 95       	eicall
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	31 f4       	brne	.+12     	; 0x2906 <fputc+0x48>
    28fa:	8e 81       	ldd	r24, Y+6	; 0x06
    28fc:	9f 81       	ldd	r25, Y+7	; 0x07
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	02 c0       	rjmp	.+4      	; 0x290a <fputc+0x4c>
    2906:	0f ef       	ldi	r16, 0xFF	; 255
    2908:	1f ef       	ldi	r17, 0xFF	; 255
    290a:	c8 01       	movw	r24, r16
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	08 95       	ret

00002916 <__ultoa_invert>:
    2916:	fa 01       	movw	r30, r20
    2918:	aa 27       	eor	r26, r26
    291a:	28 30       	cpi	r18, 0x08	; 8
    291c:	51 f1       	breq	.+84     	; 0x2972 <__ultoa_invert+0x5c>
    291e:	20 31       	cpi	r18, 0x10	; 16
    2920:	81 f1       	breq	.+96     	; 0x2982 <__ultoa_invert+0x6c>
    2922:	e8 94       	clt
    2924:	6f 93       	push	r22
    2926:	6e 7f       	andi	r22, 0xFE	; 254
    2928:	6e 5f       	subi	r22, 0xFE	; 254
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	8f 4f       	sbci	r24, 0xFF	; 255
    292e:	9f 4f       	sbci	r25, 0xFF	; 255
    2930:	af 4f       	sbci	r26, 0xFF	; 255
    2932:	b1 e0       	ldi	r27, 0x01	; 1
    2934:	3e d0       	rcall	.+124    	; 0x29b2 <__ultoa_invert+0x9c>
    2936:	b4 e0       	ldi	r27, 0x04	; 4
    2938:	3c d0       	rcall	.+120    	; 0x29b2 <__ultoa_invert+0x9c>
    293a:	67 0f       	add	r22, r23
    293c:	78 1f       	adc	r23, r24
    293e:	89 1f       	adc	r24, r25
    2940:	9a 1f       	adc	r25, r26
    2942:	a1 1d       	adc	r26, r1
    2944:	68 0f       	add	r22, r24
    2946:	79 1f       	adc	r23, r25
    2948:	8a 1f       	adc	r24, r26
    294a:	91 1d       	adc	r25, r1
    294c:	a1 1d       	adc	r26, r1
    294e:	6a 0f       	add	r22, r26
    2950:	71 1d       	adc	r23, r1
    2952:	81 1d       	adc	r24, r1
    2954:	91 1d       	adc	r25, r1
    2956:	a1 1d       	adc	r26, r1
    2958:	20 d0       	rcall	.+64     	; 0x299a <__ultoa_invert+0x84>
    295a:	09 f4       	brne	.+2      	; 0x295e <__ultoa_invert+0x48>
    295c:	68 94       	set
    295e:	3f 91       	pop	r19
    2960:	2a e0       	ldi	r18, 0x0A	; 10
    2962:	26 9f       	mul	r18, r22
    2964:	11 24       	eor	r1, r1
    2966:	30 19       	sub	r19, r0
    2968:	30 5d       	subi	r19, 0xD0	; 208
    296a:	31 93       	st	Z+, r19
    296c:	de f6       	brtc	.-74     	; 0x2924 <__ultoa_invert+0xe>
    296e:	cf 01       	movw	r24, r30
    2970:	08 95       	ret
    2972:	46 2f       	mov	r20, r22
    2974:	47 70       	andi	r20, 0x07	; 7
    2976:	40 5d       	subi	r20, 0xD0	; 208
    2978:	41 93       	st	Z+, r20
    297a:	b3 e0       	ldi	r27, 0x03	; 3
    297c:	0f d0       	rcall	.+30     	; 0x299c <__ultoa_invert+0x86>
    297e:	c9 f7       	brne	.-14     	; 0x2972 <__ultoa_invert+0x5c>
    2980:	f6 cf       	rjmp	.-20     	; 0x296e <__ultoa_invert+0x58>
    2982:	46 2f       	mov	r20, r22
    2984:	4f 70       	andi	r20, 0x0F	; 15
    2986:	40 5d       	subi	r20, 0xD0	; 208
    2988:	4a 33       	cpi	r20, 0x3A	; 58
    298a:	18 f0       	brcs	.+6      	; 0x2992 <__ultoa_invert+0x7c>
    298c:	49 5d       	subi	r20, 0xD9	; 217
    298e:	31 fd       	sbrc	r19, 1
    2990:	40 52       	subi	r20, 0x20	; 32
    2992:	41 93       	st	Z+, r20
    2994:	02 d0       	rcall	.+4      	; 0x299a <__ultoa_invert+0x84>
    2996:	a9 f7       	brne	.-22     	; 0x2982 <__ultoa_invert+0x6c>
    2998:	ea cf       	rjmp	.-44     	; 0x296e <__ultoa_invert+0x58>
    299a:	b4 e0       	ldi	r27, 0x04	; 4
    299c:	a6 95       	lsr	r26
    299e:	97 95       	ror	r25
    29a0:	87 95       	ror	r24
    29a2:	77 95       	ror	r23
    29a4:	67 95       	ror	r22
    29a6:	ba 95       	dec	r27
    29a8:	c9 f7       	brne	.-14     	; 0x299c <__ultoa_invert+0x86>
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	61 05       	cpc	r22, r1
    29ae:	71 05       	cpc	r23, r1
    29b0:	08 95       	ret
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	0a 2e       	mov	r0, r26
    29b8:	06 94       	lsr	r0
    29ba:	57 95       	ror	r21
    29bc:	47 95       	ror	r20
    29be:	37 95       	ror	r19
    29c0:	27 95       	ror	r18
    29c2:	ba 95       	dec	r27
    29c4:	c9 f7       	brne	.-14     	; 0x29b8 <__ultoa_invert+0xa2>
    29c6:	62 0f       	add	r22, r18
    29c8:	73 1f       	adc	r23, r19
    29ca:	84 1f       	adc	r24, r20
    29cc:	95 1f       	adc	r25, r21
    29ce:	a0 1d       	adc	r26, r0
    29d0:	08 95       	ret

000029d2 <_exit>:
    29d2:	f8 94       	cli

000029d4 <__stop_program>:
    29d4:	ff cf       	rjmp	.-2      	; 0x29d4 <__stop_program>
