
pjt12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800200  00002240  000022d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c1  00800406  00800406  000024da  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000428  00000000  00000000  000039f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040cc  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000203d  00000000  00000000  00007eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f70  00000000  00000000  00009f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000afc  00000000  00000000  0000be9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aed  00000000  00000000  0000c998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000288d  00000000  00000000  0000d485  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000fd12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 30       	cpi	r26, 0x06	; 6
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a6 e0       	ldi	r26, 0x06	; 6
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 3c       	cpi	r26, 0xC7	; 199
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 4a 0b 	call	0x1694	; 0x1694 <main>
     124:	0c 94 1e 11 	jmp	0x223c	; 0x223c <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include<avr/io.h>
static uint8_t Leds;

void led_init(){
	DDRL = PORTL =0xff;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	80 93 0b 01 	sts	0x010B, r24
     132:	80 93 0a 01 	sts	0x010A, r24
}
     136:	08 95       	ret

00000138 <led_on_all>:
void led_on_all(){
	Leds = PORTL = 0x00;
     138:	10 92 0b 01 	sts	0x010B, r1
     13c:	10 92 06 04 	sts	0x0406, r1
}
     140:	08 95       	ret

00000142 <led_off_all>:
void led_off_all(){
	Leds = PORTL = 0xff;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	80 93 0b 01 	sts	0x010B, r24
     148:	80 93 06 04 	sts	0x0406, r24
}
     14c:	08 95       	ret

0000014e <led_on>:
void led_on(uint8_t led_no){
	Leds &= (1 << led_no);
     14e:	21 e0       	ldi	r18, 0x01	; 1
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
     15c:	80 91 06 04 	lds	r24, 0x0406
     160:	82 23       	and	r24, r18
     162:	80 93 06 04 	sts	0x0406, r24
	PORTL = Leds;
     166:	80 93 0b 01 	sts	0x010B, r24
}
     16a:	08 95       	ret

0000016c <led_off>:
void led_off(uint8_t led_no){
	Leds |= (1 << led_no);
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	02 c0       	rjmp	.+4      	; 0x176 <led_off+0xa>
     172:	22 0f       	add	r18, r18
     174:	33 1f       	adc	r19, r19
     176:	8a 95       	dec	r24
     178:	e2 f7       	brpl	.-8      	; 0x172 <led_off+0x6>
     17a:	80 91 06 04 	lds	r24, 0x0406
     17e:	82 2b       	or	r24, r18
     180:	80 93 06 04 	sts	0x0406, r24
	PORTL = Leds;
     184:	80 93 0b 01 	sts	0x010B, r24
}
     188:	08 95       	ret

0000018a <led_set>:
void led_set(uint8_t led_mask){
	Leds = ~led_mask;
     18a:	80 95       	com	r24
     18c:	80 93 06 04 	sts	0x0406, r24
	PORTL = Leds;
     190:	80 93 0b 01 	sts	0x010B, r24
}
     194:	08 95       	ret

00000196 <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     196:	fc 01       	movw	r30, r24
	if(!Head){
     198:	80 91 07 04 	lds	r24, 0x0407
     19c:	90 91 08 04 	lds	r25, 0x0408
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	39 f4       	brne	.+14     	; 0x1b2 <insert_node_head+0x1c>
		Head = np;
     1a4:	f0 93 08 04 	sts	0x0408, r31
     1a8:	e0 93 07 04 	sts	0x0407, r30
		np->link = NULL;
     1ac:	13 82       	std	Z+3, r1	; 0x03
     1ae:	12 82       	std	Z+2, r1	; 0x02
     1b0:	08 95       	ret
	}else {
		np->link = Head;
     1b2:	93 83       	std	Z+3, r25	; 0x03
     1b4:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     1b6:	f0 93 08 04 	sts	0x0408, r31
     1ba:	e0 93 07 04 	sts	0x0407, r30
     1be:	08 95       	ret

000001c0 <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     1c0:	e0 91 07 04 	lds	r30, 0x0407
     1c4:	f0 91 08 04 	lds	r31, 0x0408
     1c8:	30 97       	sbiw	r30, 0x00	; 0
     1ca:	31 f4       	brne	.+12     	; 0x1d8 <insert_node_tail+0x18>
		Head = np;
     1cc:	90 93 08 04 	sts	0x0408, r25
     1d0:	80 93 07 04 	sts	0x0407, r24
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     1d6:	f9 01       	movw	r30, r18
     1d8:	22 81       	ldd	r18, Z+2	; 0x02
     1da:	33 81       	ldd	r19, Z+3	; 0x03
     1dc:	21 15       	cp	r18, r1
     1de:	31 05       	cpc	r19, r1
     1e0:	d1 f7       	brne	.-12     	; 0x1d6 <insert_node_tail+0x16>
			;
		cp->link = np;
     1e2:	93 83       	std	Z+3, r25	; 0x03
     1e4:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     1e6:	fc 01       	movw	r30, r24
     1e8:	13 82       	std	Z+3, r1	; 0x03
     1ea:	12 82       	std	Z+2, r1	; 0x02
}
     1ec:	08 95       	ret

000001ee <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     1f4:	20 91 07 04 	lds	r18, 0x0407
     1f8:	30 91 08 04 	lds	r19, 0x0408
     1fc:	21 15       	cp	r18, r1
     1fe:	31 05       	cpc	r19, r1
     200:	31 f0       	breq	.+12     	; 0x20e <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     202:	40 81       	ld	r20, Z
     204:	51 81       	ldd	r21, Z+1	; 0x01
     206:	d9 01       	movw	r26, r18
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	0f c0       	rjmp	.+30     	; 0x22c <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     20e:	90 93 08 04 	sts	0x0408, r25
     212:	80 93 07 04 	sts	0x0407, r24
		np->link = NULL;
     216:	13 82       	std	Z+3, r1	; 0x03
     218:	12 82       	std	Z+2, r1	; 0x02
     21a:	1d c0       	rjmp	.+58     	; 0x256 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     21c:	12 96       	adiw	r26, 0x02	; 2
     21e:	8d 91       	ld	r24, X+
     220:	9c 91       	ld	r25, X
     222:	13 97       	sbiw	r26, 0x03	; 3
     224:	ed 01       	movw	r28, r26
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	39 f0       	breq	.+14     	; 0x238 <insert_node_ascn+0x4a>
     22a:	dc 01       	movw	r26, r24
     22c:	8d 91       	ld	r24, X+
     22e:	9c 91       	ld	r25, X
     230:	11 97       	sbiw	r26, 0x01	; 1
     232:	84 17       	cp	r24, r20
     234:	95 07       	cpc	r25, r21
     236:	94 f3       	brlt	.-28     	; 0x21c <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     238:	20 97       	sbiw	r28, 0x00	; 0
     23a:	39 f4       	brne	.+14     	; 0x24a <insert_node_ascn+0x5c>
			np->link = Head;
     23c:	33 83       	std	Z+3, r19	; 0x03
     23e:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     240:	f0 93 08 04 	sts	0x0408, r31
     244:	e0 93 07 04 	sts	0x0407, r30
     248:	06 c0       	rjmp	.+12     	; 0x256 <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	9b 81       	ldd	r25, Y+3	; 0x03
     24e:	93 83       	std	Z+3, r25	; 0x03
     250:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     252:	fb 83       	std	Y+3, r31	; 0x03
     254:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <free_node>:
void free_node(NODE *np)
{
	free(np);
     25c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <free>
}
     260:	08 95       	ret

00000262 <tour_list>:
void tour_list()
{
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     272:	c0 91 07 04 	lds	r28, 0x0407
     276:	d0 91 08 04 	lds	r29, 0x0408
		printf("-->%c ", cp->data);
     27a:	03 e0       	ldi	r16, 0x03	; 3
     27c:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     27e:	13 c0       	rjmp	.+38     	; 0x2a6 <tour_list+0x44>
		printf("-->%c ", cp->data);
     280:	00 d0       	rcall	.+0      	; 0x282 <tour_list+0x20>
     282:	0f 92       	push	r0
     284:	ed b7       	in	r30, 0x3d	; 61
     286:	fe b7       	in	r31, 0x3e	; 62
     288:	12 83       	std	Z+2, r17	; 0x02
     28a:	01 83       	std	Z+1, r16	; 0x01
     28c:	88 81       	ld	r24, Y
     28e:	99 81       	ldd	r25, Y+1	; 0x01
     290:	94 83       	std	Z+4, r25	; 0x04
     292:	83 83       	std	Z+3, r24	; 0x03
     294:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     298:	0a 80       	ldd	r0, Y+2	; 0x02
     29a:	db 81       	ldd	r29, Y+3	; 0x03
     29c:	c0 2d       	mov	r28, r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	20 97       	sbiw	r28, 0x00	; 0
     2a8:	59 f7       	brne	.-42     	; 0x280 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <putchar>
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2be:	fc 01       	movw	r30, r24
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	30 93 08 04 	sts	0x0408, r19
     2c8:	20 93 07 04 	sts	0x0407, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     2cc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     2d0:	80 91 07 04 	lds	r24, 0x0407
     2d4:	90 91 08 04 	lds	r25, 0x0408
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	89 f7       	brne	.-30     	; 0x2be <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     2dc:	08 95       	ret

000002de <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <malloc>
	return cp;
}
     2e6:	08 95       	ret

000002e8 <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     2f6:	eb 01       	movw	r28, r22
     2f8:	22 e0       	ldi	r18, 0x02	; 2
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	08 c0       	rjmp	.+16     	; 0x30e <is_prime+0x26>
		if((n%i) == 0)
     2fe:	cf 01       	movw	r24, r30
     300:	b9 01       	movw	r22, r18
     302:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	41 f0       	breq	.+16     	; 0x31a <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     30a:	2f 5f       	subi	r18, 0xFF	; 255
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	c2 17       	cp	r28, r18
     310:	d3 07       	cpc	r29, r19
     312:	ac f7       	brge	.-22     	; 0x2fe <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 c0       	rjmp	.+4      	; 0x31e <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <app_prime>:
void app_prime(char *ap)
{
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	21 f0       	breq	.+8      	; 0x340 <app_prime+0x1c>
     338:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     33c:	7c 01       	movw	r14, r24
     33e:	04 c0       	rjmp	.+8      	; 0x348 <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     340:	90 ed       	ldi	r25, 0xD0	; 208
     342:	e9 2e       	mov	r14, r25
     344:	97 e0       	ldi	r25, 0x07	; 7
     346:	f9 2e       	mov	r15, r25
     348:	00 e0       	ldi	r16, 0x00	; 0
     34a:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     34c:	c2 e0       	ldi	r28, 0x02	; 2
     34e:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     350:	8a e0       	ldi	r24, 0x0A	; 10
     352:	c8 2e       	mov	r12, r24
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     358:	16 c0       	rjmp	.+44     	; 0x386 <app_prime+0x62>
		if(is_prime(n)) {
     35a:	ce 01       	movw	r24, r28
     35c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <is_prime>
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	81 f0       	breq	.+32     	; 0x384 <app_prime+0x60>
			count++;
     364:	0f 5f       	subi	r16, 0xFF	; 255
     366:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     368:	00 d0       	rcall	.+0      	; 0x36a <app_prime+0x46>
     36a:	0f 92       	push	r0
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	d2 82       	std	Z+2, r13	; 0x02
     372:	c1 82       	std	Z+1, r12	; 0x01
     374:	d4 83       	std	Z+4, r29	; 0x04
     376:	c3 83       	std	Z+3, r28	; 0x03
     378:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     384:	21 96       	adiw	r28, 0x01	; 1
     386:	ec 16       	cp	r14, r28
     388:	fd 06       	cpc	r15, r29
     38a:	3c f7       	brge	.-50     	; 0x35a <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     38c:	00 d0       	rcall	.+0      	; 0x38e <app_prime+0x6a>
     38e:	0f 92       	push	r0
     390:	84 e2       	ldi	r24, 0x24	; 36
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	ed b7       	in	r30, 0x3d	; 61
     396:	fe b7       	in	r31, 0x3e	; 62
     398:	92 83       	std	Z+2, r25	; 0x02
     39a:	81 83       	std	Z+1, r24	; 0x01
     39c:	14 83       	std	Z+4, r17	; 0x04
     39e:	03 83       	std	Z+3, r16	; 0x03
     3a0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	08 95       	ret

000003be <app_list>:
void app_list(char *ap)
{
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	28 97       	sbiw	r28, 0x08	; 8
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	19 f0       	breq	.+6      	; 0x3e2 <app_list+0x24>
     3dc:	fc 01       	movw	r30, r24
     3de:	10 81       	ld	r17, Z
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     3e2:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     3e4:	2e e2       	ldi	r18, 0x2E	; 46
     3e6:	e2 2e       	mov	r14, r18
     3e8:	22 e0       	ldi	r18, 0x02	; 2
     3ea:	f2 2e       	mov	r15, r18
     3ec:	0f 92       	push	r0
     3ee:	0f 92       	push	r0
     3f0:	ed b7       	in	r30, 0x3d	; 61
     3f2:	fe b7       	in	r31, 0x3e	; 62
     3f4:	f2 82       	std	Z+2, r15	; 0x02
     3f6:	e1 82       	std	Z+1, r14	; 0x01
     3f8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	40 91 c1 06 	lds	r20, 0x06C1
     404:	50 91 c2 06 	lds	r21, 0x06C2
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 67 0d 	call	0x1ace	; 0x1ace <fgets>
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	a1 f0       	breq	.+40     	; 0x440 <app_list+0x82>
			break;
		np = get_node();
     418:	0e 94 6f 01 	call	0x2de	; 0x2de <get_node>
		np->data = buf[0];
     41c:	29 81       	ldd	r18, Y+1	; 0x01
     41e:	fc 01       	movw	r30, r24
     420:	20 83       	st	Z, r18
     422:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     424:	18 36       	cpi	r17, 0x68	; 104
     426:	19 f0       	breq	.+6      	; 0x42e <app_list+0x70>
     428:	14 37       	cpi	r17, 0x74	; 116
     42a:	39 f4       	brne	.+14     	; 0x43a <app_list+0x7c>
     42c:	03 c0       	rjmp	.+6      	; 0x434 <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     42e:	0e 94 cb 00 	call	0x196	; 0x196 <insert_node_head>
     432:	dc cf       	rjmp	.-72     	; 0x3ec <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     434:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <insert_node_tail>
     438:	d9 cf       	rjmp	.-78     	; 0x3ec <app_list+0x2e>
			default :insert_node_ascn(np);
     43a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <insert_node_ascn>
     43e:	d6 cf       	rjmp	.-84     	; 0x3ec <app_list+0x2e>
		}
	}
	tour_list();
     440:	0e 94 31 01 	call	0x262	; 0x262 <tour_list>
	free_list();
     444:	0e 94 5e 01 	call	0x2bc	; 0x2bc <free_list>
}
     448:	28 96       	adiw	r28, 0x08	; 8
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret

00000460 <task_prime>:
void task_prime(char *ap)
{
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	41 f0       	breq	.+16     	; 0x484 <task_prime+0x24>
     474:	fc 01       	movw	r30, r24
     476:	20 81       	ld	r18, Z
     478:	22 23       	and	r18, r18
     47a:	21 f0       	breq	.+8      	; 0x484 <task_prime+0x24>
     47c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     480:	8c 01       	movw	r16, r24
     482:	02 c0       	rjmp	.+4      	; 0x488 <task_prime+0x28>
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     484:	00 ed       	ldi	r16, 0xD0	; 208
     486:	17 e0       	ldi	r17, 0x07	; 7
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     488:	c2 e0       	ldi	r28, 0x02	; 2
     48a:	d0 e0       	ldi	r29, 0x00	; 0
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     48c:	ee 24       	eor	r14, r14
     48e:	ff 24       	eor	r15, r15
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
     490:	31 e3       	ldi	r19, 0x31	; 49
     492:	c3 2e       	mov	r12, r19
     494:	32 e0       	ldi	r19, 0x02	; 2
     496:	d3 2e       	mov	r13, r19
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <task_prime+0x68>
		if(is_prime(n)) {
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <is_prime>
     4a0:	00 97       	sbiw	r24, 0x00	; 0
     4a2:	89 f0       	breq	.+34     	; 0x4c6 <task_prime+0x66>
			count++;
     4a4:	08 94       	sec
     4a6:	e1 1c       	adc	r14, r1
     4a8:	f1 1c       	adc	r15, r1
			printf("%d is prime number !!!\n", n);
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <task_prime+0x4c>
     4ac:	0f 92       	push	r0
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	d2 82       	std	Z+2, r13	; 0x02
     4b4:	c1 82       	std	Z+1, r12	; 0x01
     4b6:	d4 83       	std	Z+4, r29	; 0x04
     4b8:	c3 83       	std	Z+3, r28	; 0x03
     4ba:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     4c6:	21 96       	adiw	r28, 0x01	; 1
     4c8:	0c 17       	cp	r16, r28
     4ca:	1d 07       	cpc	r17, r29
     4cc:	34 f7       	brge	.-52     	; 0x49a <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
		}
	}
	printf("count=%d\n",count);
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <task_prime+0x70>
     4d0:	0f 92       	push	r0
     4d2:	84 e2       	ldi	r24, 0x24	; 36
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	ed b7       	in	r30, 0x3d	; 61
     4d8:	fe b7       	in	r31, 0x3e	; 62
     4da:	92 83       	std	Z+2, r25	; 0x02
     4dc:	81 83       	std	Z+1, r24	; 0x01
     4de:	f4 82       	std	Z+4, r15	; 0x04
     4e0:	e3 82       	std	Z+3, r14	; 0x03
     4e2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	08 95       	ret

00000500 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     500:	f8 94       	cli
		ch = qi_delete();
     502:	0e 94 a5 05 	call	0xb4a	; 0xb4a <qi_delete>
		sei();
     506:	78 94       	sei
	}while(ch == 0);
     508:	88 23       	and	r24, r24
     50a:	d1 f3       	breq	.-12     	; 0x500 <uart_getchar>

	if (ch == ETX) return -1;
     50c:	84 30       	cpi	r24, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <uart_getchar+0x14>
	else		   return ch;
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     518:	08 95       	ret

0000051a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     51a:	cf 93       	push	r28
     51c:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     51e:	8a 30       	cpi	r24, 0x0A	; 10
     520:	19 f4       	brne	.+6      	; 0x528 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     522:	8d e0       	ldi	r24, 0x0D	; 13
     524:	0e 94 8d 02 	call	0x51a	; 0x51a <uart_putchar>
	cli();
     528:	f8 94       	cli
	if(!uart_busy){
     52a:	80 91 10 04 	lds	r24, 0x0410
     52e:	88 23       	and	r24, r24
     530:	59 f4       	brne	.+22     	; 0x548 <uart_putchar+0x2e>
		UDR0 = ch;
     532:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 10 04 	sts	0x0410, r24
     53c:	0a c0       	rjmp	.+20     	; 0x552 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     53e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     540:	86 ef       	ldi	r24, 0xF6	; 246
     542:	8a 95       	dec	r24
     544:	f1 f7       	brne	.-4      	; 0x542 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     546:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     548:	8c 2f       	mov	r24, r28
     54a:	0e 94 c2 05 	call	0xb84	; 0xb84 <qo_insert>
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	b1 f3       	breq	.-20     	; 0x53e <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     552:	78 94       	sei
	return 1;
}
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     55c:	8d e4       	ldi	r24, 0x4D	; 77
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	90 93 c2 06 	sts	0x06C2, r25
     564:	80 93 c1 06 	sts	0x06C1, r24
	stdout = &Mystdout;
     568:	8b e5       	ldi	r24, 0x5B	; 91
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	90 93 c4 06 	sts	0x06C4, r25
     570:	80 93 c3 06 	sts	0x06C3, r24
	uart_busy = 0;
     574:	10 92 10 04 	sts	0x0410, r1
	q_init();
     578:	0e 94 72 05 	call	0xae4	; 0xae4 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     57c:	10 92 c5 00 	sts	0x00C5, r1
     580:	87 e0       	ldi	r24, 0x07	; 7
     582:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     586:	e0 ec       	ldi	r30, 0xC0	; 192
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	82 60       	ori	r24, 0x02	; 2
     58e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     590:	e1 ec       	ldi	r30, 0xC1	; 193
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	88 60       	ori	r24, 0x08	; 8
     598:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     59a:	80 81       	ld	r24, Z
     59c:	80 64       	ori	r24, 0x40	; 64
     59e:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     5a0:	80 81       	ld	r24, Z
     5a2:	80 61       	ori	r24, 0x10	; 16
     5a4:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     5a6:	80 81       	ld	r24, Z
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	80 83       	st	Z, r24
}
     5ac:	08 95       	ret

000005ae <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     5ae:	cf 93       	push	r28
     5b0:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     5b2:	8a 30       	cpi	r24, 0x0A	; 10
     5b4:	19 f4       	brne	.+6      	; 0x5bc <uart_echo+0xe>
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uart_echo>
	if(!uart_busy){
     5bc:	80 91 10 04 	lds	r24, 0x0410
     5c0:	88 23       	and	r24, r24
     5c2:	31 f4       	brne	.+12     	; 0x5d0 <uart_echo+0x22>
		UDR0 = ch;
     5c4:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 10 04 	sts	0x0410, r24
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     5d0:	8c 2f       	mov	r24, r28
     5d2:	0e 94 c2 05 	call	0xb84	; 0xb84 <qo_insert>
}
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <__vector_25>:
ISR(USART0_RX_vect)
{
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	0b b6       	in	r0, 0x3b	; 59
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	1f 93       	push	r17
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2a 97       	sbiw	r28, 0x0a	; 10
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     610:	10 91 c6 00 	lds	r17, 0x00C6
	if(ch != ETX) {
     614:	14 30       	cpi	r17, 0x04	; 4
     616:	31 f0       	breq	.+12     	; 0x624 <__vector_25+0x4a>
		if(ch == '\r')
     618:	1d 30       	cpi	r17, 0x0D	; 13
     61a:	09 f4       	brne	.+2      	; 0x61e <__vector_25+0x44>
			ch = '\n';
     61c:	1a e0       	ldi	r17, 0x0A	; 10
		uart_echo(ch);
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uart_echo>
	}
	qi_insert(ch);
     624:	81 2f       	mov	r24, r17
     626:	0e 94 83 05 	call	0xb06	; 0xb06 <qi_insert>
	if(ch == ETX || ch == '\n'){
     62a:	14 30       	cpi	r17, 0x04	; 4
     62c:	11 f0       	breq	.+4      	; 0x632 <__vector_25+0x58>
     62e:	1a 30       	cpi	r17, 0x0A	; 10
     630:	71 f4       	brne	.+28     	; 0x64e <__vector_25+0x74>
		task.fun = task_cmd;
     632:	8f e0       	ldi	r24, 0x0F	; 15
     634:	97 e0       	ldi	r25, 0x07	; 7
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     63a:	ce 01       	movw	r24, r28
     63c:	03 96       	adiw	r24, 0x03	; 3
     63e:	69 e4       	ldi	r22, 0x49	; 73
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <strcpy>
		task_insert(&task);
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <task_insert>
	}
}
     64e:	2a 96       	adiw	r28, 0x0a	; 10
     650:	de bf       	out	0x3e, r29	; 62
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	1f 91       	pop	r17
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <__vector_27>:
ISR(USART0_TX_vect)
{
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	0b b6       	in	r0, 0x3b	; 59
     68a:	0f 92       	push	r0
     68c:	11 24       	eor	r1, r1
     68e:	2f 93       	push	r18
     690:	3f 93       	push	r19
     692:	4f 93       	push	r20
     694:	5f 93       	push	r21
     696:	6f 93       	push	r22
     698:	7f 93       	push	r23
     69a:	8f 93       	push	r24
     69c:	9f 93       	push	r25
     69e:	af 93       	push	r26
     6a0:	bf 93       	push	r27
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     6a6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <qo_delete>
     6aa:	88 23       	and	r24, r24
     6ac:	19 f4       	brne	.+6      	; 0x6b4 <__vector_27+0x34>
		uart_busy = 0;
     6ae:	10 92 10 04 	sts	0x0410, r1
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_27+0x38>
	else
		UDR0 = ch;
     6b4:	80 93 c6 00 	sts	0x00C6, r24
}
     6b8:	ff 91       	pop	r31
     6ba:	ef 91       	pop	r30
     6bc:	bf 91       	pop	r27
     6be:	af 91       	pop	r26
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	7f 91       	pop	r23
     6c6:	6f 91       	pop	r22
     6c8:	5f 91       	pop	r21
     6ca:	4f 91       	pop	r20
     6cc:	3f 91       	pop	r19
     6ce:	2f 91       	pop	r18
     6d0:	0f 90       	pop	r0
     6d2:	0b be       	out	0x3b, r0	; 59
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_29>:
ISR(ADC_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	0b b6       	in	r0, 0x3b	; 59
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	ef 93       	push	r30
     702:	ff 93       	push	r31
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	2a 97       	sbiw	r28, 0x0a	; 10
     70e:	de bf       	out	0x3e, r29	; 62
     710:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint16_t data;

	data = ADCW & 0x03ff;
     712:	80 91 78 00 	lds	r24, 0x0078
     716:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA,ADEN);
     71a:	ea e7       	ldi	r30, 0x7A	; 122
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	20 81       	ld	r18, Z
     720:	2f 77       	andi	r18, 0x7F	; 127
     722:	20 83       	st	Z, r18

	task.fun = (void (*)(void *))task_tc1047a;
     724:	2c e5       	ldi	r18, 0x5C	; 92
     726:	36 e0       	ldi	r19, 0x06	; 6
     728:	3a 83       	std	Y+2, r19	; 0x02
     72a:	29 83       	std	Y+1, r18	; 0x01
	sprintf(task.arg, "%d",data);
     72c:	00 d0       	rcall	.+0      	; 0x72e <__vector_29+0x50>
     72e:	00 d0       	rcall	.+0      	; 0x730 <__vector_29+0x52>
     730:	ed b7       	in	r30, 0x3d	; 61
     732:	fe b7       	in	r31, 0x3e	; 62
     734:	31 96       	adiw	r30, 0x01	; 1
     736:	9e 01       	movw	r18, r28
     738:	2d 5f       	subi	r18, 0xFD	; 253
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
     73c:	ad b7       	in	r26, 0x3d	; 61
     73e:	be b7       	in	r27, 0x3e	; 62
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	3c 93       	st	X, r19
     744:	2e 93       	st	-X, r18
     746:	11 97       	sbiw	r26, 0x01	; 1
     748:	2a e4       	ldi	r18, 0x4A	; 74
     74a:	32 e0       	ldi	r19, 0x02	; 2
     74c:	33 83       	std	Z+3, r19	; 0x03
     74e:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	struct task task;
	uint16_t data;

	data = ADCW & 0x03ff;
     750:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA,ADEN);

	task.fun = (void (*)(void *))task_tc1047a;
	sprintf(task.arg, "%d",data);
     752:	95 83       	std	Z+5, r25	; 0x05
     754:	84 83       	std	Z+4, r24	; 0x04
     756:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <sprintf>

	task_insert(&task);
     75a:	8d b7       	in	r24, 0x3d	; 61
     75c:	9e b7       	in	r25, 0x3e	; 62
     75e:	06 96       	adiw	r24, 0x06	; 6
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	9e bf       	out	0x3e, r25	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	8d bf       	out	0x3d, r24	; 61
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <task_insert>
}
     772:	2a 96       	adiw	r28, 0x0a	; 10
     774:	de bf       	out	0x3e, r29	; 62
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0b be       	out	0x3b, r0	; 59
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <get_timer>:
struct timer *Thead=NULL;
struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     7a2:	8e e0       	ldi	r24, 0x0E	; 14
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <malloc>
	return(tp);
}
     7aa:	08 95       	ret

000007ac <insert_timer>:
		task_insert(&tp->task);
		free_timer(tp);
	}
}
void insert_timer(struct task *tskp, int ms)
{
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	f8 2e       	mov	r15, r24
     7ba:	e9 2e       	mov	r14, r25
     7bc:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     7be:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <get_timer>
     7c2:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     7c4:	dc 01       	movw	r26, r24
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	ef 2d       	mov	r30, r15
     7ca:	fe 2d       	mov	r31, r14
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	81 50       	subi	r24, 0x01	; 1
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <insert_timer+0x22>
	tp->time = ms;
     7d6:	19 83       	std	Y+1, r17	; 0x01
     7d8:	08 83       	st	Y, r16
	if(Thead == NULL){
     7da:	e0 91 09 04 	lds	r30, 0x0409
     7de:	f0 91 0a 04 	lds	r31, 0x040A
     7e2:	30 97       	sbiw	r30, 0x00	; 0
     7e4:	29 f4       	brne	.+10     	; 0x7f0 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     7e6:	d0 93 0a 04 	sts	0x040A, r29
     7ea:	c0 93 09 04 	sts	0x0409, r28
     7ee:	2f c0       	rjmp	.+94     	; 0x84e <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;
	if(Thead == NULL){
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     7fa:	fd 01       	movw	r30, r26
		total += cp->time;
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	28 0f       	add	r18, r24
     802:	39 1f       	adc	r19, r25
		if(total >=ms)
     804:	20 17       	cp	r18, r16
     806:	31 07       	cpc	r19, r17
     808:	34 f4       	brge	.+12     	; 0x816 <insert_timer+0x6a>
	if(Thead == NULL){
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     80a:	a4 85       	ldd	r26, Z+12	; 0x0c
     80c:	b5 85       	ldd	r27, Z+13	; 0x0d
     80e:	af 01       	movw	r20, r30
     810:	10 97       	sbiw	r26, 0x00	; 0
     812:	99 f7       	brne	.-26     	; 0x7fa <insert_timer+0x4e>
     814:	01 c0       	rjmp	.+2      	; 0x818 <insert_timer+0x6c>
		total += cp->time;
		if(total >=ms)
     816:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp ==NULL){
     818:	41 15       	cp	r20, r1
     81a:	51 05       	cpc	r21, r1
     81c:	79 f4       	brne	.+30     	; 0x83c <insert_timer+0x90>
		cp->time -= tp->time;
     81e:	8d 91       	ld	r24, X+
     820:	9c 91       	ld	r25, X
     822:	11 97       	sbiw	r26, 0x01	; 1
     824:	80 1b       	sub	r24, r16
     826:	91 0b       	sbc	r25, r17
     828:	11 96       	adiw	r26, 0x01	; 1
     82a:	9c 93       	st	X, r25
     82c:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     82e:	bd 87       	std	Y+13, r27	; 0x0d
     830:	ac 87       	std	Y+12, r26	; 0x0c
     832:	d0 93 0a 04 	sts	0x040A, r29
     836:	c0 93 09 04 	sts	0x0409, r28
     83a:	24 c0       	rjmp	.+72     	; 0x884 <insert_timer+0xd8>
	}
	else if(cp==NULL){
     83c:	10 97       	sbiw	r26, 0x00	; 0
     83e:	51 f4       	brne	.+20     	; 0x854 <insert_timer+0xa8>
		tp->time -= total;
     840:	02 1b       	sub	r16, r18
     842:	13 0b       	sbc	r17, r19
     844:	19 83       	std	Y+1, r17	; 0x01
     846:	08 83       	st	Y, r16
		pp->link = tp;
     848:	fa 01       	movw	r30, r20
     84a:	d5 87       	std	Z+13, r29	; 0x0d
     84c:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     84e:	1d 86       	std	Y+13, r1	; 0x0d
     850:	1c 86       	std	Y+12, r1	; 0x0c
     852:	18 c0       	rjmp	.+48     	; 0x884 <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     854:	8d 91       	ld	r24, X+
     856:	9c 91       	ld	r25, X
     858:	11 97       	sbiw	r26, 0x01	; 1
     85a:	b9 01       	movw	r22, r18
     85c:	68 1b       	sub	r22, r24
     85e:	79 0b       	sbc	r23, r25
		tp->time -= total;
     860:	98 01       	movw	r18, r16
     862:	26 1b       	sub	r18, r22
     864:	37 0b       	sbc	r19, r23
     866:	39 83       	std	Y+1, r19	; 0x01
     868:	28 83       	st	Y, r18
		cp->time -= tp->time;
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
     870:	82 1b       	sub	r24, r18
     872:	93 0b       	sbc	r25, r19
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	9c 93       	st	X, r25
     878:	8e 93       	st	-X, r24
		pp->link = tp;
     87a:	fa 01       	movw	r30, r20
     87c:	d5 87       	std	Z+13, r29	; 0x0d
     87e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     880:	bd 87       	std	Y+13, r27	; 0x0d
     882:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	08 95       	ret

00000892 <tour_timer>:
void tour_timer()
{
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <putchar>
	for(cp = Thead; cp !=NULL; cp = cp->link){
     8a6:	c0 91 09 04 	lds	r28, 0x0409
     8aa:	d0 91 0a 04 	lds	r29, 0x040A
	}
}
void tour_timer()
{
	struct timer *cp;
	int total = 0;
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
     8b2:	89 e6       	ldi	r24, 0x69	; 105
     8b4:	e8 2e       	mov	r14, r24
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     8ba:	20 c0       	rjmp	.+64     	; 0x8fc <tour_timer+0x6a>
		total+= cp->time;
     8bc:	88 81       	ld	r24, Y
     8be:	99 81       	ldd	r25, Y+1	; 0x01
     8c0:	08 0f       	add	r16, r24
     8c2:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <tour_timer+0x34>
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <tour_timer+0x36>
     8c8:	ed b7       	in	r30, 0x3d	; 61
     8ca:	fe b7       	in	r31, 0x3e	; 62
     8cc:	31 96       	adiw	r30, 0x01	; 1
     8ce:	ad b7       	in	r26, 0x3d	; 61
     8d0:	be b7       	in	r27, 0x3e	; 62
     8d2:	12 96       	adiw	r26, 0x02	; 2
     8d4:	fc 92       	st	X, r15
     8d6:	ee 92       	st	-X, r14
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	93 83       	std	Z+3, r25	; 0x03
     8dc:	82 83       	std	Z+2, r24	; 0x02
     8de:	15 83       	std	Z+5, r17	; 0x05
     8e0:	04 83       	std	Z+4, r16	; 0x04
     8e2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     8e6:	0c 84       	ldd	r0, Y+12	; 0x0c
     8e8:	dd 85       	ldd	r29, Y+13	; 0x0d
     8ea:	c0 2d       	mov	r28, r0
     8ec:	8d b7       	in	r24, 0x3d	; 61
     8ee:	9e b7       	in	r25, 0x3e	; 62
     8f0:	06 96       	adiw	r24, 0x06	; 6
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	9e bf       	out	0x3e, r25	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	8d bf       	out	0x3d, r24	; 61
     8fc:	20 97       	sbiw	r28, 0x00	; 0
     8fe:	f1 f6       	brne	.-68     	; 0x8bc <tour_timer+0x2a>
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <putchar>
}
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	08 95       	ret

00000916 <free_timer>:
void free_timer()
{
	struct timer *cp;

	if(Thead!=NULL){
     916:	80 91 09 04 	lds	r24, 0x0409
     91a:	90 91 0a 04 	lds	r25, 0x040A
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	49 f0       	breq	.+18     	; 0x934 <free_timer+0x1e>
		cp = Thead;
		Thead = cp->link;
     922:	fc 01       	movw	r30, r24
     924:	24 85       	ldd	r18, Z+12	; 0x0c
     926:	35 85       	ldd	r19, Z+13	; 0x0d
     928:	30 93 0a 04 	sts	0x040A, r19
     92c:	20 93 09 04 	sts	0x0409, r18
		free(cp);
     930:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <free>
     934:	08 95       	ret

00000936 <timer_expire>:
	tp = (struct timer *)malloc(sizeof(*tp));
	return(tp);
}

void timer_expire(void)
{
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     93a:	0d c0       	rjmp	.+26     	; 0x956 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     93c:	8c 85       	ldd	r24, Y+12	; 0x0c
     93e:	9d 85       	ldd	r25, Y+13	; 0x0d
     940:	90 93 0a 04 	sts	0x040A, r25
     944:	80 93 09 04 	sts	0x0409, r24

		task_insert(&tp->task);
     948:	ce 01       	movw	r24, r28
     94a:	02 96       	adiw	r24, 0x02	; 2
     94c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <task_insert>
		free_timer(tp);
     950:	ce 01       	movw	r24, r28
     952:	0e 94 8b 04 	call	0x916	; 0x916 <free_timer>

void timer_expire(void)
{
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     956:	c0 91 09 04 	lds	r28, 0x0409
     95a:	d0 91 0a 04 	lds	r29, 0x040A
     95e:	20 97       	sbiw	r28, 0x00	; 0
     960:	21 f0       	breq	.+8      	; 0x96a <timer_expire+0x34>
     962:	88 81       	ld	r24, Y
     964:	99 81       	ldd	r25, Y+1	; 0x01
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	49 f3       	breq	.-46     	; 0x93c <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free_timer(tp);
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <app_timer>:
		Thead = cp->link;
		free(cp);
	}
}
void app_timer(char *ap)
{
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	62 97       	sbiw	r28, 0x12	; 18
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;
	while(1){
		printf(">> ");
     988:	04 e7       	ldi	r16, 0x74	; 116
     98a:	12 e0       	ldi	r17, 0x02	; 2
     98c:	0f 92       	push	r0
     98e:	0f 92       	push	r0
     990:	ed b7       	in	r30, 0x3d	; 61
     992:	fe b7       	in	r31, 0x3e	; 62
     994:	12 83       	std	Z+2, r17	; 0x02
     996:	01 83       	std	Z+1, r16	; 0x01
     998:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	40 91 c1 06 	lds	r20, 0x06C1
     9a4:	50 91 c2 06 	lds	r21, 0x06C2
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	68 e0       	ldi	r22, 0x08	; 8
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <fgets>
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	61 f0       	breq	.+24     	; 0x9d0 <app_timer+0x60>
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     9c0:	bc 01       	movw	r22, r24
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	29 f0       	breq	.+10     	; 0x9d0 <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     9c6:	ce 01       	movw	r24, r28
     9c8:	09 96       	adiw	r24, 0x09	; 9
     9ca:	0e 94 d6 03 	call	0x7ac	; 0x7ac <insert_timer>
	}
     9ce:	de cf       	rjmp	.-68     	; 0x98c <app_timer+0x1c>
	tour_timer();
     9d0:	0e 94 49 04 	call	0x892	; 0x892 <tour_timer>
	free_timer();
     9d4:	0e 94 8b 04 	call	0x916	; 0x916 <free_timer>
}
     9d8:	62 96       	adiw	r28, 0x12	; 18
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <app_time>:
void app_time(char *ap)
{
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	printf("%d : %d\n",Tcount/60,Tcount%60);
     9f2:	80 91 0e 04 	lds	r24, 0x040E
     9f6:	90 91 0f 04 	lds	r25, 0x040F
     9fa:	e0 91 0e 04 	lds	r30, 0x040E
     9fe:	f0 91 0f 04 	lds	r31, 0x040F
     a02:	00 d0       	rcall	.+0      	; 0xa04 <app_time+0x16>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <app_time+0x18>
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	28 e7       	ldi	r18, 0x78	; 120
     a0e:	32 e0       	ldi	r19, 0x02	; 2
     a10:	ad b7       	in	r26, 0x3d	; 61
     a12:	be b7       	in	r27, 0x3e	; 62
     a14:	12 96       	adiw	r26, 0x02	; 2
     a16:	3c 93       	st	X, r19
     a18:	2e 93       	st	-X, r18
     a1a:	11 97       	sbiw	r26, 0x01	; 1
     a1c:	2c e3       	ldi	r18, 0x3C	; 60
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	b9 01       	movw	r22, r18
     a22:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     a26:	7b 83       	std	Y+3, r23	; 0x03
     a28:	6a 83       	std	Y+2, r22	; 0x02
     a2a:	cf 01       	movw	r24, r30
     a2c:	b9 01       	movw	r22, r18
     a2e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     a32:	9d 83       	std	Y+5, r25	; 0x05
     a34:	8c 83       	std	Y+4, r24	; 0x04
     a36:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     a3a:	8d b7       	in	r24, 0x3d	; 61
     a3c:	9e b7       	in	r25, 0x3e	; 62
     a3e:	06 96       	adiw	r24, 0x06	; 6
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	9e bf       	out	0x3e, r25	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	8d bf       	out	0x3d, r24	; 61
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <timer_init>:
void timer_init(){
	TCNT2 = 0;
     a50:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     a54:	e6 eb       	ldi	r30, 0xB6	; 182
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     a5e:	e0 e7       	ldi	r30, 0x70	; 112
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     a68:	e1 eb       	ldi	r30, 0xB1	; 177
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     a72:	80 81       	ld	r24, Z
     a74:	82 60       	ori	r24, 0x02	; 2
     a76:	80 83       	st	Z, r24
}
     a78:	08 95       	ret

00000a7a <__vector_15>:
ISR(TIMER2_OVF_vect)
{
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	0b b6       	in	r0, 0x3b	; 59
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
	if(!Thead)
     aa0:	e0 91 09 04 	lds	r30, 0x0409
     aa4:	f0 91 0a 04 	lds	r31, 0x040A
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	49 f0       	breq	.+18     	; 0xabe <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	80 83       	st	Z, r24
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	11 f4       	brne	.+4      	; 0xabe <__vector_15+0x44>
		timer_expire();
     aba:	0e 94 9b 04 	call	0x936	; 0x936 <timer_expire>
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0b be       	out	0x3b, r0	; 59
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     ae4:	10 92 16 05 	sts	0x0516, r1
     ae8:	10 92 15 05 	sts	0x0515, r1
     aec:	10 92 14 05 	sts	0x0514, r1
     af0:	10 92 13 05 	sts	0x0513, r1
     af4:	10 92 18 05 	sts	0x0518, r1
     af8:	10 92 17 05 	sts	0x0517, r1
     afc:	10 92 12 04 	sts	0x0412, r1
     b00:	10 92 11 04 	sts	0x0411, r1
}
     b04:	08 95       	ret

00000b06 <qi_insert>:
int qi_insert(char ch)
{
     b06:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     b08:	20 91 17 05 	lds	r18, 0x0517
     b0c:	30 91 18 05 	lds	r19, 0x0518
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	c9 01       	movw	r24, r18
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     b1e:	9c 01       	movw	r18, r24
     b20:	80 91 11 04 	lds	r24, 0x0411
     b24:	90 91 12 04 	lds	r25, 0x0412
     b28:	28 17       	cp	r18, r24
     b2a:	39 07       	cpc	r19, r25
     b2c:	59 f0       	breq	.+22     	; 0xb44 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     b2e:	30 93 18 05 	sts	0x0518, r19
     b32:	20 93 17 05 	sts	0x0517, r18
	qi[ri] = ch;
     b36:	27 5e       	subi	r18, 0xE7	; 231
     b38:	3a 4f       	sbci	r19, 0xFA	; 250
     b3a:	f9 01       	movw	r30, r18
     b3c:	40 83       	st	Z, r20
	return 1;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     b48:	08 95       	ret

00000b4a <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     b4a:	80 91 11 04 	lds	r24, 0x0411
     b4e:	90 91 12 04 	lds	r25, 0x0412
     b52:	20 91 17 05 	lds	r18, 0x0517
     b56:	30 91 18 05 	lds	r19, 0x0518
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	79 f0       	breq	.+30     	; 0xb7e <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     b6a:	90 93 12 04 	sts	0x0412, r25
     b6e:	80 93 11 04 	sts	0x0411, r24
	return qi[fi];
     b72:	87 5e       	subi	r24, 0xE7	; 231
     b74:	9a 4f       	sbci	r25, 0xFA	; 250
     b76:	fc 01       	movw	r30, r24
     b78:	80 81       	ld	r24, Z
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     b82:	08 95       	ret

00000b84 <qo_insert>:
int qo_insert(char ch)
{
     b84:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     b86:	20 91 15 05 	lds	r18, 0x0515
     b8a:	30 91 16 05 	lds	r19, 0x0516
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	c9 01       	movw	r24, r18
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     b9c:	9c 01       	movw	r18, r24
     b9e:	80 91 13 05 	lds	r24, 0x0513
     ba2:	90 91 14 05 	lds	r25, 0x0514
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	59 f0       	breq	.+22     	; 0xbc2 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     bac:	30 93 16 05 	sts	0x0516, r19
     bb0:	20 93 15 05 	sts	0x0515, r18
	qo[ro] = ch;
     bb4:	2d 5e       	subi	r18, 0xED	; 237
     bb6:	3b 4f       	sbci	r19, 0xFB	; 251
     bb8:	f9 01       	movw	r30, r18
     bba:	40 83       	st	Z, r20
	return 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     bc6:	08 95       	ret

00000bc8 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     bc8:	80 91 13 05 	lds	r24, 0x0513
     bcc:	90 91 14 05 	lds	r25, 0x0514
     bd0:	20 91 15 05 	lds	r18, 0x0515
     bd4:	30 91 16 05 	lds	r19, 0x0516
     bd8:	28 17       	cp	r18, r24
     bda:	39 07       	cpc	r19, r25
     bdc:	79 f0       	breq	.+30     	; 0xbfc <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	71 e0       	ldi	r23, 0x01	; 1
     be4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     be8:	90 93 14 05 	sts	0x0514, r25
     bec:	80 93 13 05 	sts	0x0513, r24
	return qo[fo];
     bf0:	8d 5e       	subi	r24, 0xED	; 237
     bf2:	9b 4f       	sbci	r25, 0xFB	; 251
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     c00:	08 95       	ret

00000c02 <task_led>:
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
void task_led(char *ap){
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	2a 97       	sbiw	r28, 0x0a	; 10
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static char tag;

	int ms=1024*5;

	if(ap&&*ap) ms = atoi(ap);
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	41 f0       	breq	.+16     	; 0xc2e <task_led+0x2c>
     c1e:	dc 01       	movw	r26, r24
     c20:	2c 91       	ld	r18, X
     c22:	22 23       	and	r18, r18
     c24:	21 f0       	breq	.+8      	; 0xc2e <task_led+0x2c>
     c26:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     c2a:	8c 01       	movw	r16, r24
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <task_led+0x30>
}
void task_led(char *ap){
	struct task task;
	static char tag;

	int ms=1024*5;
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	14 e1       	ldi	r17, 0x14	; 20

	if(ap&&*ap) ms = atoi(ap);
	if(!tag){led_on_all();tag=1;}
     c32:	80 91 0b 04 	lds	r24, 0x040B
     c36:	88 23       	and	r24, r24
     c38:	31 f4       	brne	.+12     	; 0xc46 <task_led+0x44>
     c3a:	0e 94 9c 00 	call	0x138	; 0x138 <led_on_all>
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 0b 04 	sts	0x040B, r24
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <task_led+0x4c>
	else {led_off_all();tag=0;}
     c46:	0e 94 a1 00 	call	0x142	; 0x142 <led_off_all>
     c4a:	10 92 0b 04 	sts	0x040B, r1

	task.fun=(void (*)(void *))task_led;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	96 e0       	ldi	r25, 0x06	; 6
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     c56:	00 d0       	rcall	.+0      	; 0xc58 <task_led+0x56>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <task_led+0x58>
     c5a:	ed b7       	in	r30, 0x3d	; 61
     c5c:	fe b7       	in	r31, 0x3e	; 62
     c5e:	31 96       	adiw	r30, 0x01	; 1
     c60:	ce 01       	movw	r24, r28
     c62:	03 96       	adiw	r24, 0x03	; 3
     c64:	ad b7       	in	r26, 0x3d	; 61
     c66:	be b7       	in	r27, 0x3e	; 62
     c68:	12 96       	adiw	r26, 0x02	; 2
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	81 e8       	ldi	r24, 0x81	; 129
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	93 83       	std	Z+3, r25	; 0x03
     c76:	82 83       	std	Z+2, r24	; 0x02
     c78:	15 83       	std	Z+5, r17	; 0x05
     c7a:	04 83       	std	Z+4, r16	; 0x04
     c7c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <sprintf>
	insert_timer(&task,ms/256);
     c80:	ed b7       	in	r30, 0x3d	; 61
     c82:	fe b7       	in	r31, 0x3e	; 62
     c84:	36 96       	adiw	r30, 0x06	; 6
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	fe bf       	out	0x3e, r31	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	ed bf       	out	0x3d, r30	; 61
     c90:	c8 01       	movw	r24, r16
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	71 e0       	ldi	r23, 0x01	; 1
     c96:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     c9a:	ce 01       	movw	r24, r28
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <insert_timer>
}
     ca2:	2a 96       	adiw	r28, 0x0a	; 10
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <task_tc1047a>:
void task_tc1047a(void *arg)
{
	int value;

	if(!strcmp(arg,""))
     cb8:	fc 01       	movw	r30, r24
     cba:	20 81       	ld	r18, Z
     cbc:	22 23       	and	r18, r18
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <task_tc1047a+0xe>
		adc_start();
     cc0:	0e 94 de 07 	call	0xfbc	; 0xfbc <adc_start>
     cc4:	08 95       	ret
	else{
		value = atoi(arg) * (1.1/1024) *1000;
     cc6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     cca:	9c 01       	movw	r18, r24
     ccc:	b9 01       	movw	r22, r18
     cce:	88 27       	eor	r24, r24
     cd0:	77 fd       	sbrc	r23, 7
     cd2:	80 95       	com	r24
     cd4:	98 2f       	mov	r25, r24
     cd6:	0e 94 ef 08 	call	0x11de	; 0x11de <__floatsisf>
     cda:	2d ec       	ldi	r18, 0xCD	; 205
     cdc:	3c ec       	ldi	r19, 0xCC	; 204
     cde:	4c e8       	ldi	r20, 0x8C	; 140
     ce0:	5a e3       	ldi	r21, 0x3A	; 58
     ce2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__mulsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a e7       	ldi	r20, 0x7A	; 122
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__mulsf3>
     cf2:	0e 94 66 09 	call	0x12cc	; 0x12cc <__fixsfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
		value = (value - 500) /10;
     cfa:	84 5f       	subi	r24, 0xF4	; 244
     cfc:	91 40       	sbci	r25, 0x01	; 1
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <task_tc1047a+0x48>
     d00:	0f 92       	push	r0
     d02:	24 e8       	ldi	r18, 0x84	; 132
     d04:	32 e0       	ldi	r19, 0x02	; 2
     d06:	ed b7       	in	r30, 0x3d	; 61
     d08:	fe b7       	in	r31, 0x3e	; 62
     d0a:	32 83       	std	Z+2, r19	; 0x02
     d0c:	21 83       	std	Z+1, r18	; 0x01

	if(!strcmp(arg,""))
		adc_start();
	else{
		value = atoi(arg) * (1.1/1024) *1000;
		value = (value - 500) /10;
     d0e:	6a e0       	ldi	r22, 0x0A	; 10
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
     d16:	74 83       	std	Z+4, r23	; 0x04
     d18:	63 83       	std	Z+3, r22	; 0x03
     d1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	08 95       	ret

00000d28 <task_init>:
#define ETX 0x04
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     d28:	10 92 1a 06 	sts	0x061A, r1
     d2c:	10 92 19 06 	sts	0x0619, r1
     d30:	10 92 bc 06 	sts	0x06BC, r1
     d34:	10 92 bb 06 	sts	0x06BB, r1
}
     d38:	08 95       	ret

00000d3a <task_insert>:
int task_insert(struct task *tskp){
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	48 2f       	mov	r20, r24
     d40:	e9 2f       	mov	r30, r25
	if((Task_r + 1)% MAX_TASK == Task_f)
     d42:	80 91 19 06 	lds	r24, 0x0619
     d46:	90 91 1a 06 	lds	r25, 0x061A
     d4a:	c0 91 bb 06 	lds	r28, 0x06BB
     d4e:	d0 91 bc 06 	lds	r29, 0x06BC
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	20 e1       	ldi	r18, 0x10	; 16
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	b9 01       	movw	r22, r18
     d5a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     d5e:	8c 17       	cp	r24, r28
     d60:	9d 07       	cpc	r25, r29
     d62:	19 f1       	breq	.+70     	; 0xdaa <task_insert+0x70>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     d64:	80 91 19 06 	lds	r24, 0x0619
     d68:	90 91 1a 06 	lds	r25, 0x061A
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	b9 01       	movw	r22, r18
     d70:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     d74:	90 93 1a 06 	sts	0x061A, r25
     d78:	80 93 19 06 	sts	0x0619, r24
	Task_q[Task_r] = *tskp;
     d7c:	80 91 19 06 	lds	r24, 0x0619
     d80:	90 91 1a 06 	lds	r25, 0x061A
     d84:	dc 01       	movw	r26, r24
     d86:	aa 0f       	add	r26, r26
     d88:	bb 1f       	adc	r27, r27
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	6a 95       	dec	r22
     d92:	e1 f7       	brne	.-8      	; 0xd8c <task_insert+0x52>
     d94:	a8 0f       	add	r26, r24
     d96:	b9 1f       	adc	r27, r25
     d98:	a5 5e       	subi	r26, 0xE5	; 229
     d9a:	b9 4f       	sbci	r27, 0xF9	; 249
     d9c:	c4 2f       	mov	r28, r20
     d9e:	de 2f       	mov	r29, r30
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	09 90       	ld	r0, Y+
     da4:	0d 92       	st	X+, r0
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	e1 f7       	brne	.-8      	; 0xda2 <task_insert+0x68>
	return 0;
}
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <task_delete>:
int task_delete(struct task *tskp){
     db4:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     db6:	40 91 19 06 	lds	r20, 0x0619
     dba:	50 91 1a 06 	lds	r21, 0x061A
     dbe:	80 91 bb 06 	lds	r24, 0x06BB
     dc2:	90 91 bc 06 	lds	r25, 0x06BC
     dc6:	48 17       	cp	r20, r24
     dc8:	59 07       	cpc	r21, r25
     dca:	31 f1       	breq	.+76     	; 0xe18 <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     dcc:	80 91 bb 06 	lds	r24, 0x06BB
     dd0:	90 91 bc 06 	lds	r25, 0x06BC
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	60 e1       	ldi	r22, 0x10	; 16
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     dde:	90 93 bc 06 	sts	0x06BC, r25
     de2:	80 93 bb 06 	sts	0x06BB, r24
	*tskp = Task_q[Task_f];
     de6:	80 91 bb 06 	lds	r24, 0x06BB
     dea:	90 91 bc 06 	lds	r25, 0x06BC
     dee:	fc 01       	movw	r30, r24
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	a3 e0       	ldi	r26, 0x03	; 3
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	aa 95       	dec	r26
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <task_delete+0x42>
     dfe:	e8 0f       	add	r30, r24
     e00:	f9 1f       	adc	r31, r25
     e02:	d9 01       	movw	r26, r18
     e04:	e5 5e       	subi	r30, 0xE5	; 229
     e06:	f9 4f       	sbci	r31, 0xF9	; 249
     e08:	8a e0       	ldi	r24, 0x0A	; 10
     e0a:	01 90       	ld	r0, Z+
     e0c:	0d 92       	st	X+, r0
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	e1 f7       	brne	.-8      	; 0xe0a <task_delete+0x56>
	return 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	08 95       	ret
	Task_q[Task_r] = *tskp;
	return 0;
}
int task_delete(struct task *tskp){
	if(Task_r == Task_f)
		return 0;
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     e1c:	08 95       	ret

00000e1e <task_cmd>:
		value = atoi(arg) * (1.1/1024) *1000;
		value = (value - 500) /10;
		printf("task_tc1047a() : current temperature -> %d degree. \n$ ",value);
	}
}
void task_cmd(void *arg){
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	ca 54       	subi	r28, 0x4A	; 74
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(gets(buf) == NULL)
     e44:	ce 01       	movw	r24, r28
     e46:	0b 96       	adiw	r24, 0x0b	; 11
     e48:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <gets>
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	09 f4       	brne	.+2      	; 0xe52 <task_cmd+0x34>
     e50:	92 c0       	rjmp	.+292    	; 0xf76 <task_cmd+0x158>
	{	printf("$ "); return ;}

	cp0 = strtok(buf, " \t\n\r");
     e52:	ce 01       	movw	r24, r28
     e54:	0b 96       	adiw	r24, 0x0b	; 11
     e56:	6e eb       	ldi	r22, 0xBE	; 190
     e58:	72 e0       	ldi	r23, 0x02	; 2
     e5a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strtok>
     e5e:	7c 01       	movw	r14, r24
	cp1 = strtok(NULL, " \t\n\r");
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	6e eb       	ldi	r22, 0xBE	; 190
     e66:	72 e0       	ldi	r23, 0x02	; 2
     e68:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strtok>
     e6c:	8c 01       	movw	r16, r24
	cp2 = strtok(NULL, " \t\n\r");
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	6e eb       	ldi	r22, 0xBE	; 190
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strtok>
     e7a:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	6e eb       	ldi	r22, 0xBE	; 190
     e82:	72 e0       	ldi	r23, 0x02	; 2
     e84:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strtok>
     e88:	6c 01       	movw	r12, r24

	if(cp0==NULL){
     e8a:	e1 14       	cp	r14, r1
     e8c:	f1 04       	cpc	r15, r1
     e8e:	19 f4       	brne	.+6      	; 0xe96 <task_cmd+0x78>
		printf("!!!-111\n");
     e90:	83 ec       	ldi	r24, 0xC3	; 195
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	6e c0       	rjmp	.+220    	; 0xf72 <task_cmd+0x154>
		printf("$ "); return ;
	}
	if(!strcmp(cp0, "prime")){
     e96:	c7 01       	movw	r24, r14
     e98:	6b ec       	ldi	r22, 0xCB	; 203
     e9a:	72 e0       	ldi	r23, 0x02	; 2
     e9c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strcmp>
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <task_cmd+0x94>
		task_prime(cp1);
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 30 02 	call	0x460	; 0x460 <task_prime>
		task_led(cp1);
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 01 06 	call	0xc02	; 0xc02 <task_led>
     eb0:	62 c0       	rjmp	.+196    	; 0xf76 <task_cmd+0x158>
	}
	else if(!strcmp(cp0, "timer")) {
     eb2:	c7 01       	movw	r24, r14
     eb4:	61 ed       	ldi	r22, 0xD1	; 209
     eb6:	72 e0       	ldi	r23, 0x02	; 2
     eb8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strcmp>
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	09 f0       	breq	.+2      	; 0xec2 <task_cmd+0xa4>
     ec0:	4a c0       	rjmp	.+148    	; 0xf56 <task_cmd+0x138>
		if(cp1 == NULL){
     ec2:	01 15       	cp	r16, r1
     ec4:	11 05       	cpc	r17, r1
     ec6:	19 f4       	brne	.+6      	; 0xece <task_cmd+0xb0>
			printf("!!!-222\n");
     ec8:	87 ed       	ldi	r24, 0xD7	; 215
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	52 c0       	rjmp	.+164    	; 0xf72 <task_cmd+0x154>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <atoi>
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__divmodhi4>
     edc:	06 2f       	mov	r16, r22
     ede:	e7 2e       	mov	r14, r23
     ee0:	16 2f       	mov	r17, r22
     ee2:	f7 2e       	mov	r15, r23
		if(!strcmp(cp2, "prime")){
     ee4:	c5 01       	movw	r24, r10
     ee6:	6b ec       	ldi	r22, 0xCB	; 203
     ee8:	72 e0       	ldi	r23, 0x02	; 2
     eea:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strcmp>
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	b9 f4       	brne	.+46     	; 0xf20 <task_cmd+0x102>
			task.fun = (void (*)(void *))task_prime;
     ef2:	80 e3       	ldi	r24, 0x30	; 48
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
			task_led(cp3);
     efa:	c6 01       	movw	r24, r12
     efc:	0e 94 01 06 	call	0xc02	; 0xc02 <task_led>
			if(cp3) strcpy(task.arg, cp3);
     f00:	ce 01       	movw	r24, r28
     f02:	03 96       	adiw	r24, 0x03	; 3
     f04:	c1 14       	cp	r12, r1
     f06:	d1 04       	cpc	r13, r1
     f08:	11 f0       	breq	.+4      	; 0xf0e <task_cmd+0xf0>
     f0a:	b6 01       	movw	r22, r12
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <task_cmd+0xf4>
			else strcpy(task.arg, "");
     f0e:	6f ed       	ldi	r22, 0xDF	; 223
     f10:	72 e0       	ldi	r23, 0x02	; 2
     f12:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <strcpy>
			insert_timer(&task,ms);
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	61 2f       	mov	r22, r17
     f1c:	7f 2d       	mov	r23, r15
     f1e:	15 c0       	rjmp	.+42     	; 0xf4a <task_cmd+0x12c>
		}else if(!strcmp(cp2, "tc1047a")){
     f20:	c5 01       	movw	r24, r10
     f22:	60 ee       	ldi	r22, 0xE0	; 224
     f24:	72 e0       	ldi	r23, 0x02	; 2
     f26:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strcmp>
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	89 f4       	brne	.+34     	; 0xf50 <task_cmd+0x132>
			task.fun = (void (*)(void *))task_tc1047a;
     f2e:	8c e5       	ldi	r24, 0x5C	; 92
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
			strcpy(task.arg,"");
     f36:	ce 01       	movw	r24, r28
     f38:	03 96       	adiw	r24, 0x03	; 3
     f3a:	6f ed       	ldi	r22, 0xDF	; 223
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <strcpy>
			insert_timer(&task,ms);
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	60 2f       	mov	r22, r16
     f48:	7e 2d       	mov	r23, r14
     f4a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <insert_timer>
     f4e:	13 c0       	rjmp	.+38     	; 0xf76 <task_cmd+0x158>
		}
		else printf("!!!-333\n");	
     f50:	88 ee       	ldi	r24, 0xE8	; 232
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <task_cmd+0x154>
	}
	else if(!strcmp(cp0, "tc1047a")){
     f56:	c7 01       	movw	r24, r14
     f58:	60 ee       	ldi	r22, 0xE0	; 224
     f5a:	72 e0       	ldi	r23, 0x02	; 2
     f5c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <strcmp>
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	29 f4       	brne	.+10     	; 0xf6e <task_cmd+0x150>
	 	task_tc1047a("");
     f64:	8f ed       	ldi	r24, 0xDF	; 223
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <task_tc1047a>
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <task_cmd+0x158>
	}else {
		printf("!!!-444\n");
     f6e:	80 ef       	ldi	r24, 0xF0	; 240
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <puts>
	}
	printf("$ ");
     f76:	0f 92       	push	r0
     f78:	0f 92       	push	r0
     f7a:	8b eb       	ldi	r24, 0xBB	; 187
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	ed b7       	in	r30, 0x3d	; 61
     f80:	fe b7       	in	r31, 0x3e	; 62
     f82:	92 83       	std	Z+2, r25	; 0x02
     f84:	81 83       	std	Z+1, r24	; 0x01
     f86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0

}
     f8e:	c6 5b       	subi	r28, 0xB6	; 182
     f90:	df 4f       	sbci	r29, 0xFF	; 255
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	08 95       	ret

00000fb2 <adc_init>:
#include<avr/interrupt.h>
#include<compat/deprecated.h>
#include<util/delay.h>
void adc_init()
{
	cbi(DDRF, PF0);
     fb2:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	80 93 7c 00 	sts	0x007C, r24
}
     fba:	08 95       	ret

00000fbc <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     fbc:	ea e7       	ldi	r30, 0x7A	; 122
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	80 83       	st	Z, r24
     fc6:	8d ed       	ldi	r24, 0xDD	; 221
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA,ADIE);
     fce:	80 81       	ld	r24, Z
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	80 83       	st	Z, r24
	sbi(ADCSRA,ADSC);
     fd4:	80 81       	ld	r24, Z
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	80 83       	st	Z, r24
}
     fda:	08 95       	ret

00000fdc <__mulsf3>:
     fdc:	a0 e2       	ldi	r26, 0x20	; 32
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 ef       	ldi	r30, 0xF4	; 244
     fe2:	f7 e0       	ldi	r31, 0x07	; 7
     fe4:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__prologue_saves__+0x4>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	af 83       	std	Y+7, r26	; 0x07
     ff2:	b8 87       	std	Y+8, r27	; 0x08
     ff4:	29 83       	std	Y+1, r18	; 0x01
     ff6:	3a 83       	std	Y+2, r19	; 0x02
     ff8:	4b 83       	std	Y+3, r20	; 0x03
     ffa:	5c 83       	std	Y+4, r21	; 0x04
     ffc:	ce 01       	movw	r24, r28
     ffe:	05 96       	adiw	r24, 0x05	; 5
    1000:	be 01       	movw	r22, r28
    1002:	67 5e       	subi	r22, 0xE7	; 231
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__unpack_f>
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	be 01       	movw	r22, r28
    1010:	6f 5e       	subi	r22, 0xEF	; 239
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__unpack_f>
    1018:	99 8d       	ldd	r25, Y+25	; 0x19
    101a:	92 30       	cpi	r25, 0x02	; 2
    101c:	78 f0       	brcs	.+30     	; 0x103c <__mulsf3+0x60>
    101e:	89 89       	ldd	r24, Y+17	; 0x11
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	c0 f0       	brcs	.+48     	; 0x1054 <__mulsf3+0x78>
    1024:	94 30       	cpi	r25, 0x04	; 4
    1026:	19 f4       	brne	.+6      	; 0x102e <__mulsf3+0x52>
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	41 f4       	brne	.+16     	; 0x103c <__mulsf3+0x60>
    102c:	ca c0       	rjmp	.+404    	; 0x11c2 <__mulsf3+0x1e6>
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	19 f4       	brne	.+6      	; 0x1038 <__mulsf3+0x5c>
    1032:	92 30       	cpi	r25, 0x02	; 2
    1034:	79 f4       	brne	.+30     	; 0x1054 <__mulsf3+0x78>
    1036:	c5 c0       	rjmp	.+394    	; 0x11c2 <__mulsf3+0x1e6>
    1038:	92 30       	cpi	r25, 0x02	; 2
    103a:	51 f4       	brne	.+20     	; 0x1050 <__mulsf3+0x74>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1040:	9a 89       	ldd	r25, Y+18	; 0x12
    1042:	29 17       	cp	r18, r25
    1044:	09 f4       	brne	.+2      	; 0x1048 <__mulsf3+0x6c>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	8a 8f       	std	Y+26, r24	; 0x1a
    104a:	ce 01       	movw	r24, r28
    104c:	49 96       	adiw	r24, 0x19	; 25
    104e:	bb c0       	rjmp	.+374    	; 0x11c6 <__mulsf3+0x1ea>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	51 f4       	brne	.+20     	; 0x1068 <__mulsf3+0x8c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1058:	9a 89       	ldd	r25, Y+18	; 0x12
    105a:	29 17       	cp	r18, r25
    105c:	09 f4       	brne	.+2      	; 0x1060 <__mulsf3+0x84>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	8a 8b       	std	Y+18, r24	; 0x12
    1062:	ce 01       	movw	r24, r28
    1064:	41 96       	adiw	r24, 0x11	; 17
    1066:	af c0       	rjmp	.+350    	; 0x11c6 <__mulsf3+0x1ea>
    1068:	4d 8c       	ldd	r4, Y+29	; 0x1d
    106a:	5e 8c       	ldd	r5, Y+30	; 0x1e
    106c:	6f 8c       	ldd	r6, Y+31	; 0x1f
    106e:	78 a0       	lds	r23, 0x88
    1070:	0d 89       	ldd	r16, Y+21	; 0x15
    1072:	1e 89       	ldd	r17, Y+22	; 0x16
    1074:	2f 89       	ldd	r18, Y+23	; 0x17
    1076:	38 8d       	ldd	r19, Y+24	; 0x18
    1078:	e0 e2       	ldi	r30, 0x20	; 32
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	ba 01       	movw	r22, r20
    1082:	88 24       	eor	r8, r8
    1084:	99 24       	eor	r9, r9
    1086:	54 01       	movw	r10, r8
    1088:	cc 24       	eor	r12, r12
    108a:	dd 24       	eor	r13, r13
    108c:	76 01       	movw	r14, r12
    108e:	c2 01       	movw	r24, r4
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	d1 f0       	breq	.+52     	; 0x10cc <__mulsf3+0xf0>
    1098:	c0 0e       	add	r12, r16
    109a:	d1 1e       	adc	r13, r17
    109c:	e2 1e       	adc	r14, r18
    109e:	f3 1e       	adc	r15, r19
    10a0:	db 01       	movw	r26, r22
    10a2:	ca 01       	movw	r24, r20
    10a4:	88 0d       	add	r24, r8
    10a6:	99 1d       	adc	r25, r9
    10a8:	aa 1d       	adc	r26, r10
    10aa:	bb 1d       	adc	r27, r11
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	c0 16       	cp	r12, r16
    10b6:	d1 06       	cpc	r13, r17
    10b8:	e2 06       	cpc	r14, r18
    10ba:	f3 06       	cpc	r15, r19
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <__mulsf3+0xe8>
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	ba 01       	movw	r22, r20
    10c4:	48 0f       	add	r20, r24
    10c6:	59 1f       	adc	r21, r25
    10c8:	6a 1f       	adc	r22, r26
    10ca:	7b 1f       	adc	r23, r27
    10cc:	88 0c       	add	r8, r8
    10ce:	99 1c       	adc	r9, r9
    10d0:	aa 1c       	adc	r10, r10
    10d2:	bb 1c       	adc	r11, r11
    10d4:	37 ff       	sbrs	r19, 7
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <__mulsf3+0x10c>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a0 e0       	ldi	r26, 0x00	; 0
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	88 2a       	or	r8, r24
    10e2:	99 2a       	or	r9, r25
    10e4:	aa 2a       	or	r10, r26
    10e6:	bb 2a       	or	r11, r27
    10e8:	00 0f       	add	r16, r16
    10ea:	11 1f       	adc	r17, r17
    10ec:	22 1f       	adc	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	76 94       	lsr	r7
    10f2:	67 94       	ror	r6
    10f4:	57 94       	ror	r5
    10f6:	47 94       	ror	r4
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	49 f6       	brne	.-110    	; 0x108e <__mulsf3+0xb2>
    10fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1100:	2b 89       	ldd	r18, Y+19	; 0x13
    1102:	3c 89       	ldd	r19, Y+20	; 0x14
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	02 96       	adiw	r24, 0x02	; 2
    110a:	9c 87       	std	Y+12, r25	; 0x0c
    110c:	8b 87       	std	Y+11, r24	; 0x0b
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1112:	9a 89       	ldd	r25, Y+18	; 0x12
    1114:	29 17       	cp	r18, r25
    1116:	09 f4       	brne	.+2      	; 0x111a <__mulsf3+0x13e>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	8a 87       	std	Y+10, r24	; 0x0a
    111c:	2b 85       	ldd	r18, Y+11	; 0x0b
    111e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1120:	17 c0       	rjmp	.+46     	; 0x1150 <__mulsf3+0x174>
    1122:	ca 01       	movw	r24, r20
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	90 70       	andi	r25, 0x00	; 0
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	61 f0       	breq	.+24     	; 0x1144 <__mulsf3+0x168>
    112c:	f6 94       	lsr	r15
    112e:	e7 94       	ror	r14
    1130:	d7 94       	ror	r13
    1132:	c7 94       	ror	r12
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b0 e8       	ldi	r27, 0x80	; 128
    113c:	c8 2a       	or	r12, r24
    113e:	d9 2a       	or	r13, r25
    1140:	ea 2a       	or	r14, r26
    1142:	fb 2a       	or	r15, r27
    1144:	76 95       	lsr	r23
    1146:	67 95       	ror	r22
    1148:	57 95       	ror	r21
    114a:	47 95       	ror	r20
    114c:	2f 5f       	subi	r18, 0xFF	; 255
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	77 fd       	sbrc	r23, 7
    1152:	e7 cf       	rjmp	.-50     	; 0x1122 <__mulsf3+0x146>
    1154:	c9 01       	movw	r24, r18
    1156:	0b c0       	rjmp	.+22     	; 0x116e <__mulsf3+0x192>
    1158:	44 0f       	add	r20, r20
    115a:	55 1f       	adc	r21, r21
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	f7 fc       	sbrc	r15, 7
    1162:	41 60       	ori	r20, 0x01	; 1
    1164:	cc 0c       	add	r12, r12
    1166:	dd 1c       	adc	r13, r13
    1168:	ee 1c       	adc	r14, r14
    116a:	ff 1c       	adc	r15, r15
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	40 30       	cpi	r20, 0x00	; 0
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	5a 07       	cpc	r21, r26
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	6a 07       	cpc	r22, r26
    1178:	a0 e4       	ldi	r26, 0x40	; 64
    117a:	7a 07       	cpc	r23, r26
    117c:	68 f3       	brcs	.-38     	; 0x1158 <__mulsf3+0x17c>
    117e:	8b 87       	std	Y+11, r24	; 0x0b
    1180:	9c 87       	std	Y+12, r25	; 0x0c
    1182:	db 01       	movw	r26, r22
    1184:	ca 01       	movw	r24, r20
    1186:	8f 77       	andi	r24, 0x7F	; 127
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	a0 70       	andi	r26, 0x00	; 0
    118c:	b0 70       	andi	r27, 0x00	; 0
    118e:	80 34       	cpi	r24, 0x40	; 64
    1190:	91 05       	cpc	r25, r1
    1192:	a1 05       	cpc	r26, r1
    1194:	b1 05       	cpc	r27, r1
    1196:	61 f4       	brne	.+24     	; 0x11b0 <__mulsf3+0x1d4>
    1198:	47 fd       	sbrc	r20, 7
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <__mulsf3+0x1d4>
    119c:	c1 14       	cp	r12, r1
    119e:	d1 04       	cpc	r13, r1
    11a0:	e1 04       	cpc	r14, r1
    11a2:	f1 04       	cpc	r15, r1
    11a4:	29 f0       	breq	.+10     	; 0x11b0 <__mulsf3+0x1d4>
    11a6:	40 5c       	subi	r20, 0xC0	; 192
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	6f 4f       	sbci	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	40 78       	andi	r20, 0x80	; 128
    11b0:	4d 87       	std	Y+13, r20	; 0x0d
    11b2:	5e 87       	std	Y+14, r21	; 0x0e
    11b4:	6f 87       	std	Y+15, r22	; 0x0f
    11b6:	78 8b       	std	Y+16, r23	; 0x10
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 87       	std	Y+9, r24	; 0x09
    11bc:	ce 01       	movw	r24, r28
    11be:	09 96       	adiw	r24, 0x09	; 9
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <__mulsf3+0x1ea>
    11c2:	88 ef       	ldi	r24, 0xF8	; 248
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__pack_f>
    11ca:	46 2f       	mov	r20, r22
    11cc:	57 2f       	mov	r21, r23
    11ce:	68 2f       	mov	r22, r24
    11d0:	79 2f       	mov	r23, r25
    11d2:	cb 01       	movw	r24, r22
    11d4:	ba 01       	movw	r22, r20
    11d6:	a0 96       	adiw	r28, 0x20	; 32
    11d8:	e0 e1       	ldi	r30, 0x10	; 16
    11da:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__epilogue_restores__+0x4>

000011de <__floatsisf>:
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	28 97       	sbiw	r28, 0x08	; 8
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	6b 01       	movw	r12, r22
    11fc:	7c 01       	movw	r14, r24
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	d7 01       	movw	r26, r14
    1204:	c6 01       	movw	r24, r12
    1206:	88 27       	eor	r24, r24
    1208:	b7 fd       	sbrc	r27, 7
    120a:	83 95       	inc	r24
    120c:	99 27       	eor	r25, r25
    120e:	aa 27       	eor	r26, r26
    1210:	bb 27       	eor	r27, r27
    1212:	28 2f       	mov	r18, r24
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	c1 14       	cp	r12, r1
    1218:	d1 04       	cpc	r13, r1
    121a:	e1 04       	cpc	r14, r1
    121c:	f1 04       	cpc	r15, r1
    121e:	19 f4       	brne	.+6      	; 0x1226 <__floatsisf+0x48>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	35 c0       	rjmp	.+106    	; 0x1290 <__floatsisf+0xb2>
    1226:	8e e1       	ldi	r24, 0x1E	; 30
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	22 23       	and	r18, r18
    1230:	89 f0       	breq	.+34     	; 0x1254 <__floatsisf+0x76>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	c8 16       	cp	r12, r24
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	d8 06       	cpc	r13, r24
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	e8 06       	cpc	r14, r24
    123e:	80 e8       	ldi	r24, 0x80	; 128
    1240:	f8 06       	cpc	r15, r24
    1242:	59 f1       	breq	.+86     	; 0x129a <__floatsisf+0xbc>
    1244:	f0 94       	com	r15
    1246:	e0 94       	com	r14
    1248:	d0 94       	com	r13
    124a:	c0 94       	com	r12
    124c:	c1 1c       	adc	r12, r1
    124e:	d1 1c       	adc	r13, r1
    1250:	e1 1c       	adc	r14, r1
    1252:	f1 1c       	adc	r15, r1
    1254:	cd 82       	std	Y+5, r12	; 0x05
    1256:	de 82       	std	Y+6, r13	; 0x06
    1258:	ef 82       	std	Y+7, r14	; 0x07
    125a:	f8 86       	std	Y+8, r15	; 0x08
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	0e 94 b7 09 	call	0x136e	; 0x136e <__clzsi2>
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	18 16       	cp	r1, r24
    1268:	19 06       	cpc	r1, r25
    126a:	94 f4       	brge	.+36     	; 0x1290 <__floatsisf+0xb2>
    126c:	08 2e       	mov	r0, r24
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <__floatsisf+0x9a>
    1270:	cc 0c       	add	r12, r12
    1272:	dd 1c       	adc	r13, r13
    1274:	ee 1c       	adc	r14, r14
    1276:	ff 1c       	adc	r15, r15
    1278:	0a 94       	dec	r0
    127a:	d2 f7       	brpl	.-12     	; 0x1270 <__floatsisf+0x92>
    127c:	cd 82       	std	Y+5, r12	; 0x05
    127e:	de 82       	std	Y+6, r13	; 0x06
    1280:	ef 82       	std	Y+7, r14	; 0x07
    1282:	f8 86       	std	Y+8, r15	; 0x08
    1284:	2e e1       	ldi	r18, 0x1E	; 30
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	28 1b       	sub	r18, r24
    128a:	39 0b       	sbc	r19, r25
    128c:	3c 83       	std	Y+4, r19	; 0x04
    128e:	2b 83       	std	Y+3, r18	; 0x03
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__pack_f>
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <__floatsisf+0xc4>
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	9f ec       	ldi	r25, 0xCF	; 207
    12a2:	38 2f       	mov	r19, r24
    12a4:	29 2f       	mov	r18, r25
    12a6:	86 2f       	mov	r24, r22
    12a8:	97 2f       	mov	r25, r23
    12aa:	a3 2f       	mov	r26, r19
    12ac:	b2 2f       	mov	r27, r18
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	28 96       	adiw	r28, 0x08	; 8
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	08 95       	ret

000012cc <__fixsfsi>:
    12cc:	ac e0       	ldi	r26, 0x0C	; 12
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ec e6       	ldi	r30, 0x6C	; 108
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__prologue_saves__+0x1c>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	ab 83       	std	Y+3, r26	; 0x03
    12e2:	bc 83       	std	Y+4, r27	; 0x04
    12e4:	ce 01       	movw	r24, r28
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	be 01       	movw	r22, r28
    12ea:	6b 5f       	subi	r22, 0xFB	; 251
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__unpack_f>
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	69 f1       	breq	.+90     	; 0x1352 <__fixsfsi+0x86>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	58 f1       	brcs	.+86     	; 0x1352 <__fixsfsi+0x86>
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	39 f0       	breq	.+14     	; 0x130e <__fixsfsi+0x42>
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	38 85       	ldd	r19, Y+8	; 0x08
    1304:	37 fd       	sbrc	r19, 7
    1306:	25 c0       	rjmp	.+74     	; 0x1352 <__fixsfsi+0x86>
    1308:	2f 31       	cpi	r18, 0x1F	; 31
    130a:	31 05       	cpc	r19, r1
    130c:	44 f0       	brlt	.+16     	; 0x131e <__fixsfsi+0x52>
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	88 23       	and	r24, r24
    1312:	19 f1       	breq	.+70     	; 0x135a <__fixsfsi+0x8e>
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e8       	ldi	r19, 0x80	; 128
    131c:	22 c0       	rjmp	.+68     	; 0x1362 <__fixsfsi+0x96>
    131e:	8e e1       	ldi	r24, 0x1E	; 30
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	82 1b       	sub	r24, r18
    1324:	93 0b       	sbc	r25, r19
    1326:	09 85       	ldd	r16, Y+9	; 0x09
    1328:	1a 85       	ldd	r17, Y+10	; 0x0a
    132a:	2b 85       	ldd	r18, Y+11	; 0x0b
    132c:	3c 85       	ldd	r19, Y+12	; 0x0c
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <__fixsfsi+0x6c>
    1330:	36 95       	lsr	r19
    1332:	27 95       	ror	r18
    1334:	17 95       	ror	r17
    1336:	07 95       	ror	r16
    1338:	8a 95       	dec	r24
    133a:	d2 f7       	brpl	.-12     	; 0x1330 <__fixsfsi+0x64>
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	88 23       	and	r24, r24
    1340:	81 f0       	breq	.+32     	; 0x1362 <__fixsfsi+0x96>
    1342:	30 95       	com	r19
    1344:	20 95       	com	r18
    1346:	10 95       	com	r17
    1348:	01 95       	neg	r16
    134a:	1f 4f       	sbci	r17, 0xFF	; 255
    134c:	2f 4f       	sbci	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <__fixsfsi+0x96>
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	98 01       	movw	r18, r16
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <__fixsfsi+0x96>
    135a:	0f ef       	ldi	r16, 0xFF	; 255
    135c:	1f ef       	ldi	r17, 0xFF	; 255
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	3f e7       	ldi	r19, 0x7F	; 127
    1362:	b8 01       	movw	r22, r16
    1364:	c9 01       	movw	r24, r18
    1366:	2c 96       	adiw	r28, 0x0c	; 12
    1368:	e4 e0       	ldi	r30, 0x04	; 4
    136a:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__epilogue_restores__+0x1c>

0000136e <__clzsi2>:
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	8b 01       	movw	r16, r22
    137c:	9c 01       	movw	r18, r24
    137e:	00 30       	cpi	r16, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	18 07       	cpc	r17, r24
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	28 07       	cpc	r18, r24
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	38 07       	cpc	r19, r24
    138c:	50 f4       	brcc	.+20     	; 0x13a2 <__clzsi2+0x34>
    138e:	0f 3f       	cpi	r16, 0xFF	; 255
    1390:	11 05       	cpc	r17, r1
    1392:	21 05       	cpc	r18, r1
    1394:	31 05       	cpc	r19, r1
    1396:	09 f0       	breq	.+2      	; 0x139a <__clzsi2+0x2c>
    1398:	88 f4       	brcc	.+34     	; 0x13bc <__clzsi2+0x4e>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	dc 01       	movw	r26, r24
    13a0:	16 c0       	rjmp	.+44     	; 0x13ce <__clzsi2+0x60>
    13a2:	00 30       	cpi	r16, 0x00	; 0
    13a4:	e0 e0       	ldi	r30, 0x00	; 0
    13a6:	1e 07       	cpc	r17, r30
    13a8:	e0 e0       	ldi	r30, 0x00	; 0
    13aa:	2e 07       	cpc	r18, r30
    13ac:	e1 e0       	ldi	r30, 0x01	; 1
    13ae:	3e 07       	cpc	r19, r30
    13b0:	50 f4       	brcc	.+20     	; 0x13c6 <__clzsi2+0x58>
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e0       	ldi	r26, 0x00	; 0
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <__clzsi2+0x60>
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <__clzsi2+0x60>
    13c6:	88 e1       	ldi	r24, 0x18	; 24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	48 1b       	sub	r20, r24
    13d8:	59 0b       	sbc	r21, r25
    13da:	6a 0b       	sbc	r22, r26
    13dc:	7b 0b       	sbc	r23, r27
    13de:	68 01       	movw	r12, r16
    13e0:	79 01       	movw	r14, r18
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__clzsi2+0x7e>
    13e4:	f6 94       	lsr	r15
    13e6:	e7 94       	ror	r14
    13e8:	d7 94       	ror	r13
    13ea:	c7 94       	ror	r12
    13ec:	8a 95       	dec	r24
    13ee:	d2 f7       	brpl	.-12     	; 0x13e4 <__clzsi2+0x76>
    13f0:	d7 01       	movw	r26, r14
    13f2:	c6 01       	movw	r24, r12
    13f4:	80 50       	subi	r24, 0x00	; 0
    13f6:	9d 4f       	sbci	r25, 0xFD	; 253
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	48 1b       	sub	r20, r24
    13fe:	51 09       	sbc	r21, r1
    1400:	61 09       	sbc	r22, r1
    1402:	71 09       	sbc	r23, r1
    1404:	ca 01       	movw	r24, r20
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	08 95       	ret

00001414 <__pack_f>:
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	dc 01       	movw	r26, r24
    1422:	14 96       	adiw	r26, 0x04	; 4
    1424:	4d 91       	ld	r20, X+
    1426:	5d 91       	ld	r21, X+
    1428:	6d 91       	ld	r22, X+
    142a:	7c 91       	ld	r23, X
    142c:	17 97       	sbiw	r26, 0x07	; 7
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	ec 91       	ld	r30, X
    1432:	11 97       	sbiw	r26, 0x01	; 1
    1434:	8c 91       	ld	r24, X
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	20 f4       	brcc	.+8      	; 0x1442 <__pack_f+0x2e>
    143a:	60 61       	ori	r22, 0x10	; 16
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a5 c0       	rjmp	.+330    	; 0x158c <__pack_f+0x178>
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	09 f4       	brne	.+2      	; 0x1448 <__pack_f+0x34>
    1446:	9d c0       	rjmp	.+314    	; 0x1582 <__pack_f+0x16e>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	09 f4       	brne	.+2      	; 0x144e <__pack_f+0x3a>
    144c:	94 c0       	rjmp	.+296    	; 0x1576 <__pack_f+0x162>
    144e:	41 15       	cp	r20, r1
    1450:	51 05       	cpc	r21, r1
    1452:	61 05       	cpc	r22, r1
    1454:	71 05       	cpc	r23, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <__pack_f+0x46>
    1458:	91 c0       	rjmp	.+290    	; 0x157c <__pack_f+0x168>
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	8d 91       	ld	r24, X+
    145e:	9c 91       	ld	r25, X
    1460:	13 97       	sbiw	r26, 0x03	; 3
    1462:	2f ef       	ldi	r18, 0xFF	; 255
    1464:	82 38       	cpi	r24, 0x82	; 130
    1466:	92 07       	cpc	r25, r18
    1468:	0c f0       	brlt	.+2      	; 0x146c <__pack_f+0x58>
    146a:	59 c0       	rjmp	.+178    	; 0x151e <__pack_f+0x10a>
    146c:	22 e8       	ldi	r18, 0x82	; 130
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	28 1b       	sub	r18, r24
    1472:	39 0b       	sbc	r19, r25
    1474:	2a 31       	cpi	r18, 0x1A	; 26
    1476:	31 05       	cpc	r19, r1
    1478:	64 f5       	brge	.+88     	; 0x14d2 <__pack_f+0xbe>
    147a:	6a 01       	movw	r12, r20
    147c:	7b 01       	movw	r14, r22
    147e:	02 2e       	mov	r0, r18
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__pack_f+0x76>
    1482:	f6 94       	lsr	r15
    1484:	e7 94       	ror	r14
    1486:	d7 94       	ror	r13
    1488:	c7 94       	ror	r12
    148a:	0a 94       	dec	r0
    148c:	d2 f7       	brpl	.-12     	; 0x1482 <__pack_f+0x6e>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <__pack_f+0x8c>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	2a 95       	dec	r18
    14a2:	d2 f7       	brpl	.-12     	; 0x1498 <__pack_f+0x84>
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	a1 09       	sbc	r26, r1
    14a8:	b1 09       	sbc	r27, r1
    14aa:	84 23       	and	r24, r20
    14ac:	95 23       	and	r25, r21
    14ae:	a6 23       	and	r26, r22
    14b0:	b7 23       	and	r27, r23
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	a1 05       	cpc	r26, r1
    14be:	b1 05       	cpc	r27, r1
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <__pack_f+0xb4>
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	ba 01       	movw	r22, r20
    14c8:	4c 29       	or	r20, r12
    14ca:	5d 29       	or	r21, r13
    14cc:	6e 29       	or	r22, r14
    14ce:	7f 29       	or	r23, r15
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <__pack_f+0xc4>
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	ba 01       	movw	r22, r20
    14d8:	db 01       	movw	r26, r22
    14da:	ca 01       	movw	r24, r20
    14dc:	8f 77       	andi	r24, 0x7F	; 127
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	a0 70       	andi	r26, 0x00	; 0
    14e2:	b0 70       	andi	r27, 0x00	; 0
    14e4:	80 34       	cpi	r24, 0x40	; 64
    14e6:	91 05       	cpc	r25, r1
    14e8:	a1 05       	cpc	r26, r1
    14ea:	b1 05       	cpc	r27, r1
    14ec:	39 f4       	brne	.+14     	; 0x14fc <__pack_f+0xe8>
    14ee:	47 ff       	sbrs	r20, 7
    14f0:	09 c0       	rjmp	.+18     	; 0x1504 <__pack_f+0xf0>
    14f2:	40 5c       	subi	r20, 0xC0	; 192
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	6f 4f       	sbci	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__pack_f+0xf0>
    14fc:	41 5c       	subi	r20, 0xC1	; 193
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	6f 4f       	sbci	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	40 30       	cpi	r20, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	52 07       	cpc	r21, r18
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	62 07       	cpc	r22, r18
    1512:	20 e4       	ldi	r18, 0x40	; 64
    1514:	72 07       	cpc	r23, r18
    1516:	38 f5       	brcc	.+78     	; 0x1566 <__pack_f+0x152>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	24 c0       	rjmp	.+72     	; 0x1566 <__pack_f+0x152>
    151e:	80 38       	cpi	r24, 0x80	; 128
    1520:	91 05       	cpc	r25, r1
    1522:	7c f5       	brge	.+94     	; 0x1582 <__pack_f+0x16e>
    1524:	8a 01       	movw	r16, r20
    1526:	9b 01       	movw	r18, r22
    1528:	0f 77       	andi	r16, 0x7F	; 127
    152a:	10 70       	andi	r17, 0x00	; 0
    152c:	20 70       	andi	r18, 0x00	; 0
    152e:	30 70       	andi	r19, 0x00	; 0
    1530:	00 34       	cpi	r16, 0x40	; 64
    1532:	11 05       	cpc	r17, r1
    1534:	21 05       	cpc	r18, r1
    1536:	31 05       	cpc	r19, r1
    1538:	39 f4       	brne	.+14     	; 0x1548 <__pack_f+0x134>
    153a:	47 ff       	sbrs	r20, 7
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <__pack_f+0x13c>
    153e:	40 5c       	subi	r20, 0xC0	; 192
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
    1542:	6f 4f       	sbci	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <__pack_f+0x13c>
    1548:	41 5c       	subi	r20, 0xC1	; 193
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	6f 4f       	sbci	r22, 0xFF	; 255
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	77 fd       	sbrc	r23, 7
    1552:	03 c0       	rjmp	.+6      	; 0x155a <__pack_f+0x146>
    1554:	81 58       	subi	r24, 0x81	; 129
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <__pack_f+0x152>
    155a:	76 95       	lsr	r23
    155c:	67 95       	ror	r22
    155e:	57 95       	ror	r21
    1560:	47 95       	ror	r20
    1562:	80 58       	subi	r24, 0x80	; 128
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	97 e0       	ldi	r25, 0x07	; 7
    1568:	76 95       	lsr	r23
    156a:	67 95       	ror	r22
    156c:	57 95       	ror	r21
    156e:	47 95       	ror	r20
    1570:	9a 95       	dec	r25
    1572:	d1 f7       	brne	.-12     	; 0x1568 <__pack_f+0x154>
    1574:	0b c0       	rjmp	.+22     	; 0x158c <__pack_f+0x178>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <__pack_f+0x172>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	05 c0       	rjmp	.+10     	; 0x158c <__pack_f+0x178>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	ba 01       	movw	r22, r20
    158c:	98 2f       	mov	r25, r24
    158e:	97 95       	ror	r25
    1590:	99 27       	eor	r25, r25
    1592:	97 95       	ror	r25
    1594:	a6 2f       	mov	r26, r22
    1596:	af 77       	andi	r26, 0x7F	; 127
    1598:	e7 95       	ror	r30
    159a:	ee 27       	eor	r30, r30
    159c:	e7 95       	ror	r30
    159e:	86 95       	lsr	r24
    15a0:	3a 2f       	mov	r19, r26
    15a2:	39 2b       	or	r19, r25
    15a4:	28 2f       	mov	r18, r24
    15a6:	2e 2b       	or	r18, r30
    15a8:	84 2f       	mov	r24, r20
    15aa:	95 2f       	mov	r25, r21
    15ac:	a3 2f       	mov	r26, r19
    15ae:	b2 2f       	mov	r27, r18
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	08 95       	ret

000015c2 <__unpack_f>:
    15c2:	dc 01       	movw	r26, r24
    15c4:	fb 01       	movw	r30, r22
    15c6:	4c 91       	ld	r20, X
    15c8:	11 96       	adiw	r26, 0x01	; 1
    15ca:	5c 91       	ld	r21, X
    15cc:	11 97       	sbiw	r26, 0x01	; 1
    15ce:	12 96       	adiw	r26, 0x02	; 2
    15d0:	8c 91       	ld	r24, X
    15d2:	12 97       	sbiw	r26, 0x02	; 2
    15d4:	68 2f       	mov	r22, r24
    15d6:	6f 77       	andi	r22, 0x7F	; 127
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	98 2f       	mov	r25, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	99 27       	eor	r25, r25
    15e0:	99 1f       	adc	r25, r25
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	2c 91       	ld	r18, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	82 2f       	mov	r24, r18
    15ea:	88 0f       	add	r24, r24
    15ec:	89 2b       	or	r24, r25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	22 1f       	adc	r18, r18
    15f2:	22 27       	eor	r18, r18
    15f4:	22 1f       	adc	r18, r18
    15f6:	21 83       	std	Z+1, r18	; 0x01
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	39 f5       	brne	.+78     	; 0x164a <__unpack_f+0x88>
    15fc:	41 15       	cp	r20, r1
    15fe:	51 05       	cpc	r21, r1
    1600:	61 05       	cpc	r22, r1
    1602:	71 05       	cpc	r23, r1
    1604:	11 f4       	brne	.+4      	; 0x160a <__unpack_f+0x48>
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	29 c0       	rjmp	.+82     	; 0x165c <__unpack_f+0x9a>
    160a:	82 e8       	ldi	r24, 0x82	; 130
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	93 83       	std	Z+3, r25	; 0x03
    1610:	82 83       	std	Z+2, r24	; 0x02
    1612:	27 e0       	ldi	r18, 0x07	; 7
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	2a 95       	dec	r18
    161e:	d1 f7       	brne	.-12     	; 0x1614 <__unpack_f+0x52>
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	80 83       	st	Z, r24
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <__unpack_f+0x76>
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	66 1f       	adc	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	93 83       	std	Z+3, r25	; 0x03
    1636:	82 83       	std	Z+2, r24	; 0x02
    1638:	40 30       	cpi	r20, 0x00	; 0
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	58 07       	cpc	r21, r24
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	68 07       	cpc	r22, r24
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	78 07       	cpc	r23, r24
    1646:	78 f3       	brcs	.-34     	; 0x1626 <__unpack_f+0x64>
    1648:	20 c0       	rjmp	.+64     	; 0x168a <__unpack_f+0xc8>
    164a:	8f 3f       	cpi	r24, 0xFF	; 255
    164c:	91 05       	cpc	r25, r1
    164e:	79 f4       	brne	.+30     	; 0x166e <__unpack_f+0xac>
    1650:	41 15       	cp	r20, r1
    1652:	51 05       	cpc	r21, r1
    1654:	61 05       	cpc	r22, r1
    1656:	71 05       	cpc	r23, r1
    1658:	19 f4       	brne	.+6      	; 0x1660 <__unpack_f+0x9e>
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	80 83       	st	Z, r24
    165e:	08 95       	ret
    1660:	64 ff       	sbrs	r22, 4
    1662:	03 c0       	rjmp	.+6      	; 0x166a <__unpack_f+0xa8>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 83       	st	Z, r24
    1668:	10 c0       	rjmp	.+32     	; 0x168a <__unpack_f+0xc8>
    166a:	10 82       	st	Z, r1
    166c:	0e c0       	rjmp	.+28     	; 0x168a <__unpack_f+0xc8>
    166e:	8f 57       	subi	r24, 0x7F	; 127
    1670:	90 40       	sbci	r25, 0x00	; 0
    1672:	93 83       	std	Z+3, r25	; 0x03
    1674:	82 83       	std	Z+2, r24	; 0x02
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	80 83       	st	Z, r24
    167a:	87 e0       	ldi	r24, 0x07	; 7
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	66 1f       	adc	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	8a 95       	dec	r24
    1686:	d1 f7       	brne	.-12     	; 0x167c <__unpack_f+0xba>
    1688:	70 64       	ori	r23, 0x40	; 64
    168a:	44 83       	std	Z+4, r20	; 0x04
    168c:	55 83       	std	Z+5, r21	; 0x05
    168e:	66 83       	std	Z+6, r22	; 0x06
    1690:	77 83       	std	Z+7, r23	; 0x07
    1692:	08 95       	ret

00001694 <main>:
#include"task.h"
#include"uart.h"
#include"led.h"
#include"adc.h"
int main()
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	2a 97       	sbiw	r28, 0x0a	; 10
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	uart_init();
    16a8:	0e 94 ae 02 	call	0x55c	; 0x55c <uart_init>
	task_init();
    16ac:	0e 94 94 06 	call	0xd28	; 0xd28 <task_init>
	timer_init();
    16b0:	0e 94 28 05 	call	0xa50	; 0xa50 <timer_init>
	adc_init();
    16b4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <adc_init>

	led_init();
    16b8:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>

	printf("$ ");
    16bc:	0f 92       	push	r0
    16be:	0f 92       	push	r0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	ed b7       	in	r30, 0x3d	; 61
    16c6:	fe b7       	in	r31, 0x3e	; 62
    16c8:	92 83       	std	Z+2, r25	; 0x02
    16ca:	81 83       	std	Z+1, r24	; 0x01
    16cc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <printf>
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0

	while(1) {
		cli();
    16d4:	f8 94       	cli
		tag = task_delete(&task);
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	0e 94 da 06 	call	0xdb4	; 0xdb4 <task_delete>
		sei();
    16de:	78 94       	sei
		if(tag)
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	c1 f3       	breq	.-16     	; 0x16d4 <main+0x40>
			(*(task.fun))(task.arg);
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	ce 01       	movw	r24, r28
    16ea:	03 96       	adiw	r24, 0x03	; 3
    16ec:	19 95       	eicall
    16ee:	f2 cf       	rjmp	.-28     	; 0x16d4 <main+0x40>

000016f0 <__divmodhi4>:
    16f0:	97 fb       	bst	r25, 7
    16f2:	09 2e       	mov	r0, r25
    16f4:	07 26       	eor	r0, r23
    16f6:	0a d0       	rcall	.+20     	; 0x170c <__divmodhi4_neg1>
    16f8:	77 fd       	sbrc	r23, 7
    16fa:	04 d0       	rcall	.+8      	; 0x1704 <__divmodhi4_neg2>
    16fc:	0c d0       	rcall	.+24     	; 0x1716 <__udivmodhi4>
    16fe:	06 d0       	rcall	.+12     	; 0x170c <__divmodhi4_neg1>
    1700:	00 20       	and	r0, r0
    1702:	1a f4       	brpl	.+6      	; 0x170a <__divmodhi4_exit>

00001704 <__divmodhi4_neg2>:
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255

0000170a <__divmodhi4_exit>:
    170a:	08 95       	ret

0000170c <__divmodhi4_neg1>:
    170c:	f6 f7       	brtc	.-4      	; 0x170a <__divmodhi4_exit>
    170e:	90 95       	com	r25
    1710:	81 95       	neg	r24
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	08 95       	ret

00001716 <__udivmodhi4>:
    1716:	aa 1b       	sub	r26, r26
    1718:	bb 1b       	sub	r27, r27
    171a:	51 e1       	ldi	r21, 0x11	; 17
    171c:	07 c0       	rjmp	.+14     	; 0x172c <__udivmodhi4_ep>

0000171e <__udivmodhi4_loop>:
    171e:	aa 1f       	adc	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	a6 17       	cp	r26, r22
    1724:	b7 07       	cpc	r27, r23
    1726:	10 f0       	brcs	.+4      	; 0x172c <__udivmodhi4_ep>
    1728:	a6 1b       	sub	r26, r22
    172a:	b7 0b       	sbc	r27, r23

0000172c <__udivmodhi4_ep>:
    172c:	88 1f       	adc	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	5a 95       	dec	r21
    1732:	a9 f7       	brne	.-22     	; 0x171e <__udivmodhi4_loop>
    1734:	80 95       	com	r24
    1736:	90 95       	com	r25
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	08 95       	ret

0000173e <__prologue_saves__>:
    173e:	2f 92       	push	r2
    1740:	3f 92       	push	r3
    1742:	4f 92       	push	r4
    1744:	5f 92       	push	r5
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	ca 1b       	sub	r28, r26
    1768:	db 0b       	sbc	r29, r27
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	19 94       	eijmp

00001776 <__epilogue_restores__>:
    1776:	2a 88       	ldd	r2, Y+18	; 0x12
    1778:	39 88       	ldd	r3, Y+17	; 0x11
    177a:	48 88       	ldd	r4, Y+16	; 0x10
    177c:	5f 84       	ldd	r5, Y+15	; 0x0f
    177e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1780:	7d 84       	ldd	r7, Y+13	; 0x0d
    1782:	8c 84       	ldd	r8, Y+12	; 0x0c
    1784:	9b 84       	ldd	r9, Y+11	; 0x0b
    1786:	aa 84       	ldd	r10, Y+10	; 0x0a
    1788:	b9 84       	ldd	r11, Y+9	; 0x09
    178a:	c8 84       	ldd	r12, Y+8	; 0x08
    178c:	df 80       	ldd	r13, Y+7	; 0x07
    178e:	ee 80       	ldd	r14, Y+6	; 0x06
    1790:	fd 80       	ldd	r15, Y+5	; 0x05
    1792:	0c 81       	ldd	r16, Y+4	; 0x04
    1794:	1b 81       	ldd	r17, Y+3	; 0x03
    1796:	aa 81       	ldd	r26, Y+2	; 0x02
    1798:	b9 81       	ldd	r27, Y+1	; 0x01
    179a:	ce 0f       	add	r28, r30
    179c:	d1 1d       	adc	r29, r1
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	ed 01       	movw	r28, r26
    17aa:	08 95       	ret

000017ac <malloc>:
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ac 01       	movw	r20, r24
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	91 05       	cpc	r25, r1
    17b6:	10 f4       	brcc	.+4      	; 0x17bc <malloc+0x10>
    17b8:	42 e0       	ldi	r20, 0x02	; 2
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	e0 91 bf 06 	lds	r30, 0x06BF
    17c0:	f0 91 c0 06 	lds	r31, 0x06C0
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	24 c0       	rjmp	.+72     	; 0x1816 <malloc+0x6a>
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	84 17       	cp	r24, r20
    17d4:	95 07       	cpc	r25, r21
    17d6:	d0 f0       	brcs	.+52     	; 0x180c <malloc+0x60>
    17d8:	84 17       	cp	r24, r20
    17da:	95 07       	cpc	r25, r21
    17dc:	71 f4       	brne	.+28     	; 0x17fa <malloc+0x4e>
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	10 97       	sbiw	r26, 0x00	; 0
    17e4:	29 f0       	breq	.+10     	; 0x17f0 <malloc+0x44>
    17e6:	13 96       	adiw	r26, 0x03	; 3
    17e8:	9c 93       	st	X, r25
    17ea:	8e 93       	st	-X, r24
    17ec:	12 97       	sbiw	r26, 0x02	; 2
    17ee:	2c c0       	rjmp	.+88     	; 0x1848 <malloc+0x9c>
    17f0:	90 93 c0 06 	sts	0x06C0, r25
    17f4:	80 93 bf 06 	sts	0x06BF, r24
    17f8:	27 c0       	rjmp	.+78     	; 0x1848 <malloc+0x9c>
    17fa:	21 15       	cp	r18, r1
    17fc:	31 05       	cpc	r19, r1
    17fe:	19 f0       	breq	.+6      	; 0x1806 <malloc+0x5a>
    1800:	82 17       	cp	r24, r18
    1802:	93 07       	cpc	r25, r19
    1804:	18 f4       	brcc	.+6      	; 0x180c <malloc+0x60>
    1806:	9c 01       	movw	r18, r24
    1808:	bd 01       	movw	r22, r26
    180a:	ef 01       	movw	r28, r30
    180c:	92 81       	ldd	r25, Z+2	; 0x02
    180e:	83 81       	ldd	r24, Z+3	; 0x03
    1810:	df 01       	movw	r26, r30
    1812:	e9 2f       	mov	r30, r25
    1814:	f8 2f       	mov	r31, r24
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	d1 f6       	brne	.-76     	; 0x17ce <malloc+0x22>
    181a:	21 15       	cp	r18, r1
    181c:	31 05       	cpc	r19, r1
    181e:	f9 f0       	breq	.+62     	; 0x185e <malloc+0xb2>
    1820:	c9 01       	movw	r24, r18
    1822:	84 1b       	sub	r24, r20
    1824:	95 0b       	sbc	r25, r21
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	91 05       	cpc	r25, r1
    182a:	80 f4       	brcc	.+32     	; 0x184c <malloc+0xa0>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	61 15       	cp	r22, r1
    1832:	71 05       	cpc	r23, r1
    1834:	21 f0       	breq	.+8      	; 0x183e <malloc+0x92>
    1836:	fb 01       	movw	r30, r22
    1838:	93 83       	std	Z+3, r25	; 0x03
    183a:	82 83       	std	Z+2, r24	; 0x02
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <malloc+0x9a>
    183e:	90 93 c0 06 	sts	0x06C0, r25
    1842:	80 93 bf 06 	sts	0x06BF, r24
    1846:	fe 01       	movw	r30, r28
    1848:	32 96       	adiw	r30, 0x02	; 2
    184a:	42 c0       	rjmp	.+132    	; 0x18d0 <malloc+0x124>
    184c:	fe 01       	movw	r30, r28
    184e:	e8 0f       	add	r30, r24
    1850:	f9 1f       	adc	r31, r25
    1852:	41 93       	st	Z+, r20
    1854:	51 93       	st	Z+, r21
    1856:	02 97       	sbiw	r24, 0x02	; 2
    1858:	99 83       	std	Y+1, r25	; 0x01
    185a:	88 83       	st	Y, r24
    185c:	39 c0       	rjmp	.+114    	; 0x18d0 <malloc+0x124>
    185e:	80 91 bd 06 	lds	r24, 0x06BD
    1862:	90 91 be 06 	lds	r25, 0x06BE
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	41 f4       	brne	.+16     	; 0x187a <malloc+0xce>
    186a:	80 91 02 04 	lds	r24, 0x0402
    186e:	90 91 03 04 	lds	r25, 0x0403
    1872:	90 93 be 06 	sts	0x06BE, r25
    1876:	80 93 bd 06 	sts	0x06BD, r24
    187a:	20 91 00 04 	lds	r18, 0x0400
    187e:	30 91 01 04 	lds	r19, 0x0401
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	41 f4       	brne	.+16     	; 0x1898 <malloc+0xec>
    1888:	2d b7       	in	r18, 0x3d	; 61
    188a:	3e b7       	in	r19, 0x3e	; 62
    188c:	80 91 04 04 	lds	r24, 0x0404
    1890:	90 91 05 04 	lds	r25, 0x0405
    1894:	28 1b       	sub	r18, r24
    1896:	39 0b       	sbc	r19, r25
    1898:	e0 91 bd 06 	lds	r30, 0x06BD
    189c:	f0 91 be 06 	lds	r31, 0x06BE
    18a0:	e2 17       	cp	r30, r18
    18a2:	f3 07       	cpc	r31, r19
    18a4:	98 f4       	brcc	.+38     	; 0x18cc <malloc+0x120>
    18a6:	2e 1b       	sub	r18, r30
    18a8:	3f 0b       	sbc	r19, r31
    18aa:	24 17       	cp	r18, r20
    18ac:	35 07       	cpc	r19, r21
    18ae:	70 f0       	brcs	.+28     	; 0x18cc <malloc+0x120>
    18b0:	ca 01       	movw	r24, r20
    18b2:	02 96       	adiw	r24, 0x02	; 2
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	48 f0       	brcs	.+18     	; 0x18cc <malloc+0x120>
    18ba:	8e 0f       	add	r24, r30
    18bc:	9f 1f       	adc	r25, r31
    18be:	90 93 be 06 	sts	0x06BE, r25
    18c2:	80 93 bd 06 	sts	0x06BD, r24
    18c6:	41 93       	st	Z+, r20
    18c8:	51 93       	st	Z+, r21
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <malloc+0x124>
    18cc:	e0 e0       	ldi	r30, 0x00	; 0
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	cf 01       	movw	r24, r30
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <free>:
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	9c 01       	movw	r18, r24
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <free+0x10>
    18e6:	8c c0       	rjmp	.+280    	; 0x1a00 <free+0x128>
    18e8:	dc 01       	movw	r26, r24
    18ea:	12 97       	sbiw	r26, 0x02	; 2
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	1c 92       	st	X, r1
    18f0:	1e 92       	st	-X, r1
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	60 91 bf 06 	lds	r22, 0x06BF
    18f8:	70 91 c0 06 	lds	r23, 0x06C0
    18fc:	61 15       	cp	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	89 f4       	brne	.+34     	; 0x1924 <free+0x4c>
    1902:	8d 91       	ld	r24, X+
    1904:	9c 91       	ld	r25, X
    1906:	11 97       	sbiw	r26, 0x01	; 1
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	20 91 bd 06 	lds	r18, 0x06BD
    1910:	30 91 be 06 	lds	r19, 0x06BE
    1914:	28 17       	cp	r18, r24
    1916:	39 07       	cpc	r19, r25
    1918:	69 f5       	brne	.+90     	; 0x1974 <free+0x9c>
    191a:	b0 93 be 06 	sts	0x06BE, r27
    191e:	a0 93 bd 06 	sts	0x06BD, r26
    1922:	6e c0       	rjmp	.+220    	; 0x1a00 <free+0x128>
    1924:	fb 01       	movw	r30, r22
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	01 c0       	rjmp	.+2      	; 0x192e <free+0x56>
    192c:	fc 01       	movw	r30, r24
    192e:	ea 17       	cp	r30, r26
    1930:	fb 07       	cpc	r31, r27
    1932:	30 f4       	brcc	.+12     	; 0x1940 <free+0x68>
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	af 01       	movw	r20, r30
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	b9 f7       	brne	.-18     	; 0x192c <free+0x54>
    193e:	1f c0       	rjmp	.+62     	; 0x197e <free+0xa6>
    1940:	e9 01       	movw	r28, r18
    1942:	22 97       	sbiw	r28, 0x02	; 2
    1944:	fb 83       	std	Y+3, r31	; 0x03
    1946:	ea 83       	std	Y+2, r30	; 0x02
    1948:	08 81       	ld	r16, Y
    194a:	19 81       	ldd	r17, Y+1	; 0x01
    194c:	c9 01       	movw	r24, r18
    194e:	80 0f       	add	r24, r16
    1950:	91 1f       	adc	r25, r17
    1952:	8e 17       	cp	r24, r30
    1954:	9f 07       	cpc	r25, r31
    1956:	59 f4       	brne	.+22     	; 0x196e <free+0x96>
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	80 0f       	add	r24, r16
    195e:	91 1f       	adc	r25, r17
    1960:	02 96       	adiw	r24, 0x02	; 2
    1962:	99 83       	std	Y+1, r25	; 0x01
    1964:	88 83       	st	Y, r24
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	9b 83       	std	Y+3, r25	; 0x03
    196c:	8a 83       	std	Y+2, r24	; 0x02
    196e:	41 15       	cp	r20, r1
    1970:	51 05       	cpc	r21, r1
    1972:	29 f4       	brne	.+10     	; 0x197e <free+0xa6>
    1974:	b0 93 c0 06 	sts	0x06C0, r27
    1978:	a0 93 bf 06 	sts	0x06BF, r26
    197c:	41 c0       	rjmp	.+130    	; 0x1a00 <free+0x128>
    197e:	fa 01       	movw	r30, r20
    1980:	b3 83       	std	Z+3, r27	; 0x03
    1982:	a2 83       	std	Z+2, r26	; 0x02
    1984:	c1 91       	ld	r28, Z+
    1986:	d1 91       	ld	r29, Z+
    1988:	ec 0f       	add	r30, r28
    198a:	fd 1f       	adc	r31, r29
    198c:	ae 17       	cp	r26, r30
    198e:	bf 07       	cpc	r27, r31
    1990:	81 f4       	brne	.+32     	; 0x19b2 <free+0xda>
    1992:	f9 01       	movw	r30, r18
    1994:	92 91       	ld	r25, -Z
    1996:	82 91       	ld	r24, -Z
    1998:	8c 0f       	add	r24, r28
    199a:	9d 1f       	adc	r25, r29
    199c:	02 96       	adiw	r24, 0x02	; 2
    199e:	da 01       	movw	r26, r20
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	9c 93       	st	X, r25
    19a4:	8e 93       	st	-X, r24
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	13 96       	adiw	r26, 0x03	; 3
    19ac:	9c 93       	st	X, r25
    19ae:	8e 93       	st	-X, r24
    19b0:	12 97       	sbiw	r26, 0x02	; 2
    19b2:	e0 e0       	ldi	r30, 0x00	; 0
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <free+0xe4>
    19b8:	fb 01       	movw	r30, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	db 01       	movw	r26, r22
    19be:	12 96       	adiw	r26, 0x02	; 2
    19c0:	8d 91       	ld	r24, X+
    19c2:	9c 91       	ld	r25, X
    19c4:	13 97       	sbiw	r26, 0x03	; 3
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	b9 f7       	brne	.-18     	; 0x19b8 <free+0xe0>
    19ca:	cb 01       	movw	r24, r22
    19cc:	02 96       	adiw	r24, 0x02	; 2
    19ce:	2d 91       	ld	r18, X+
    19d0:	3c 91       	ld	r19, X
    19d2:	11 97       	sbiw	r26, 0x01	; 1
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	20 91 bd 06 	lds	r18, 0x06BD
    19dc:	30 91 be 06 	lds	r19, 0x06BE
    19e0:	28 17       	cp	r18, r24
    19e2:	39 07       	cpc	r19, r25
    19e4:	69 f4       	brne	.+26     	; 0x1a00 <free+0x128>
    19e6:	30 97       	sbiw	r30, 0x00	; 0
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <free+0x11c>
    19ea:	10 92 c0 06 	sts	0x06C0, r1
    19ee:	10 92 bf 06 	sts	0x06BF, r1
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <free+0x120>
    19f4:	13 82       	std	Z+3, r1	; 0x03
    19f6:	12 82       	std	Z+2, r1	; 0x02
    19f8:	70 93 be 06 	sts	0x06BE, r23
    19fc:	60 93 bd 06 	sts	0x06BD, r22
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <atoi>:
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	88 27       	eor	r24, r24
    1a0e:	99 27       	eor	r25, r25
    1a10:	e8 94       	clt
    1a12:	21 91       	ld	r18, Z+
    1a14:	20 32       	cpi	r18, 0x20	; 32
    1a16:	e9 f3       	breq	.-6      	; 0x1a12 <atoi+0x8>
    1a18:	29 30       	cpi	r18, 0x09	; 9
    1a1a:	10 f0       	brcs	.+4      	; 0x1a20 <atoi+0x16>
    1a1c:	2e 30       	cpi	r18, 0x0E	; 14
    1a1e:	c8 f3       	brcs	.-14     	; 0x1a12 <atoi+0x8>
    1a20:	2b 32       	cpi	r18, 0x2B	; 43
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <atoi+0x2a>
    1a24:	2d 32       	cpi	r18, 0x2D	; 45
    1a26:	39 f4       	brne	.+14     	; 0x1a36 <atoi+0x2c>
    1a28:	68 94       	set
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <atoi+0x2a>
    1a2c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__mulhi_const_10>
    1a30:	82 0f       	add	r24, r18
    1a32:	91 1d       	adc	r25, r1
    1a34:	21 91       	ld	r18, Z+
    1a36:	20 53       	subi	r18, 0x30	; 48
    1a38:	2a 30       	cpi	r18, 0x0A	; 10
    1a3a:	c0 f3       	brcs	.-16     	; 0x1a2c <atoi+0x22>
    1a3c:	1e f4       	brtc	.+6      	; 0x1a44 <atoi+0x3a>
    1a3e:	90 95       	com	r25
    1a40:	81 95       	neg	r24
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	08 95       	ret

00001a46 <strtok>:
    1a46:	4c e0       	ldi	r20, 0x0C	; 12
    1a48:	54 e0       	ldi	r21, 0x04	; 4
    1a4a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <strtok_r>
    1a4e:	08 95       	ret

00001a50 <strcmp>:
    1a50:	fb 01       	movw	r30, r22
    1a52:	dc 01       	movw	r26, r24
    1a54:	8d 91       	ld	r24, X+
    1a56:	01 90       	ld	r0, Z+
    1a58:	80 19       	sub	r24, r0
    1a5a:	01 10       	cpse	r0, r1
    1a5c:	d9 f3       	breq	.-10     	; 0x1a54 <strcmp+0x4>
    1a5e:	99 0b       	sbc	r25, r25
    1a60:	08 95       	ret

00001a62 <strcpy>:
    1a62:	fb 01       	movw	r30, r22
    1a64:	dc 01       	movw	r26, r24
    1a66:	01 90       	ld	r0, Z+
    1a68:	0d 92       	st	X+, r0
    1a6a:	00 20       	and	r0, r0
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <strcpy+0x4>
    1a6e:	08 95       	ret

00001a70 <strtok_r>:
    1a70:	fa 01       	movw	r30, r20
    1a72:	a1 91       	ld	r26, Z+
    1a74:	b0 81       	ld	r27, Z
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <strtok_r+0x10>
    1a7a:	10 97       	sbiw	r26, 0x00	; 0
    1a7c:	e1 f0       	breq	.+56     	; 0x1ab6 <strtok_r+0x46>
    1a7e:	cd 01       	movw	r24, r26
    1a80:	dc 01       	movw	r26, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0d 90       	ld	r0, X+
    1a86:	00 20       	and	r0, r0
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <strtok_r+0x1e>
    1a8a:	c0 01       	movw	r24, r0
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <strtok_r+0x44>
    1a8e:	fb 01       	movw	r30, r22
    1a90:	21 91       	ld	r18, Z+
    1a92:	22 23       	and	r18, r18
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <strtok_r+0x2c>
    1a96:	20 15       	cp	r18, r0
    1a98:	d9 f7       	brne	.-10     	; 0x1a90 <strtok_r+0x20>
    1a9a:	f3 cf       	rjmp	.-26     	; 0x1a82 <strtok_r+0x12>
    1a9c:	fb 01       	movw	r30, r22
    1a9e:	21 91       	ld	r18, Z+
    1aa0:	20 15       	cp	r18, r0
    1aa2:	19 f4       	brne	.+6      	; 0x1aaa <strtok_r+0x3a>
    1aa4:	1e 92       	st	-X, r1
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	06 c0       	rjmp	.+12     	; 0x1ab6 <strtok_r+0x46>
    1aaa:	22 23       	and	r18, r18
    1aac:	c1 f7       	brne	.-16     	; 0x1a9e <strtok_r+0x2e>
    1aae:	0d 90       	ld	r0, X+
    1ab0:	00 20       	and	r0, r0
    1ab2:	a1 f7       	brne	.-24     	; 0x1a9c <strtok_r+0x2c>
    1ab4:	d0 01       	movw	r26, r0
    1ab6:	fa 01       	movw	r30, r20
    1ab8:	a1 93       	st	Z+, r26
    1aba:	b0 83       	st	Z, r27
    1abc:	08 95       	ret

00001abe <__mulhi_const_10>:
    1abe:	7a e0       	ldi	r23, 0x0A	; 10
    1ac0:	97 9f       	mul	r25, r23
    1ac2:	90 2d       	mov	r25, r0
    1ac4:	87 9f       	mul	r24, r23
    1ac6:	80 2d       	mov	r24, r0
    1ac8:	91 0d       	add	r25, r1
    1aca:	11 24       	eor	r1, r1
    1acc:	08 95       	ret

00001ace <fgets>:
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	8c 01       	movw	r16, r24
    1ae0:	6a 01       	movw	r12, r20
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	80 ff       	sbrs	r24, 0
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <fgets+0x50>
    1aea:	16 16       	cp	r1, r22
    1aec:	17 06       	cpc	r1, r23
    1aee:	bc f4       	brge	.+46     	; 0x1b1e <fgets+0x50>
    1af0:	7b 01       	movw	r14, r22
    1af2:	e8 01       	movw	r28, r16
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <fgets+0x44>
    1af6:	c6 01       	movw	r24, r12
    1af8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <fgetc>
    1afc:	ff ef       	ldi	r31, 0xFF	; 255
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	9f 07       	cpc	r25, r31
    1b02:	69 f0       	breq	.+26     	; 0x1b1e <fgets+0x50>
    1b04:	89 93       	st	Y+, r24
    1b06:	08 94       	sec
    1b08:	e1 08       	sbc	r14, r1
    1b0a:	f1 08       	sbc	r15, r1
    1b0c:	8a 30       	cpi	r24, 0x0A	; 10
    1b0e:	91 05       	cpc	r25, r1
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <fgets+0x4c>
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	e2 16       	cp	r14, r18
    1b16:	f1 04       	cpc	r15, r1
    1b18:	71 f7       	brne	.-36     	; 0x1af6 <fgets+0x28>
    1b1a:	18 82       	st	Y, r1
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <fgets+0x54>
    1b1e:	00 e0       	ldi	r16, 0x00	; 0
    1b20:	10 e0       	ldi	r17, 0x00	; 0
    1b22:	c8 01       	movw	r24, r16
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	08 95       	ret

00001b36 <gets>:
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	8c 01       	movw	r16, r24
    1b40:	e0 91 c1 06 	lds	r30, 0x06C1
    1b44:	f0 91 c2 06 	lds	r31, 0x06C2
    1b48:	83 81       	ldd	r24, Z+3	; 0x03
    1b4a:	80 ff       	sbrs	r24, 0
    1b4c:	12 c0       	rjmp	.+36     	; 0x1b72 <gets+0x3c>
    1b4e:	e8 01       	movw	r28, r16
    1b50:	80 91 c1 06 	lds	r24, 0x06C1
    1b54:	90 91 c2 06 	lds	r25, 0x06C2
    1b58:	0e 94 54 10 	call	0x20a8	; 0x20a8 <fgetc>
    1b5c:	2f ef       	ldi	r18, 0xFF	; 255
    1b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b60:	92 07       	cpc	r25, r18
    1b62:	39 f0       	breq	.+14     	; 0x1b72 <gets+0x3c>
    1b64:	89 93       	st	Y+, r24
    1b66:	8a 30       	cpi	r24, 0x0A	; 10
    1b68:	91 05       	cpc	r25, r1
    1b6a:	91 f7       	brne	.-28     	; 0x1b50 <gets+0x1a>
    1b6c:	21 97       	sbiw	r28, 0x01	; 1
    1b6e:	18 82       	st	Y, r1
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <gets+0x40>
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e0       	ldi	r17, 0x00	; 0
    1b76:	c8 01       	movw	r24, r16
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <printf>:
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	36 96       	adiw	r30, 0x06	; 6
    1b8e:	61 91       	ld	r22, Z+
    1b90:	71 91       	ld	r23, Z+
    1b92:	80 91 c3 06 	lds	r24, 0x06C3
    1b96:	90 91 c4 06 	lds	r25, 0x06C4
    1b9a:	af 01       	movw	r20, r30
    1b9c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <vfprintf>
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <putchar>:
    1ba6:	60 91 c3 06 	lds	r22, 0x06C3
    1baa:	70 91 c4 06 	lds	r23, 0x06C4
    1bae:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1bb2:	08 95       	ret

00001bb4 <puts>:
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	8c 01       	movw	r16, r24
    1bbe:	e0 91 c3 06 	lds	r30, 0x06C3
    1bc2:	f0 91 c4 06 	lds	r31, 0x06C4
    1bc6:	83 81       	ldd	r24, Z+3	; 0x03
    1bc8:	81 ff       	sbrs	r24, 1
    1bca:	1a c0       	rjmp	.+52     	; 0x1c00 <puts+0x4c>
    1bcc:	c0 e0       	ldi	r28, 0x00	; 0
    1bce:	d0 e0       	ldi	r29, 0x00	; 0
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <puts+0x28>
    1bd2:	19 95       	eicall
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <puts+0x28>
    1bd8:	cf ef       	ldi	r28, 0xFF	; 255
    1bda:	df ef       	ldi	r29, 0xFF	; 255
    1bdc:	f8 01       	movw	r30, r16
    1bde:	81 91       	ld	r24, Z+
    1be0:	8f 01       	movw	r16, r30
    1be2:	60 91 c3 06 	lds	r22, 0x06C3
    1be6:	70 91 c4 06 	lds	r23, 0x06C4
    1bea:	db 01       	movw	r26, r22
    1bec:	18 96       	adiw	r26, 0x08	; 8
    1bee:	ed 91       	ld	r30, X+
    1bf0:	fc 91       	ld	r31, X
    1bf2:	19 97       	sbiw	r26, 0x09	; 9
    1bf4:	88 23       	and	r24, r24
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <puts+0x1e>
    1bf8:	8a e0       	ldi	r24, 0x0A	; 10
    1bfa:	19 95       	eicall
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <puts+0x50>
    1c00:	cf ef       	ldi	r28, 0xFF	; 255
    1c02:	df ef       	ldi	r29, 0xFF	; 255
    1c04:	ce 01       	movw	r24, r28
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <sprintf>:
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	0e 89       	ldd	r16, Y+22	; 0x16
    1c2a:	1f 89       	ldd	r17, Y+23	; 0x17
    1c2c:	86 e0       	ldi	r24, 0x06	; 6
    1c2e:	8c 83       	std	Y+4, r24	; 0x04
    1c30:	1a 83       	std	Y+2, r17	; 0x02
    1c32:	09 83       	std	Y+1, r16	; 0x01
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	9f e7       	ldi	r25, 0x7F	; 127
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	ae 01       	movw	r20, r28
    1c3e:	46 5e       	subi	r20, 0xE6	; 230
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	ce 01       	movw	r24, r28
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	68 8d       	ldd	r22, Y+24	; 0x18
    1c48:	79 8d       	ldd	r23, Y+25	; 0x19
    1c4a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <vfprintf>
    1c4e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c50:	f8 85       	ldd	r31, Y+8	; 0x08
    1c52:	e0 0f       	add	r30, r16
    1c54:	f1 1f       	adc	r31, r17
    1c56:	10 82       	st	Z, r1
    1c58:	2e 96       	adiw	r28, 0x0e	; 14
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	08 95       	ret

00001c6e <vfprintf>:
    1c6e:	2f 92       	push	r2
    1c70:	3f 92       	push	r3
    1c72:	4f 92       	push	r4
    1c74:	5f 92       	push	r5
    1c76:	6f 92       	push	r6
    1c78:	7f 92       	push	r7
    1c7a:	8f 92       	push	r8
    1c7c:	9f 92       	push	r9
    1c7e:	af 92       	push	r10
    1c80:	bf 92       	push	r11
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2d 97       	sbiw	r28, 0x0d	; 13
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	3c 01       	movw	r6, r24
    1ca4:	7d 87       	std	Y+13, r23	; 0x0d
    1ca6:	6c 87       	std	Y+12, r22	; 0x0c
    1ca8:	5a 01       	movw	r10, r20
    1caa:	fc 01       	movw	r30, r24
    1cac:	17 82       	std	Z+7, r1	; 0x07
    1cae:	16 82       	std	Z+6, r1	; 0x06
    1cb0:	83 81       	ldd	r24, Z+3	; 0x03
    1cb2:	81 ff       	sbrs	r24, 1
    1cb4:	c8 c1       	rjmp	.+912    	; 0x2046 <vfprintf+0x3d8>
    1cb6:	2e 01       	movw	r4, r28
    1cb8:	08 94       	sec
    1cba:	41 1c       	adc	r4, r1
    1cbc:	51 1c       	adc	r5, r1
    1cbe:	f3 01       	movw	r30, r6
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cc4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cc6:	93 fd       	sbrc	r25, 3
    1cc8:	85 91       	lpm	r24, Z+
    1cca:	93 ff       	sbrs	r25, 3
    1ccc:	81 91       	ld	r24, Z+
    1cce:	fd 87       	std	Y+13, r31	; 0x0d
    1cd0:	ec 87       	std	Y+12, r30	; 0x0c
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <vfprintf+0x6a>
    1cd6:	b3 c1       	rjmp	.+870    	; 0x203e <vfprintf+0x3d0>
    1cd8:	85 32       	cpi	r24, 0x25	; 37
    1cda:	41 f4       	brne	.+16     	; 0x1cec <vfprintf+0x7e>
    1cdc:	93 fd       	sbrc	r25, 3
    1cde:	85 91       	lpm	r24, Z+
    1ce0:	93 ff       	sbrs	r25, 3
    1ce2:	81 91       	ld	r24, Z+
    1ce4:	fd 87       	std	Y+13, r31	; 0x0d
    1ce6:	ec 87       	std	Y+12, r30	; 0x0c
    1ce8:	85 32       	cpi	r24, 0x25	; 37
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <vfprintf+0x88>
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b3 01       	movw	r22, r6
    1cf0:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1cf4:	e4 cf       	rjmp	.-56     	; 0x1cbe <vfprintf+0x50>
    1cf6:	ff 24       	eor	r15, r15
    1cf8:	ee 24       	eor	r14, r14
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	10 32       	cpi	r17, 0x20	; 32
    1cfe:	b0 f4       	brcc	.+44     	; 0x1d2c <vfprintf+0xbe>
    1d00:	8b 32       	cpi	r24, 0x2B	; 43
    1d02:	69 f0       	breq	.+26     	; 0x1d1e <vfprintf+0xb0>
    1d04:	8c 32       	cpi	r24, 0x2C	; 44
    1d06:	28 f4       	brcc	.+10     	; 0x1d12 <vfprintf+0xa4>
    1d08:	80 32       	cpi	r24, 0x20	; 32
    1d0a:	51 f0       	breq	.+20     	; 0x1d20 <vfprintf+0xb2>
    1d0c:	83 32       	cpi	r24, 0x23	; 35
    1d0e:	71 f4       	brne	.+28     	; 0x1d2c <vfprintf+0xbe>
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <vfprintf+0xba>
    1d12:	8d 32       	cpi	r24, 0x2D	; 45
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <vfprintf+0xb6>
    1d16:	80 33       	cpi	r24, 0x30	; 48
    1d18:	49 f4       	brne	.+18     	; 0x1d2c <vfprintf+0xbe>
    1d1a:	11 60       	ori	r17, 0x01	; 1
    1d1c:	2c c0       	rjmp	.+88     	; 0x1d76 <vfprintf+0x108>
    1d1e:	12 60       	ori	r17, 0x02	; 2
    1d20:	14 60       	ori	r17, 0x04	; 4
    1d22:	29 c0       	rjmp	.+82     	; 0x1d76 <vfprintf+0x108>
    1d24:	18 60       	ori	r17, 0x08	; 8
    1d26:	27 c0       	rjmp	.+78     	; 0x1d76 <vfprintf+0x108>
    1d28:	10 61       	ori	r17, 0x10	; 16
    1d2a:	25 c0       	rjmp	.+74     	; 0x1d76 <vfprintf+0x108>
    1d2c:	17 fd       	sbrc	r17, 7
    1d2e:	2e c0       	rjmp	.+92     	; 0x1d8c <vfprintf+0x11e>
    1d30:	28 2f       	mov	r18, r24
    1d32:	20 53       	subi	r18, 0x30	; 48
    1d34:	2a 30       	cpi	r18, 0x0A	; 10
    1d36:	98 f4       	brcc	.+38     	; 0x1d5e <vfprintf+0xf0>
    1d38:	16 ff       	sbrs	r17, 6
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <vfprintf+0xde>
    1d3c:	8f 2d       	mov	r24, r15
    1d3e:	88 0f       	add	r24, r24
    1d40:	f8 2e       	mov	r15, r24
    1d42:	ff 0c       	add	r15, r15
    1d44:	ff 0c       	add	r15, r15
    1d46:	f8 0e       	add	r15, r24
    1d48:	f2 0e       	add	r15, r18
    1d4a:	15 c0       	rjmp	.+42     	; 0x1d76 <vfprintf+0x108>
    1d4c:	8e 2d       	mov	r24, r14
    1d4e:	88 0f       	add	r24, r24
    1d50:	e8 2e       	mov	r14, r24
    1d52:	ee 0c       	add	r14, r14
    1d54:	ee 0c       	add	r14, r14
    1d56:	e8 0e       	add	r14, r24
    1d58:	e2 0e       	add	r14, r18
    1d5a:	10 62       	ori	r17, 0x20	; 32
    1d5c:	0c c0       	rjmp	.+24     	; 0x1d76 <vfprintf+0x108>
    1d5e:	8e 32       	cpi	r24, 0x2E	; 46
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <vfprintf+0xfc>
    1d62:	16 fd       	sbrc	r17, 6
    1d64:	6c c1       	rjmp	.+728    	; 0x203e <vfprintf+0x3d0>
    1d66:	10 64       	ori	r17, 0x40	; 64
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0x108>
    1d6a:	8c 36       	cpi	r24, 0x6C	; 108
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <vfprintf+0x104>
    1d6e:	10 68       	ori	r17, 0x80	; 128
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x108>
    1d72:	88 36       	cpi	r24, 0x68	; 104
    1d74:	59 f4       	brne	.+22     	; 0x1d8c <vfprintf+0x11e>
    1d76:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d78:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d7a:	93 fd       	sbrc	r25, 3
    1d7c:	85 91       	lpm	r24, Z+
    1d7e:	93 ff       	sbrs	r25, 3
    1d80:	81 91       	ld	r24, Z+
    1d82:	fd 87       	std	Y+13, r31	; 0x0d
    1d84:	ec 87       	std	Y+12, r30	; 0x0c
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <vfprintf+0x11e>
    1d8a:	b8 cf       	rjmp	.-144    	; 0x1cfc <vfprintf+0x8e>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	95 54       	subi	r25, 0x45	; 69
    1d90:	93 30       	cpi	r25, 0x03	; 3
    1d92:	18 f0       	brcs	.+6      	; 0x1d9a <vfprintf+0x12c>
    1d94:	90 52       	subi	r25, 0x20	; 32
    1d96:	93 30       	cpi	r25, 0x03	; 3
    1d98:	38 f4       	brcc	.+14     	; 0x1da8 <vfprintf+0x13a>
    1d9a:	24 e0       	ldi	r18, 0x04	; 4
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	a2 0e       	add	r10, r18
    1da0:	b3 1e       	adc	r11, r19
    1da2:	3f e3       	ldi	r19, 0x3F	; 63
    1da4:	39 83       	std	Y+1, r19	; 0x01
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <vfprintf+0x158>
    1da8:	83 36       	cpi	r24, 0x63	; 99
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <vfprintf+0x14a>
    1dac:	83 37       	cpi	r24, 0x73	; 115
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <vfprintf+0x162>
    1db0:	83 35       	cpi	r24, 0x53	; 83
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <vfprintf+0x148>
    1db4:	5a c0       	rjmp	.+180    	; 0x1e6a <vfprintf+0x1fc>
    1db6:	22 c0       	rjmp	.+68     	; 0x1dfc <vfprintf+0x18e>
    1db8:	f5 01       	movw	r30, r10
    1dba:	80 81       	ld	r24, Z
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	22 e0       	ldi	r18, 0x02	; 2
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	a2 0e       	add	r10, r18
    1dc4:	b3 1e       	adc	r11, r19
    1dc6:	21 e0       	ldi	r18, 0x01	; 1
    1dc8:	c2 2e       	mov	r12, r18
    1dca:	d1 2c       	mov	r13, r1
    1dcc:	42 01       	movw	r8, r4
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <vfprintf+0x18a>
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	29 2e       	mov	r2, r25
    1dd4:	31 2c       	mov	r3, r1
    1dd6:	2a 0c       	add	r2, r10
    1dd8:	3b 1c       	adc	r3, r11
    1dda:	f5 01       	movw	r30, r10
    1ddc:	80 80       	ld	r8, Z
    1dde:	91 80       	ldd	r9, Z+1	; 0x01
    1de0:	16 ff       	sbrs	r17, 6
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <vfprintf+0x17c>
    1de4:	6f 2d       	mov	r22, r15
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <vfprintf+0x180>
    1dea:	6f ef       	ldi	r22, 0xFF	; 255
    1dec:	7f ef       	ldi	r23, 0xFF	; 255
    1dee:	c4 01       	movw	r24, r8
    1df0:	0e 94 49 10 	call	0x2092	; 0x2092 <strnlen>
    1df4:	6c 01       	movw	r12, r24
    1df6:	51 01       	movw	r10, r2
    1df8:	1f 77       	andi	r17, 0x7F	; 127
    1dfa:	15 c0       	rjmp	.+42     	; 0x1e26 <vfprintf+0x1b8>
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	28 2e       	mov	r2, r24
    1e00:	31 2c       	mov	r3, r1
    1e02:	2a 0c       	add	r2, r10
    1e04:	3b 1c       	adc	r3, r11
    1e06:	f5 01       	movw	r30, r10
    1e08:	80 80       	ld	r8, Z
    1e0a:	91 80       	ldd	r9, Z+1	; 0x01
    1e0c:	16 ff       	sbrs	r17, 6
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <vfprintf+0x1a8>
    1e10:	6f 2d       	mov	r22, r15
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <vfprintf+0x1ac>
    1e16:	6f ef       	ldi	r22, 0xFF	; 255
    1e18:	7f ef       	ldi	r23, 0xFF	; 255
    1e1a:	c4 01       	movw	r24, r8
    1e1c:	0e 94 3e 10 	call	0x207c	; 0x207c <strnlen_P>
    1e20:	6c 01       	movw	r12, r24
    1e22:	10 68       	ori	r17, 0x80	; 128
    1e24:	51 01       	movw	r10, r2
    1e26:	13 fd       	sbrc	r17, 3
    1e28:	1c c0       	rjmp	.+56     	; 0x1e62 <vfprintf+0x1f4>
    1e2a:	06 c0       	rjmp	.+12     	; 0x1e38 <vfprintf+0x1ca>
    1e2c:	80 e2       	ldi	r24, 0x20	; 32
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	b3 01       	movw	r22, r6
    1e32:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1e36:	ea 94       	dec	r14
    1e38:	8e 2d       	mov	r24, r14
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	c8 16       	cp	r12, r24
    1e3e:	d9 06       	cpc	r13, r25
    1e40:	a8 f3       	brcs	.-22     	; 0x1e2c <vfprintf+0x1be>
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <vfprintf+0x1f4>
    1e44:	f4 01       	movw	r30, r8
    1e46:	17 fd       	sbrc	r17, 7
    1e48:	85 91       	lpm	r24, Z+
    1e4a:	17 ff       	sbrs	r17, 7
    1e4c:	81 91       	ld	r24, Z+
    1e4e:	4f 01       	movw	r8, r30
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	b3 01       	movw	r22, r6
    1e54:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1e58:	e1 10       	cpse	r14, r1
    1e5a:	ea 94       	dec	r14
    1e5c:	08 94       	sec
    1e5e:	c1 08       	sbc	r12, r1
    1e60:	d1 08       	sbc	r13, r1
    1e62:	c1 14       	cp	r12, r1
    1e64:	d1 04       	cpc	r13, r1
    1e66:	71 f7       	brne	.-36     	; 0x1e44 <vfprintf+0x1d6>
    1e68:	e7 c0       	rjmp	.+462    	; 0x2038 <vfprintf+0x3ca>
    1e6a:	84 36       	cpi	r24, 0x64	; 100
    1e6c:	11 f0       	breq	.+4      	; 0x1e72 <vfprintf+0x204>
    1e6e:	89 36       	cpi	r24, 0x69	; 105
    1e70:	51 f5       	brne	.+84     	; 0x1ec6 <vfprintf+0x258>
    1e72:	f5 01       	movw	r30, r10
    1e74:	17 ff       	sbrs	r17, 7
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <vfprintf+0x218>
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	a2 81       	ldd	r26, Z+2	; 0x02
    1e7e:	b3 81       	ldd	r27, Z+3	; 0x03
    1e80:	24 e0       	ldi	r18, 0x04	; 4
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <vfprintf+0x228>
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	aa 27       	eor	r26, r26
    1e8c:	97 fd       	sbrc	r25, 7
    1e8e:	a0 95       	com	r26
    1e90:	ba 2f       	mov	r27, r26
    1e92:	22 e0       	ldi	r18, 0x02	; 2
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	a2 0e       	add	r10, r18
    1e98:	b3 1e       	adc	r11, r19
    1e9a:	01 2f       	mov	r16, r17
    1e9c:	0f 76       	andi	r16, 0x6F	; 111
    1e9e:	b7 ff       	sbrs	r27, 7
    1ea0:	08 c0       	rjmp	.+16     	; 0x1eb2 <vfprintf+0x244>
    1ea2:	b0 95       	com	r27
    1ea4:	a0 95       	com	r26
    1ea6:	90 95       	com	r25
    1ea8:	81 95       	neg	r24
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	af 4f       	sbci	r26, 0xFF	; 255
    1eae:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb0:	00 68       	ori	r16, 0x80	; 128
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	a2 01       	movw	r20, r4
    1eb8:	2a e0       	ldi	r18, 0x0A	; 10
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	0e 94 c0 10 	call	0x2180	; 0x2180 <__ultoa_invert>
    1ec0:	d8 2e       	mov	r13, r24
    1ec2:	d4 18       	sub	r13, r4
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <vfprintf+0x2d6>
    1ec6:	85 37       	cpi	r24, 0x75	; 117
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <vfprintf+0x264>
    1eca:	1f 7e       	andi	r17, 0xEF	; 239
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	20 c0       	rjmp	.+64     	; 0x1f12 <vfprintf+0x2a4>
    1ed2:	19 7f       	andi	r17, 0xF9	; 249
    1ed4:	8f 36       	cpi	r24, 0x6F	; 111
    1ed6:	a9 f0       	breq	.+42     	; 0x1f02 <vfprintf+0x294>
    1ed8:	80 37       	cpi	r24, 0x70	; 112
    1eda:	20 f4       	brcc	.+8      	; 0x1ee4 <vfprintf+0x276>
    1edc:	88 35       	cpi	r24, 0x58	; 88
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <vfprintf+0x274>
    1ee0:	ae c0       	rjmp	.+348    	; 0x203e <vfprintf+0x3d0>
    1ee2:	0b c0       	rjmp	.+22     	; 0x1efa <vfprintf+0x28c>
    1ee4:	80 37       	cpi	r24, 0x70	; 112
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <vfprintf+0x282>
    1ee8:	88 37       	cpi	r24, 0x78	; 120
    1eea:	09 f0       	breq	.+2      	; 0x1eee <vfprintf+0x280>
    1eec:	a8 c0       	rjmp	.+336    	; 0x203e <vfprintf+0x3d0>
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <vfprintf+0x284>
    1ef0:	10 61       	ori	r17, 0x10	; 16
    1ef2:	14 ff       	sbrs	r17, 4
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <vfprintf+0x29a>
    1ef6:	14 60       	ori	r17, 0x04	; 4
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <vfprintf+0x29a>
    1efa:	14 ff       	sbrs	r17, 4
    1efc:	08 c0       	rjmp	.+16     	; 0x1f0e <vfprintf+0x2a0>
    1efe:	16 60       	ori	r17, 0x06	; 6
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <vfprintf+0x2a0>
    1f02:	28 e0       	ldi	r18, 0x08	; 8
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <vfprintf+0x2a4>
    1f08:	20 e1       	ldi	r18, 0x10	; 16
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x2a4>
    1f0e:	20 e1       	ldi	r18, 0x10	; 16
    1f10:	32 e0       	ldi	r19, 0x02	; 2
    1f12:	f5 01       	movw	r30, r10
    1f14:	17 ff       	sbrs	r17, 7
    1f16:	07 c0       	rjmp	.+14     	; 0x1f26 <vfprintf+0x2b8>
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	44 e0       	ldi	r20, 0x04	; 4
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <vfprintf+0x2c4>
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	42 e0       	ldi	r20, 0x02	; 2
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	a4 0e       	add	r10, r20
    1f34:	b5 1e       	adc	r11, r21
    1f36:	a2 01       	movw	r20, r4
    1f38:	0e 94 c0 10 	call	0x2180	; 0x2180 <__ultoa_invert>
    1f3c:	d8 2e       	mov	r13, r24
    1f3e:	d4 18       	sub	r13, r4
    1f40:	01 2f       	mov	r16, r17
    1f42:	0f 77       	andi	r16, 0x7F	; 127
    1f44:	06 ff       	sbrs	r16, 6
    1f46:	09 c0       	rjmp	.+18     	; 0x1f5a <vfprintf+0x2ec>
    1f48:	0e 7f       	andi	r16, 0xFE	; 254
    1f4a:	df 14       	cp	r13, r15
    1f4c:	30 f4       	brcc	.+12     	; 0x1f5a <vfprintf+0x2ec>
    1f4e:	04 ff       	sbrs	r16, 4
    1f50:	06 c0       	rjmp	.+12     	; 0x1f5e <vfprintf+0x2f0>
    1f52:	02 fd       	sbrc	r16, 2
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <vfprintf+0x2f0>
    1f56:	0f 7e       	andi	r16, 0xEF	; 239
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <vfprintf+0x2f0>
    1f5a:	1d 2d       	mov	r17, r13
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <vfprintf+0x2f2>
    1f5e:	1f 2d       	mov	r17, r15
    1f60:	80 2f       	mov	r24, r16
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	04 ff       	sbrs	r16, 4
    1f66:	0c c0       	rjmp	.+24     	; 0x1f80 <vfprintf+0x312>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ed 0d       	add	r30, r13
    1f6c:	f1 1d       	adc	r31, r1
    1f6e:	20 81       	ld	r18, Z
    1f70:	20 33       	cpi	r18, 0x30	; 48
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <vfprintf+0x30a>
    1f74:	09 7e       	andi	r16, 0xE9	; 233
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <vfprintf+0x31c>
    1f78:	02 ff       	sbrs	r16, 2
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <vfprintf+0x31a>
    1f7c:	1e 5f       	subi	r17, 0xFE	; 254
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <vfprintf+0x31c>
    1f80:	86 78       	andi	r24, 0x86	; 134
    1f82:	90 70       	andi	r25, 0x00	; 0
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <vfprintf+0x31c>
    1f88:	1f 5f       	subi	r17, 0xFF	; 255
    1f8a:	80 2e       	mov	r8, r16
    1f8c:	99 24       	eor	r9, r9
    1f8e:	03 fd       	sbrc	r16, 3
    1f90:	12 c0       	rjmp	.+36     	; 0x1fb6 <vfprintf+0x348>
    1f92:	00 ff       	sbrs	r16, 0
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <vfprintf+0x342>
    1f96:	fd 2c       	mov	r15, r13
    1f98:	1e 15       	cp	r17, r14
    1f9a:	50 f4       	brcc	.+20     	; 0x1fb0 <vfprintf+0x342>
    1f9c:	fe 0c       	add	r15, r14
    1f9e:	f1 1a       	sub	r15, r17
    1fa0:	1e 2d       	mov	r17, r14
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <vfprintf+0x342>
    1fa4:	80 e2       	ldi	r24, 0x20	; 32
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	b3 01       	movw	r22, r6
    1faa:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1fae:	1f 5f       	subi	r17, 0xFF	; 255
    1fb0:	1e 15       	cp	r17, r14
    1fb2:	c0 f3       	brcs	.-16     	; 0x1fa4 <vfprintf+0x336>
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <vfprintf+0x350>
    1fb6:	1e 15       	cp	r17, r14
    1fb8:	10 f4       	brcc	.+4      	; 0x1fbe <vfprintf+0x350>
    1fba:	e1 1a       	sub	r14, r17
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <vfprintf+0x352>
    1fbe:	ee 24       	eor	r14, r14
    1fc0:	84 fe       	sbrs	r8, 4
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <vfprintf+0x374>
    1fc4:	80 e3       	ldi	r24, 0x30	; 48
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	b3 01       	movw	r22, r6
    1fca:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    1fce:	82 fe       	sbrs	r8, 2
    1fd0:	1f c0       	rjmp	.+62     	; 0x2010 <vfprintf+0x3a2>
    1fd2:	81 fe       	sbrs	r8, 1
    1fd4:	03 c0       	rjmp	.+6      	; 0x1fdc <vfprintf+0x36e>
    1fd6:	88 e5       	ldi	r24, 0x58	; 88
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	10 c0       	rjmp	.+32     	; 0x1ffc <vfprintf+0x38e>
    1fdc:	88 e7       	ldi	r24, 0x78	; 120
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0d c0       	rjmp	.+26     	; 0x1ffc <vfprintf+0x38e>
    1fe2:	c4 01       	movw	r24, r8
    1fe4:	86 78       	andi	r24, 0x86	; 134
    1fe6:	90 70       	andi	r25, 0x00	; 0
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	91 f0       	breq	.+36     	; 0x2010 <vfprintf+0x3a2>
    1fec:	81 fc       	sbrc	r8, 1
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0x386>
    1ff0:	80 e2       	ldi	r24, 0x20	; 32
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <vfprintf+0x388>
    1ff4:	8b e2       	ldi	r24, 0x2B	; 43
    1ff6:	07 fd       	sbrc	r16, 7
    1ff8:	8d e2       	ldi	r24, 0x2D	; 45
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	b3 01       	movw	r22, r6
    1ffe:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0x3a2>
    2004:	80 e3       	ldi	r24, 0x30	; 48
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	b3 01       	movw	r22, r6
    200a:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    200e:	fa 94       	dec	r15
    2010:	df 14       	cp	r13, r15
    2012:	c0 f3       	brcs	.-16     	; 0x2004 <vfprintf+0x396>
    2014:	da 94       	dec	r13
    2016:	f2 01       	movw	r30, r4
    2018:	ed 0d       	add	r30, r13
    201a:	f1 1d       	adc	r31, r1
    201c:	80 81       	ld	r24, Z
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	b3 01       	movw	r22, r6
    2022:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    2026:	dd 20       	and	r13, r13
    2028:	a9 f7       	brne	.-22     	; 0x2014 <vfprintf+0x3a6>
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <vfprintf+0x3ca>
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	b3 01       	movw	r22, r6
    2032:	0e 94 94 10 	call	0x2128	; 0x2128 <fputc>
    2036:	ea 94       	dec	r14
    2038:	ee 20       	and	r14, r14
    203a:	c1 f7       	brne	.-16     	; 0x202c <vfprintf+0x3be>
    203c:	40 ce       	rjmp	.-896    	; 0x1cbe <vfprintf+0x50>
    203e:	f3 01       	movw	r30, r6
    2040:	86 81       	ldd	r24, Z+6	; 0x06
    2042:	97 81       	ldd	r25, Z+7	; 0x07
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0x3dc>
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	2d 96       	adiw	r28, 0x0d	; 13
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	9f 90       	pop	r9
    206c:	8f 90       	pop	r8
    206e:	7f 90       	pop	r7
    2070:	6f 90       	pop	r6
    2072:	5f 90       	pop	r5
    2074:	4f 90       	pop	r4
    2076:	3f 90       	pop	r3
    2078:	2f 90       	pop	r2
    207a:	08 95       	ret

0000207c <strnlen_P>:
    207c:	fc 01       	movw	r30, r24
    207e:	05 90       	lpm	r0, Z+
    2080:	61 50       	subi	r22, 0x01	; 1
    2082:	70 40       	sbci	r23, 0x00	; 0
    2084:	01 10       	cpse	r0, r1
    2086:	d8 f7       	brcc	.-10     	; 0x207e <strnlen_P+0x2>
    2088:	80 95       	com	r24
    208a:	90 95       	com	r25
    208c:	8e 0f       	add	r24, r30
    208e:	9f 1f       	adc	r25, r31
    2090:	08 95       	ret

00002092 <strnlen>:
    2092:	fc 01       	movw	r30, r24
    2094:	61 50       	subi	r22, 0x01	; 1
    2096:	70 40       	sbci	r23, 0x00	; 0
    2098:	01 90       	ld	r0, Z+
    209a:	01 10       	cpse	r0, r1
    209c:	d8 f7       	brcc	.-10     	; 0x2094 <strnlen+0x2>
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	8e 0f       	add	r24, r30
    20a4:	9f 1f       	adc	r25, r31
    20a6:	08 95       	ret

000020a8 <fgetc>:
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	ec 01       	movw	r28, r24
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	20 ff       	sbrs	r18, 0
    20b2:	35 c0       	rjmp	.+106    	; 0x211e <fgetc+0x76>
    20b4:	26 ff       	sbrs	r18, 6
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <fgetc+0x22>
    20b8:	2f 7b       	andi	r18, 0xBF	; 191
    20ba:	2b 83       	std	Y+3, r18	; 0x03
    20bc:	8e 81       	ldd	r24, Y+6	; 0x06
    20be:	9f 81       	ldd	r25, Y+7	; 0x07
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	9f 83       	std	Y+7, r25	; 0x07
    20c4:	8e 83       	std	Y+6, r24	; 0x06
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 c0       	rjmp	.+80     	; 0x211a <fgetc+0x72>
    20ca:	22 ff       	sbrs	r18, 2
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <fgetc+0x44>
    20ce:	e8 81       	ld	r30, Y
    20d0:	f9 81       	ldd	r31, Y+1	; 0x01
    20d2:	80 81       	ld	r24, Z
    20d4:	99 27       	eor	r25, r25
    20d6:	87 fd       	sbrc	r24, 7
    20d8:	90 95       	com	r25
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	19 f4       	brne	.+6      	; 0x20e4 <fgetc+0x3c>
    20de:	20 62       	ori	r18, 0x20	; 32
    20e0:	2b 83       	std	Y+3, r18	; 0x03
    20e2:	1d c0       	rjmp	.+58     	; 0x211e <fgetc+0x76>
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	f9 83       	std	Y+1, r31	; 0x01
    20e8:	e8 83       	st	Y, r30
    20ea:	11 c0       	rjmp	.+34     	; 0x210e <fgetc+0x66>
    20ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    20ee:	fb 85       	ldd	r31, Y+11	; 0x0b
    20f0:	ce 01       	movw	r24, r28
    20f2:	19 95       	eicall
    20f4:	97 ff       	sbrs	r25, 7
    20f6:	0b c0       	rjmp	.+22     	; 0x210e <fgetc+0x66>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	8f 3f       	cpi	r24, 0xFF	; 255
    20fe:	93 07       	cpc	r25, r19
    2100:	11 f4       	brne	.+4      	; 0x2106 <fgetc+0x5e>
    2102:	80 e1       	ldi	r24, 0x10	; 16
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <fgetc+0x60>
    2106:	80 e2       	ldi	r24, 0x20	; 32
    2108:	82 2b       	or	r24, r18
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	08 c0       	rjmp	.+16     	; 0x211e <fgetc+0x76>
    210e:	2e 81       	ldd	r18, Y+6	; 0x06
    2110:	3f 81       	ldd	r19, Y+7	; 0x07
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	3f 83       	std	Y+7, r19	; 0x07
    2118:	2e 83       	std	Y+6, r18	; 0x06
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <fgetc+0x7a>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <fputc>:
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	8c 01       	movw	r16, r24
    2132:	eb 01       	movw	r28, r22
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	81 ff       	sbrs	r24, 1
    2138:	1b c0       	rjmp	.+54     	; 0x2170 <fputc+0x48>
    213a:	82 ff       	sbrs	r24, 2
    213c:	0d c0       	rjmp	.+26     	; 0x2158 <fputc+0x30>
    213e:	2e 81       	ldd	r18, Y+6	; 0x06
    2140:	3f 81       	ldd	r19, Y+7	; 0x07
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	28 17       	cp	r18, r24
    2148:	39 07       	cpc	r19, r25
    214a:	64 f4       	brge	.+24     	; 0x2164 <fputc+0x3c>
    214c:	e8 81       	ld	r30, Y
    214e:	f9 81       	ldd	r31, Y+1	; 0x01
    2150:	01 93       	st	Z+, r16
    2152:	f9 83       	std	Y+1, r31	; 0x01
    2154:	e8 83       	st	Y, r30
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <fputc+0x3c>
    2158:	e8 85       	ldd	r30, Y+8	; 0x08
    215a:	f9 85       	ldd	r31, Y+9	; 0x09
    215c:	80 2f       	mov	r24, r16
    215e:	19 95       	eicall
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	31 f4       	brne	.+12     	; 0x2170 <fputc+0x48>
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	9f 81       	ldd	r25, Y+7	; 0x07
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	9f 83       	std	Y+7, r25	; 0x07
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <fputc+0x4c>
    2170:	0f ef       	ldi	r16, 0xFF	; 255
    2172:	1f ef       	ldi	r17, 0xFF	; 255
    2174:	c8 01       	movw	r24, r16
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	08 95       	ret

00002180 <__ultoa_invert>:
    2180:	fa 01       	movw	r30, r20
    2182:	aa 27       	eor	r26, r26
    2184:	28 30       	cpi	r18, 0x08	; 8
    2186:	51 f1       	breq	.+84     	; 0x21dc <__ultoa_invert+0x5c>
    2188:	20 31       	cpi	r18, 0x10	; 16
    218a:	81 f1       	breq	.+96     	; 0x21ec <__ultoa_invert+0x6c>
    218c:	e8 94       	clt
    218e:	6f 93       	push	r22
    2190:	6e 7f       	andi	r22, 0xFE	; 254
    2192:	6e 5f       	subi	r22, 0xFE	; 254
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	af 4f       	sbci	r26, 0xFF	; 255
    219c:	b1 e0       	ldi	r27, 0x01	; 1
    219e:	3e d0       	rcall	.+124    	; 0x221c <__stack+0x1d>
    21a0:	b4 e0       	ldi	r27, 0x04	; 4
    21a2:	3c d0       	rcall	.+120    	; 0x221c <__stack+0x1d>
    21a4:	67 0f       	add	r22, r23
    21a6:	78 1f       	adc	r23, r24
    21a8:	89 1f       	adc	r24, r25
    21aa:	9a 1f       	adc	r25, r26
    21ac:	a1 1d       	adc	r26, r1
    21ae:	68 0f       	add	r22, r24
    21b0:	79 1f       	adc	r23, r25
    21b2:	8a 1f       	adc	r24, r26
    21b4:	91 1d       	adc	r25, r1
    21b6:	a1 1d       	adc	r26, r1
    21b8:	6a 0f       	add	r22, r26
    21ba:	71 1d       	adc	r23, r1
    21bc:	81 1d       	adc	r24, r1
    21be:	91 1d       	adc	r25, r1
    21c0:	a1 1d       	adc	r26, r1
    21c2:	20 d0       	rcall	.+64     	; 0x2204 <__stack+0x5>
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <__ultoa_invert+0x48>
    21c6:	68 94       	set
    21c8:	3f 91       	pop	r19
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	26 9f       	mul	r18, r22
    21ce:	11 24       	eor	r1, r1
    21d0:	30 19       	sub	r19, r0
    21d2:	30 5d       	subi	r19, 0xD0	; 208
    21d4:	31 93       	st	Z+, r19
    21d6:	de f6       	brtc	.-74     	; 0x218e <__ultoa_invert+0xe>
    21d8:	cf 01       	movw	r24, r30
    21da:	08 95       	ret
    21dc:	46 2f       	mov	r20, r22
    21de:	47 70       	andi	r20, 0x07	; 7
    21e0:	40 5d       	subi	r20, 0xD0	; 208
    21e2:	41 93       	st	Z+, r20
    21e4:	b3 e0       	ldi	r27, 0x03	; 3
    21e6:	0f d0       	rcall	.+30     	; 0x2206 <__stack+0x7>
    21e8:	c9 f7       	brne	.-14     	; 0x21dc <__ultoa_invert+0x5c>
    21ea:	f6 cf       	rjmp	.-20     	; 0x21d8 <__ultoa_invert+0x58>
    21ec:	46 2f       	mov	r20, r22
    21ee:	4f 70       	andi	r20, 0x0F	; 15
    21f0:	40 5d       	subi	r20, 0xD0	; 208
    21f2:	4a 33       	cpi	r20, 0x3A	; 58
    21f4:	18 f0       	brcs	.+6      	; 0x21fc <__ultoa_invert+0x7c>
    21f6:	49 5d       	subi	r20, 0xD9	; 217
    21f8:	31 fd       	sbrc	r19, 1
    21fa:	40 52       	subi	r20, 0x20	; 32
    21fc:	41 93       	st	Z+, r20
    21fe:	02 d0       	rcall	.+4      	; 0x2204 <__stack+0x5>
    2200:	a9 f7       	brne	.-22     	; 0x21ec <__ultoa_invert+0x6c>
    2202:	ea cf       	rjmp	.-44     	; 0x21d8 <__ultoa_invert+0x58>
    2204:	b4 e0       	ldi	r27, 0x04	; 4
    2206:	a6 95       	lsr	r26
    2208:	97 95       	ror	r25
    220a:	87 95       	ror	r24
    220c:	77 95       	ror	r23
    220e:	67 95       	ror	r22
    2210:	ba 95       	dec	r27
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__stack+0x7>
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	61 05       	cpc	r22, r1
    2218:	71 05       	cpc	r23, r1
    221a:	08 95       	ret
    221c:	9b 01       	movw	r18, r22
    221e:	ac 01       	movw	r20, r24
    2220:	0a 2e       	mov	r0, r26
    2222:	06 94       	lsr	r0
    2224:	57 95       	ror	r21
    2226:	47 95       	ror	r20
    2228:	37 95       	ror	r19
    222a:	27 95       	ror	r18
    222c:	ba 95       	dec	r27
    222e:	c9 f7       	brne	.-14     	; 0x2222 <__stack+0x23>
    2230:	62 0f       	add	r22, r18
    2232:	73 1f       	adc	r23, r19
    2234:	84 1f       	adc	r24, r20
    2236:	95 1f       	adc	r25, r21
    2238:	a0 1d       	adc	r26, r0
    223a:	08 95       	ret

0000223c <_exit>:
    223c:	f8 94       	cli

0000223e <__stop_program>:
    223e:	ff cf       	rjmp	.-2      	; 0x223e <__stop_program>
