
pjt10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  000013ba  0000144e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000219  008002a0  008002a0  000014ee  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00002940  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002489  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001200  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001467  00000000  00000000  00006271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  000076d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  00007d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184c  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea eb       	ldi	r30, 0xBA	; 186
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3a       	cpi	r26, 0xA0	; 160
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	a0 ea       	ldi	r26, 0xA0	; 160
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a9 3b       	cpi	r26, 0xB9	; 185
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 65 04 	call	0x8ca	; 0x8ca <main>
     124:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__vector_27>:
#include"queue.h"
#include"uart.h"
#define ETX 0x04
extern char volatile uart_busy;
ISR(USART0_TX_vect)
{
     12c:	1f 92       	push	r1
     12e:	0f 92       	push	r0
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	0f 92       	push	r0
     134:	0b b6       	in	r0, 0x3b	; 59
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	2f 93       	push	r18
     13c:	3f 93       	push	r19
     13e:	4f 93       	push	r20
     140:	5f 93       	push	r21
     142:	6f 93       	push	r22
     144:	7f 93       	push	r23
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
     14a:	af 93       	push	r26
     14c:	bf 93       	push	r27
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     152:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <qo_delete>
     156:	88 23       	and	r24, r24
     158:	19 f4       	brne	.+6      	; 0x160 <__vector_27+0x34>
		uart_busy = 0;
     15a:	10 92 ae 04 	sts	0x04AE, r1
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__vector_27+0x38>
	else
		UDR0 = ch;
     160:	80 93 c6 00 	sts	0x00C6, r24
}
     164:	ff 91       	pop	r31
     166:	ef 91       	pop	r30
     168:	bf 91       	pop	r27
     16a:	af 91       	pop	r26
     16c:	9f 91       	pop	r25
     16e:	8f 91       	pop	r24
     170:	7f 91       	pop	r23
     172:	6f 91       	pop	r22
     174:	5f 91       	pop	r21
     176:	4f 91       	pop	r20
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <__vector_25>:
ISR(USART0_RX_vect)
{
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	0b b6       	in	r0, 0x3b	; 59
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	cf 93       	push	r28
     1ae:	ef 93       	push	r30
     1b0:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     1b2:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != ETX) {
     1b6:	c4 30       	cpi	r28, 0x04	; 4
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <__vector_25+0x3c>
		if(ch == '\r')
     1ba:	cd 30       	cpi	r28, 0x0D	; 13
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <__vector_25+0x36>
			ch = '\n';
     1be:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 45 03 	call	0x68a	; 0x68a <uart_echo>
	}
	qi_insert(ch);
     1c6:	8c 2f       	mov	r24, r28
     1c8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <qi_insert>
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	cf 91       	pop	r28
     1d2:	bf 91       	pop	r27
     1d4:	af 91       	pop	r26
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	7f 91       	pop	r23
     1dc:	6f 91       	pop	r22
     1de:	5f 91       	pop	r21
     1e0:	4f 91       	pop	r20
     1e2:	3f 91       	pop	r19
     1e4:	2f 91       	pop	r18
     1e6:	0f 90       	pop	r0
     1e8:	0b be       	out	0x3b, r0	; 59
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     1f4:	fc 01       	movw	r30, r24
	if(!Head){
     1f6:	80 91 a0 02 	lds	r24, 0x02A0
     1fa:	90 91 a1 02 	lds	r25, 0x02A1
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	39 f4       	brne	.+14     	; 0x210 <insert_node_head+0x1c>
		Head = np;
     202:	f0 93 a1 02 	sts	0x02A1, r31
     206:	e0 93 a0 02 	sts	0x02A0, r30
		np->link = NULL;
     20a:	13 82       	std	Z+3, r1	; 0x03
     20c:	12 82       	std	Z+2, r1	; 0x02
     20e:	08 95       	ret
	}else {
		np->link = Head;
     210:	93 83       	std	Z+3, r25	; 0x03
     212:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     214:	f0 93 a1 02 	sts	0x02A1, r31
     218:	e0 93 a0 02 	sts	0x02A0, r30
     21c:	08 95       	ret

0000021e <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     21e:	e0 91 a0 02 	lds	r30, 0x02A0
     222:	f0 91 a1 02 	lds	r31, 0x02A1
     226:	30 97       	sbiw	r30, 0x00	; 0
     228:	31 f4       	brne	.+12     	; 0x236 <insert_node_tail+0x18>
		Head = np;
     22a:	90 93 a1 02 	sts	0x02A1, r25
     22e:	80 93 a0 02 	sts	0x02A0, r24
     232:	08 c0       	rjmp	.+16     	; 0x244 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     234:	f9 01       	movw	r30, r18
     236:	22 81       	ldd	r18, Z+2	; 0x02
     238:	33 81       	ldd	r19, Z+3	; 0x03
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	d1 f7       	brne	.-12     	; 0x234 <insert_node_tail+0x16>
			;
		cp->link = np;
     240:	93 83       	std	Z+3, r25	; 0x03
     242:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     244:	fc 01       	movw	r30, r24
     246:	13 82       	std	Z+3, r1	; 0x03
     248:	12 82       	std	Z+2, r1	; 0x02
}
     24a:	08 95       	ret

0000024c <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     252:	20 91 a0 02 	lds	r18, 0x02A0
     256:	30 91 a1 02 	lds	r19, 0x02A1
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	31 f0       	breq	.+12     	; 0x26c <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	d9 01       	movw	r26, r18
     266:	c0 e0       	ldi	r28, 0x00	; 0
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	0f c0       	rjmp	.+30     	; 0x28a <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     26c:	90 93 a1 02 	sts	0x02A1, r25
     270:	80 93 a0 02 	sts	0x02A0, r24
		np->link = NULL;
     274:	13 82       	std	Z+3, r1	; 0x03
     276:	12 82       	std	Z+2, r1	; 0x02
     278:	1d c0       	rjmp	.+58     	; 0x2b4 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     27a:	12 96       	adiw	r26, 0x02	; 2
     27c:	8d 91       	ld	r24, X+
     27e:	9c 91       	ld	r25, X
     280:	13 97       	sbiw	r26, 0x03	; 3
     282:	ed 01       	movw	r28, r26
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	39 f0       	breq	.+14     	; 0x296 <insert_node_ascn+0x4a>
     288:	dc 01       	movw	r26, r24
     28a:	8d 91       	ld	r24, X+
     28c:	9c 91       	ld	r25, X
     28e:	11 97       	sbiw	r26, 0x01	; 1
     290:	84 17       	cp	r24, r20
     292:	95 07       	cpc	r25, r21
     294:	94 f3       	brlt	.-28     	; 0x27a <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     296:	20 97       	sbiw	r28, 0x00	; 0
     298:	39 f4       	brne	.+14     	; 0x2a8 <insert_node_ascn+0x5c>
			np->link = Head;
     29a:	33 83       	std	Z+3, r19	; 0x03
     29c:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     29e:	f0 93 a1 02 	sts	0x02A1, r31
     2a2:	e0 93 a0 02 	sts	0x02A0, r30
     2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	93 83       	std	Z+3, r25	; 0x03
     2ae:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     2b0:	fb 83       	std	Y+3, r31	; 0x03
     2b2:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <free_node>:
void free_node(NODE *np)
{
	free(np);
     2ba:	0e 94 85 05 	call	0xb0a	; 0xb0a <free>
}
     2be:	08 95       	ret

000002c0 <tour_list>:
void tour_list()
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     2c8:	8a e0       	ldi	r24, 0x0A	; 10
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     2d0:	c0 91 a0 02 	lds	r28, 0x02A0
     2d4:	d0 91 a1 02 	lds	r29, 0x02A1
		printf("-->%c ", cp->data);
     2d8:	01 e4       	ldi	r16, 0x41	; 65
     2da:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     2dc:	13 c0       	rjmp	.+38     	; 0x304 <tour_list+0x44>
		printf("-->%c ", cp->data);
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <tour_list+0x20>
     2e0:	0f 92       	push	r0
     2e2:	ed b7       	in	r30, 0x3d	; 61
     2e4:	fe b7       	in	r31, 0x3e	; 62
     2e6:	12 83       	std	Z+2, r17	; 0x02
     2e8:	01 83       	std	Z+1, r16	; 0x01
     2ea:	88 81       	ld	r24, Y
     2ec:	99 81       	ldd	r25, Y+1	; 0x01
     2ee:	94 83       	std	Z+4, r25	; 0x04
     2f0:	83 83       	std	Z+3, r24	; 0x03
     2f2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     2f6:	0a 80       	ldd	r0, Y+2	; 0x02
     2f8:	db 81       	ldd	r29, Y+3	; 0x03
     2fa:	c0 2d       	mov	r28, r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	20 97       	sbiw	r28, 0x00	; 0
     306:	59 f7       	brne	.-42     	; 0x2de <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     308:	8a e0       	ldi	r24, 0x0A	; 10
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <putchar>
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	08 95       	ret

0000031a <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     31a:	09 c0       	rjmp	.+18     	; 0x32e <free_list+0x14>
		cp = Head;
		Head = cp->link;
     31c:	fc 01       	movw	r30, r24
     31e:	22 81       	ldd	r18, Z+2	; 0x02
     320:	33 81       	ldd	r19, Z+3	; 0x03
     322:	30 93 a1 02 	sts	0x02A1, r19
     326:	20 93 a0 02 	sts	0x02A0, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     32a:	0e 94 85 05 	call	0xb0a	; 0xb0a <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     32e:	80 91 a0 02 	lds	r24, 0x02A0
     332:	90 91 a1 02 	lds	r25, 0x02A1
     336:	00 97       	sbiw	r24, 0x00	; 0
     338:	89 f7       	brne	.-30     	; 0x31c <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     33a:	08 95       	ret

0000033c <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 ef 04 	call	0x9de	; 0x9de <malloc>
	return cp;
}
     344:	08 95       	ret

00000346 <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     34c:	62 e0       	ldi	r22, 0x02	; 2
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     354:	eb 01       	movw	r28, r22
     356:	22 e0       	ldi	r18, 0x02	; 2
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	08 c0       	rjmp	.+16     	; 0x36c <is_prime+0x26>
		if((n%i) == 0)
     35c:	cf 01       	movw	r24, r30
     35e:	b9 01       	movw	r22, r18
     360:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	41 f0       	breq	.+16     	; 0x378 <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     368:	2f 5f       	subi	r18, 0xFF	; 255
     36a:	3f 4f       	sbci	r19, 0xFF	; 255
     36c:	c2 17       	cp	r28, r18
     36e:	d3 07       	cpc	r29, r19
     370:	ac f7       	brge	.-22     	; 0x35c <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	02 c0       	rjmp	.+4      	; 0x37c <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <app_prime>:
void app_prime(char *ap)
{
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	21 f0       	breq	.+8      	; 0x39e <app_prime+0x1c>
     396:	0e 94 1e 06 	call	0xc3c	; 0xc3c <atoi>
     39a:	7c 01       	movw	r14, r24
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     39e:	90 ed       	ldi	r25, 0xD0	; 208
     3a0:	e9 2e       	mov	r14, r25
     3a2:	97 e0       	ldi	r25, 0x07	; 7
     3a4:	f9 2e       	mov	r15, r25
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     3aa:	c2 e0       	ldi	r28, 0x02	; 2
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     3ae:	88 e4       	ldi	r24, 0x48	; 72
     3b0:	c8 2e       	mov	r12, r24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     3b6:	16 c0       	rjmp	.+44     	; 0x3e4 <app_prime+0x62>
		if(is_prime(n)) {
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 a3 01 	call	0x346	; 0x346 <is_prime>
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	81 f0       	breq	.+32     	; 0x3e2 <app_prime+0x60>
			count++;
     3c2:	0f 5f       	subi	r16, 0xFF	; 255
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <app_prime+0x46>
     3c8:	0f 92       	push	r0
     3ca:	ed b7       	in	r30, 0x3d	; 61
     3cc:	fe b7       	in	r31, 0x3e	; 62
     3ce:	d2 82       	std	Z+2, r13	; 0x02
     3d0:	c1 82       	std	Z+1, r12	; 0x01
     3d2:	d4 83       	std	Z+4, r29	; 0x04
     3d4:	c3 83       	std	Z+3, r28	; 0x03
     3d6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     3e2:	21 96       	adiw	r28, 0x01	; 1
     3e4:	ec 16       	cp	r14, r28
     3e6:	fd 06       	cpc	r15, r29
     3e8:	3c f7       	brge	.-50     	; 0x3b8 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <app_prime+0x6a>
     3ec:	0f 92       	push	r0
     3ee:	82 e6       	ldi	r24, 0x62	; 98
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	92 83       	std	Z+2, r25	; 0x02
     3f8:	81 83       	std	Z+1, r24	; 0x01
     3fa:	14 83       	std	Z+4, r17	; 0x04
     3fc:	03 83       	std	Z+3, r16	; 0x03
     3fe:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	08 95       	ret

0000041c <app_list>:
void app_list(char *ap)
{
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	28 97       	sbiw	r28, 0x08	; 8
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	19 f0       	breq	.+6      	; 0x440 <app_list+0x24>
     43a:	fc 01       	movw	r30, r24
     43c:	10 81       	ld	r17, Z
     43e:	01 c0       	rjmp	.+2      	; 0x442 <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     440:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     442:	2c e6       	ldi	r18, 0x6C	; 108
     444:	e2 2e       	mov	r14, r18
     446:	22 e0       	ldi	r18, 0x02	; 2
     448:	f2 2e       	mov	r15, r18
     44a:	0f 92       	push	r0
     44c:	0f 92       	push	r0
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	f2 82       	std	Z+2, r15	; 0x02
     454:	e1 82       	std	Z+1, r14	; 0x01
     456:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
		if(fgets(buf, 8, stdin) == NULL)
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	40 91 b3 04 	lds	r20, 0x04B3
     462:	50 91 b4 04 	lds	r21, 0x04B4
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	68 e0       	ldi	r22, 0x08	; 8
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <fgets>
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	a1 f0       	breq	.+40     	; 0x49e <app_list+0x82>
			break;
		np = get_node();
     476:	0e 94 9e 01 	call	0x33c	; 0x33c <get_node>
		np->data = buf[0];
     47a:	29 81       	ldd	r18, Y+1	; 0x01
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
     480:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     482:	18 36       	cpi	r17, 0x68	; 104
     484:	19 f0       	breq	.+6      	; 0x48c <app_list+0x70>
     486:	14 37       	cpi	r17, 0x74	; 116
     488:	39 f4       	brne	.+14     	; 0x498 <app_list+0x7c>
     48a:	03 c0       	rjmp	.+6      	; 0x492 <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     48c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <insert_node_head>
     490:	dc cf       	rjmp	.-72     	; 0x44a <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     492:	0e 94 0f 01 	call	0x21e	; 0x21e <insert_node_tail>
     496:	d9 cf       	rjmp	.-78     	; 0x44a <app_list+0x2e>
			default :insert_node_ascn(np);
     498:	0e 94 26 01 	call	0x24c	; 0x24c <insert_node_ascn>
     49c:	d6 cf       	rjmp	.-84     	; 0x44a <app_list+0x2e>
		}
	}
	tour_list();
     49e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <tour_list>
	free_list();
     4a2:	0e 94 8d 01 	call	0x31a	; 0x31a <free_list>
}
     4a6:	28 96       	adiw	r28, 0x08	; 8
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	08 95       	ret

000004be <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     4be:	10 92 ab 03 	sts	0x03AB, r1
     4c2:	10 92 aa 03 	sts	0x03AA, r1
     4c6:	10 92 a9 03 	sts	0x03A9, r1
     4ca:	10 92 a8 03 	sts	0x03A8, r1
     4ce:	10 92 ad 03 	sts	0x03AD, r1
     4d2:	10 92 ac 03 	sts	0x03AC, r1
     4d6:	10 92 a7 02 	sts	0x02A7, r1
     4da:	10 92 a6 02 	sts	0x02A6, r1
}
     4de:	08 95       	ret

000004e0 <qi_insert>:
int qi_insert(char ch)
{
     4e0:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     4e2:	20 91 ac 03 	lds	r18, 0x03AC
     4e6:	30 91 ad 03 	lds	r19, 0x03AD
     4ea:	2f 5f       	subi	r18, 0xFF	; 255
     4ec:	3f 4f       	sbci	r19, 0xFF	; 255
     4ee:	c9 01       	movw	r24, r18
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     4f8:	9c 01       	movw	r18, r24
     4fa:	80 91 a6 02 	lds	r24, 0x02A6
     4fe:	90 91 a7 02 	lds	r25, 0x02A7
     502:	28 17       	cp	r18, r24
     504:	39 07       	cpc	r19, r25
     506:	59 f0       	breq	.+22     	; 0x51e <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     508:	30 93 ad 03 	sts	0x03AD, r19
     50c:	20 93 ac 03 	sts	0x03AC, r18
	qi[ri] = ch;
     510:	22 55       	subi	r18, 0x52	; 82
     512:	3c 4f       	sbci	r19, 0xFC	; 252
     514:	f9 01       	movw	r30, r18
     516:	40 83       	st	Z, r20
	return 1;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     522:	08 95       	ret

00000524 <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     524:	80 91 a6 02 	lds	r24, 0x02A6
     528:	90 91 a7 02 	lds	r25, 0x02A7
     52c:	20 91 ac 03 	lds	r18, 0x03AC
     530:	30 91 ad 03 	lds	r19, 0x03AD
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	79 f0       	breq	.+30     	; 0x558 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     544:	90 93 a7 02 	sts	0x02A7, r25
     548:	80 93 a6 02 	sts	0x02A6, r24
	return qi[fi];
     54c:	82 55       	subi	r24, 0x52	; 82
     54e:	9c 4f       	sbci	r25, 0xFC	; 252
     550:	fc 01       	movw	r30, r24
     552:	80 81       	ld	r24, Z
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     55c:	08 95       	ret

0000055e <qo_insert>:
int qo_insert(char ch)
{
     55e:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     560:	20 91 aa 03 	lds	r18, 0x03AA
     564:	30 91 ab 03 	lds	r19, 0x03AB
     568:	2f 5f       	subi	r18, 0xFF	; 255
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	c9 01       	movw	r24, r18
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     576:	9c 01       	movw	r18, r24
     578:	80 91 a8 03 	lds	r24, 0x03A8
     57c:	90 91 a9 03 	lds	r25, 0x03A9
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	59 f0       	breq	.+22     	; 0x59c <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     586:	30 93 ab 03 	sts	0x03AB, r19
     58a:	20 93 aa 03 	sts	0x03AA, r18
	qo[ro] = ch;
     58e:	28 55       	subi	r18, 0x58	; 88
     590:	3d 4f       	sbci	r19, 0xFD	; 253
     592:	f9 01       	movw	r30, r18
     594:	40 83       	st	Z, r20
	return 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     5a0:	08 95       	ret

000005a2 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     5a2:	80 91 a8 03 	lds	r24, 0x03A8
     5a6:	90 91 a9 03 	lds	r25, 0x03A9
     5aa:	20 91 aa 03 	lds	r18, 0x03AA
     5ae:	30 91 ab 03 	lds	r19, 0x03AB
     5b2:	28 17       	cp	r18, r24
     5b4:	39 07       	cpc	r19, r25
     5b6:	79 f0       	breq	.+30     	; 0x5d6 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
     5c2:	90 93 a9 03 	sts	0x03A9, r25
     5c6:	80 93 a8 03 	sts	0x03A8, r24
	return qo[fo];
     5ca:	88 55       	subi	r24, 0x58	; 88
     5cc:	9d 4f       	sbci	r25, 0xFD	; 253
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     5da:	08 95       	ret

000005dc <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     5dc:	f8 94       	cli
		ch = qi_delete();
     5de:	0e 94 92 02 	call	0x524	; 0x524 <qi_delete>
		sei();
     5e2:	78 94       	sei
	}while(ch == 0);
     5e4:	88 23       	and	r24, r24
     5e6:	d1 f3       	breq	.-12     	; 0x5dc <uart_getchar>

	if (ch == ETX) return -1;
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	11 f0       	breq	.+4      	; 0x5f0 <uart_getchar+0x14>
	else		   return ch;
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     5f4:	08 95       	ret

000005f6 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     5f6:	cf 93       	push	r28
     5f8:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	19 f4       	brne	.+6      	; 0x604 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     5fe:	8d e0       	ldi	r24, 0x0D	; 13
     600:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_putchar>
	cli();
     604:	f8 94       	cli
	if(!uart_busy){
     606:	80 91 ae 04 	lds	r24, 0x04AE
     60a:	88 23       	and	r24, r24
     60c:	59 f4       	brne	.+22     	; 0x624 <uart_putchar+0x2e>
		UDR0 = ch;
     60e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 ae 04 	sts	0x04AE, r24
     618:	0a c0       	rjmp	.+20     	; 0x62e <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     61a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61c:	86 ef       	ldi	r24, 0xF6	; 246
     61e:	8a 95       	dec	r24
     620:	f1 f7       	brne	.-4      	; 0x61e <uart_putchar+0x28>
			_delay_us(100);
			cli();
     622:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     624:	8c 2f       	mov	r24, r28
     626:	0e 94 af 02 	call	0x55e	; 0x55e <qo_insert>
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	b1 f3       	breq	.-20     	; 0x61a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     62e:	78 94       	sei
	return 1;
}
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     638:	8f e6       	ldi	r24, 0x6F	; 111
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	90 93 b4 04 	sts	0x04B4, r25
     640:	80 93 b3 04 	sts	0x04B3, r24
	stdout = &Mystdout;
     644:	8d e7       	ldi	r24, 0x7D	; 125
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	90 93 b6 04 	sts	0x04B6, r25
     64c:	80 93 b5 04 	sts	0x04B5, r24
	uart_busy = 0;
     650:	10 92 ae 04 	sts	0x04AE, r1
	q_init();
     654:	0e 94 5f 02 	call	0x4be	; 0x4be <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     658:	10 92 c5 00 	sts	0x00C5, r1
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     662:	e0 ec       	ldi	r30, 0xC0	; 192
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	82 60       	ori	r24, 0x02	; 2
     66a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     66c:	e1 ec       	ldi	r30, 0xC1	; 193
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	88 60       	ori	r24, 0x08	; 8
     674:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     676:	80 81       	ld	r24, Z
     678:	80 64       	ori	r24, 0x40	; 64
     67a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     67c:	80 81       	ld	r24, Z
     67e:	80 61       	ori	r24, 0x10	; 16
     680:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     682:	80 81       	ld	r24, Z
     684:	80 68       	ori	r24, 0x80	; 128
     686:	80 83       	st	Z, r24
}
     688:	08 95       	ret

0000068a <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     68a:	cf 93       	push	r28
     68c:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     68e:	8a 30       	cpi	r24, 0x0A	; 10
     690:	19 f4       	brne	.+6      	; 0x698 <uart_echo+0xe>
     692:	8d e0       	ldi	r24, 0x0D	; 13
     694:	0e 94 45 03 	call	0x68a	; 0x68a <uart_echo>
	if(!uart_busy){
     698:	80 91 ae 04 	lds	r24, 0x04AE
     69c:	88 23       	and	r24, r24
     69e:	31 f4       	brne	.+12     	; 0x6ac <uart_echo+0x22>
		UDR0 = ch;
     6a0:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 ae 04 	sts	0x04AE, r24
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     6ac:	8c 2f       	mov	r24, r28
     6ae:	0e 94 af 02 	call	0x55e	; 0x55e <qo_insert>
}
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <get_timer>:
struct timer *Thead=NULL;
struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     6b6:	8e e0       	ldi	r24, 0x0E	; 14
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 ef 04 	call	0x9de	; 0x9de <malloc>
	return(tp);
}
     6be:	08 95       	ret

000006c0 <insert_timer>:
void insert_timer(struct task *tskp, int ms)
{
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	f8 2e       	mov	r15, r24
     6ce:	e9 2e       	mov	r14, r25
     6d0:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     6d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <get_timer>
     6d6:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     6d8:	dc 01       	movw	r26, r24
     6da:	12 96       	adiw	r26, 0x02	; 2
     6dc:	ef 2d       	mov	r30, r15
     6de:	fe 2d       	mov	r31, r14
     6e0:	8a e0       	ldi	r24, 0x0A	; 10
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	81 50       	subi	r24, 0x01	; 1
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <insert_timer+0x22>
	tp->time = ms;
     6ea:	19 83       	std	Y+1, r17	; 0x01
     6ec:	08 83       	st	Y, r16
	if(Thead == NULL){
     6ee:	e0 91 a2 02 	lds	r30, 0x02A2
     6f2:	f0 91 a3 02 	lds	r31, 0x02A3
     6f6:	30 97       	sbiw	r30, 0x00	; 0
     6f8:	29 f4       	brne	.+10     	; 0x704 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     6fa:	d0 93 a3 02 	sts	0x02A3, r29
     6fe:	c0 93 a2 02 	sts	0x02A2, r28
     702:	2f c0       	rjmp	.+94     	; 0x762 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;
	if(Thead == NULL){
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	01 c0       	rjmp	.+2      	; 0x710 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     70e:	fd 01       	movw	r30, r26
		total += cp->time;
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01
     714:	28 0f       	add	r18, r24
     716:	39 1f       	adc	r19, r25
		if(total >=ms)
     718:	20 17       	cp	r18, r16
     71a:	31 07       	cpc	r19, r17
     71c:	34 f4       	brge	.+12     	; 0x72a <insert_timer+0x6a>
	if(Thead == NULL){
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     71e:	a4 85       	ldd	r26, Z+12	; 0x0c
     720:	b5 85       	ldd	r27, Z+13	; 0x0d
     722:	af 01       	movw	r20, r30
     724:	10 97       	sbiw	r26, 0x00	; 0
     726:	99 f7       	brne	.-26     	; 0x70e <insert_timer+0x4e>
     728:	01 c0       	rjmp	.+2      	; 0x72c <insert_timer+0x6c>
		total += cp->time;
		if(total >=ms)
     72a:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp ==NULL){
     72c:	41 15       	cp	r20, r1
     72e:	51 05       	cpc	r21, r1
     730:	79 f4       	brne	.+30     	; 0x750 <insert_timer+0x90>
		cp->time -= tp->time;
     732:	8d 91       	ld	r24, X+
     734:	9c 91       	ld	r25, X
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	80 1b       	sub	r24, r16
     73a:	91 0b       	sbc	r25, r17
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	9c 93       	st	X, r25
     740:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     742:	bd 87       	std	Y+13, r27	; 0x0d
     744:	ac 87       	std	Y+12, r26	; 0x0c
     746:	d0 93 a3 02 	sts	0x02A3, r29
     74a:	c0 93 a2 02 	sts	0x02A2, r28
     74e:	24 c0       	rjmp	.+72     	; 0x798 <insert_timer+0xd8>
	}
	else if(cp==NULL){
     750:	10 97       	sbiw	r26, 0x00	; 0
     752:	51 f4       	brne	.+20     	; 0x768 <insert_timer+0xa8>
		tp->time -= total;
     754:	02 1b       	sub	r16, r18
     756:	13 0b       	sbc	r17, r19
     758:	19 83       	std	Y+1, r17	; 0x01
     75a:	08 83       	st	Y, r16
		pp->link = tp;
     75c:	fa 01       	movw	r30, r20
     75e:	d5 87       	std	Z+13, r29	; 0x0d
     760:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     762:	1d 86       	std	Y+13, r1	; 0x0d
     764:	1c 86       	std	Y+12, r1	; 0x0c
     766:	18 c0       	rjmp	.+48     	; 0x798 <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     768:	8d 91       	ld	r24, X+
     76a:	9c 91       	ld	r25, X
     76c:	11 97       	sbiw	r26, 0x01	; 1
     76e:	b9 01       	movw	r22, r18
     770:	68 1b       	sub	r22, r24
     772:	79 0b       	sbc	r23, r25
		tp->time -= total;
     774:	98 01       	movw	r18, r16
     776:	26 1b       	sub	r18, r22
     778:	37 0b       	sbc	r19, r23
     77a:	39 83       	std	Y+1, r19	; 0x01
     77c:	28 83       	st	Y, r18
		cp->time -= tp->time;
     77e:	8d 91       	ld	r24, X+
     780:	9c 91       	ld	r25, X
     782:	11 97       	sbiw	r26, 0x01	; 1
     784:	82 1b       	sub	r24, r18
     786:	93 0b       	sbc	r25, r19
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	9c 93       	st	X, r25
     78c:	8e 93       	st	-X, r24
		pp->link = tp;
     78e:	fa 01       	movw	r30, r20
     790:	d5 87       	std	Z+13, r29	; 0x0d
     792:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     794:	bd 87       	std	Y+13, r27	; 0x0d
     796:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret

000007a6 <tour_timer>:
void tour_timer()
{
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <putchar>
	for(cp = Thead; cp !=NULL; cp = cp->link){
     7ba:	c0 91 a2 02 	lds	r28, 0x02A2
     7be:	d0 91 a3 02 	lds	r29, 0x02A3
	}
}
void tour_timer()
{
	struct timer *cp;
	int total = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
     7c6:	8b e8       	ldi	r24, 0x8B	; 139
     7c8:	e8 2e       	mov	r14, r24
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     7ce:	20 c0       	rjmp	.+64     	; 0x810 <tour_timer+0x6a>
		total+= cp->time;
     7d0:	88 81       	ld	r24, Y
     7d2:	99 81       	ldd	r25, Y+1	; 0x01
     7d4:	08 0f       	add	r16, r24
     7d6:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     7d8:	00 d0       	rcall	.+0      	; 0x7da <tour_timer+0x34>
     7da:	00 d0       	rcall	.+0      	; 0x7dc <tour_timer+0x36>
     7dc:	ed b7       	in	r30, 0x3d	; 61
     7de:	fe b7       	in	r31, 0x3e	; 62
     7e0:	31 96       	adiw	r30, 0x01	; 1
     7e2:	ad b7       	in	r26, 0x3d	; 61
     7e4:	be b7       	in	r27, 0x3e	; 62
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	fc 92       	st	X, r15
     7ea:	ee 92       	st	-X, r14
     7ec:	11 97       	sbiw	r26, 0x01	; 1
     7ee:	93 83       	std	Z+3, r25	; 0x03
     7f0:	82 83       	std	Z+2, r24	; 0x02
     7f2:	15 83       	std	Z+5, r17	; 0x05
     7f4:	04 83       	std	Z+4, r16	; 0x04
     7f6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     7fa:	0c 84       	ldd	r0, Y+12	; 0x0c
     7fc:	dd 85       	ldd	r29, Y+13	; 0x0d
     7fe:	c0 2d       	mov	r28, r0
     800:	8d b7       	in	r24, 0x3d	; 61
     802:	9e b7       	in	r25, 0x3e	; 62
     804:	06 96       	adiw	r24, 0x06	; 6
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	9e bf       	out	0x3e, r25	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	8d bf       	out	0x3d, r24	; 61
     810:	20 97       	sbiw	r28, 0x00	; 0
     812:	f1 f6       	brne	.-68     	; 0x7d0 <tour_timer+0x2a>
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 bf 06 	call	0xd7e	; 0xd7e <putchar>
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	08 95       	ret

0000082a <free_timer>:
void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL ;){
     82a:	09 c0       	rjmp	.+18     	; 0x83e <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     82c:	fc 01       	movw	r30, r24
     82e:	24 85       	ldd	r18, Z+12	; 0x0c
     830:	35 85       	ldd	r19, Z+13	; 0x0d
     832:	30 93 a3 02 	sts	0x02A3, r19
     836:	20 93 a2 02 	sts	0x02A2, r18
		free(cp);
     83a:	0e 94 85 05 	call	0xb0a	; 0xb0a <free>
}
void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL ;){
     83e:	80 91 a2 02 	lds	r24, 0x02A2
     842:	90 91 a3 02 	lds	r25, 0x02A3
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	89 f7       	brne	.-30     	; 0x82c <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     84a:	08 95       	ret

0000084c <app_timer>:
void app_timer(char *ap)
{
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	62 97       	sbiw	r28, 0x12	; 18
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;
	while(1){
		printf(">> ");
     864:	06 e9       	ldi	r16, 0x96	; 150
     866:	12 e0       	ldi	r17, 0x02	; 2
     868:	0f 92       	push	r0
     86a:	0f 92       	push	r0
     86c:	ed b7       	in	r30, 0x3d	; 61
     86e:	fe b7       	in	r31, 0x3e	; 62
     870:	12 83       	std	Z+2, r17	; 0x02
     872:	01 83       	std	Z+1, r16	; 0x01
     874:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	40 91 b3 04 	lds	r20, 0x04B3
     880:	50 91 b4 04 	lds	r21, 0x04B4
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	68 e0       	ldi	r22, 0x08	; 8
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <fgets>
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	61 f0       	breq	.+24     	; 0x8ac <app_timer+0x60>
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 1e 06 	call	0xc3c	; 0xc3c <atoi>
     89c:	bc 01       	movw	r22, r24
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	29 f0       	breq	.+10     	; 0x8ac <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     8a2:	ce 01       	movw	r24, r28
     8a4:	09 96       	adiw	r24, 0x09	; 9
     8a6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <insert_timer>
	}
     8aa:	de cf       	rjmp	.-68     	; 0x868 <app_timer+0x1c>
	tour_timer();
     8ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <tour_timer>
	free_timer();
     8b0:	0e 94 15 04 	call	0x82a	; 0x82a <free_timer>
}
     8b4:	62 96       	adiw	r28, 0x12	; 18
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <main>:
#include"interrupt.h"
#include"prime.h"
#include"time.h"

int main()
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	c0 58       	subi	r28, 0x80	; 128
     8d4:	d0 40       	sbci	r29, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     8e0:	0e 94 1c 03 	call	0x638	; 0x638 <uart_init>
	sei();
     8e4:	78 94       	sei
	while(1){
		printf("$ ");
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	c8 2e       	mov	r12, r24
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	d8 2e       	mov	r13, r24
     8ee:	0f 92       	push	r0
     8f0:	0f 92       	push	r0
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	d2 82       	std	Z+2, r13	; 0x02
     8f8:	c1 82       	std	Z+1, r12	; 0x01
     8fa:	0e 94 ad 06 	call	0xd5a	; 0xd5a <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	40 91 b3 04 	lds	r20, 0x04B3
     906:	50 91 b4 04 	lds	r21, 0x04B4
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	60 e8       	ldi	r22, 0x80	; 128
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 79 06 	call	0xcf2	; 0xcf2 <fgets>
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	b1 f1       	breq	.+108    	; 0x986 <main+0xbc>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) ==NULL) continue;
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	63 e0       	ldi	r22, 0x03	; 3
     920:	72 e0       	ldi	r23, 0x02	; 2
     922:	0e 94 3c 06 	call	0xc78	; 0xc78 <strtok>
     926:	8c 01       	movw	r16, r24
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	09 f3       	breq	.-62     	; 0x8ee <main+0x24>
		ap = strtok(NULL, "\n\r\t ");
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	63 e0       	ldi	r22, 0x03	; 3
     932:	72 e0       	ldi	r23, 0x02	; 2
     934:	0e 94 3c 06 	call	0xc78	; 0xc78 <strtok>
     938:	7c 01       	movw	r14, r24
		if (!strcmp(cp, "prime" )) app_prime(ap);
     93a:	c8 01       	movw	r24, r16
     93c:	68 e0       	ldi	r22, 0x08	; 8
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	0e 94 41 06 	call	0xc82	; 0xc82 <strcmp>
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	21 f4       	brne	.+8      	; 0x950 <main+0x86>
     948:	c7 01       	movw	r24, r14
     94a:	0e 94 c1 01 	call	0x382	; 0x382 <app_prime>
     94e:	cf cf       	rjmp	.-98     	; 0x8ee <main+0x24>
		else if(!strcmp(cp, "list")) app_list(ap);
     950:	c8 01       	movw	r24, r16
     952:	6e e0       	ldi	r22, 0x0E	; 14
     954:	72 e0       	ldi	r23, 0x02	; 2
     956:	0e 94 41 06 	call	0xc82	; 0xc82 <strcmp>
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	21 f4       	brne	.+8      	; 0x966 <main+0x9c>
     95e:	c7 01       	movw	r24, r14
     960:	0e 94 0e 02 	call	0x41c	; 0x41c <app_list>
     964:	c4 cf       	rjmp	.-120    	; 0x8ee <main+0x24>
		else if(!strcmp(cp, "timer")) app_timer(ap);
     966:	c8 01       	movw	r24, r16
     968:	63 e1       	ldi	r22, 0x13	; 19
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	0e 94 41 06 	call	0xc82	; 0xc82 <strcmp>
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	21 f4       	brne	.+8      	; 0x97c <main+0xb2>
     974:	c7 01       	movw	r24, r14
     976:	0e 94 26 04 	call	0x84c	; 0x84c <app_timer>
     97a:	b9 cf       	rjmp	.-142    	; 0x8ee <main+0x24>
		else printf("Unknown command...\n");
     97c:	89 e1       	ldi	r24, 0x19	; 25
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 c6 06 	call	0xd8c	; 0xd8c <puts>
     984:	b4 cf       	rjmp	.-152    	; 0x8ee <main+0x24>
	}
	printf("logout, good bye !!!\n");
     986:	8c e2       	ldi	r24, 0x2C	; 44
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <puts>
     98e:	ff cf       	rjmp	.-2      	; 0x98e <main+0xc4>

00000990 <__divmodhi4>:
     990:	97 fb       	bst	r25, 7
     992:	09 2e       	mov	r0, r25
     994:	07 26       	eor	r0, r23
     996:	0a d0       	rcall	.+20     	; 0x9ac <__divmodhi4_neg1>
     998:	77 fd       	sbrc	r23, 7
     99a:	04 d0       	rcall	.+8      	; 0x9a4 <__divmodhi4_neg2>
     99c:	0c d0       	rcall	.+24     	; 0x9b6 <__udivmodhi4>
     99e:	06 d0       	rcall	.+12     	; 0x9ac <__divmodhi4_neg1>
     9a0:	00 20       	and	r0, r0
     9a2:	1a f4       	brpl	.+6      	; 0x9aa <__divmodhi4_exit>

000009a4 <__divmodhi4_neg2>:
     9a4:	70 95       	com	r23
     9a6:	61 95       	neg	r22
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255

000009aa <__divmodhi4_exit>:
     9aa:	08 95       	ret

000009ac <__divmodhi4_neg1>:
     9ac:	f6 f7       	brtc	.-4      	; 0x9aa <__divmodhi4_exit>
     9ae:	90 95       	com	r25
     9b0:	81 95       	neg	r24
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	08 95       	ret

000009b6 <__udivmodhi4>:
     9b6:	aa 1b       	sub	r26, r26
     9b8:	bb 1b       	sub	r27, r27
     9ba:	51 e1       	ldi	r21, 0x11	; 17
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <__udivmodhi4_ep>

000009be <__udivmodhi4_loop>:
     9be:	aa 1f       	adc	r26, r26
     9c0:	bb 1f       	adc	r27, r27
     9c2:	a6 17       	cp	r26, r22
     9c4:	b7 07       	cpc	r27, r23
     9c6:	10 f0       	brcs	.+4      	; 0x9cc <__udivmodhi4_ep>
     9c8:	a6 1b       	sub	r26, r22
     9ca:	b7 0b       	sbc	r27, r23

000009cc <__udivmodhi4_ep>:
     9cc:	88 1f       	adc	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	5a 95       	dec	r21
     9d2:	a9 f7       	brne	.-22     	; 0x9be <__udivmodhi4_loop>
     9d4:	80 95       	com	r24
     9d6:	90 95       	com	r25
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	08 95       	ret

000009de <malloc>:
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ac 01       	movw	r20, r24
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	91 05       	cpc	r25, r1
     9e8:	10 f4       	brcc	.+4      	; 0x9ee <malloc+0x10>
     9ea:	42 e0       	ldi	r20, 0x02	; 2
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	e0 91 b1 04 	lds	r30, 0x04B1
     9f2:	f0 91 b2 04 	lds	r31, 0x04B2
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	24 c0       	rjmp	.+72     	; 0xa48 <malloc+0x6a>
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	84 17       	cp	r24, r20
     a06:	95 07       	cpc	r25, r21
     a08:	d0 f0       	brcs	.+52     	; 0xa3e <malloc+0x60>
     a0a:	84 17       	cp	r24, r20
     a0c:	95 07       	cpc	r25, r21
     a0e:	71 f4       	brne	.+28     	; 0xa2c <malloc+0x4e>
     a10:	82 81       	ldd	r24, Z+2	; 0x02
     a12:	93 81       	ldd	r25, Z+3	; 0x03
     a14:	10 97       	sbiw	r26, 0x00	; 0
     a16:	29 f0       	breq	.+10     	; 0xa22 <malloc+0x44>
     a18:	13 96       	adiw	r26, 0x03	; 3
     a1a:	9c 93       	st	X, r25
     a1c:	8e 93       	st	-X, r24
     a1e:	12 97       	sbiw	r26, 0x02	; 2
     a20:	2c c0       	rjmp	.+88     	; 0xa7a <malloc+0x9c>
     a22:	90 93 b2 04 	sts	0x04B2, r25
     a26:	80 93 b1 04 	sts	0x04B1, r24
     a2a:	27 c0       	rjmp	.+78     	; 0xa7a <malloc+0x9c>
     a2c:	21 15       	cp	r18, r1
     a2e:	31 05       	cpc	r19, r1
     a30:	19 f0       	breq	.+6      	; 0xa38 <malloc+0x5a>
     a32:	82 17       	cp	r24, r18
     a34:	93 07       	cpc	r25, r19
     a36:	18 f4       	brcc	.+6      	; 0xa3e <malloc+0x60>
     a38:	9c 01       	movw	r18, r24
     a3a:	bd 01       	movw	r22, r26
     a3c:	ef 01       	movw	r28, r30
     a3e:	92 81       	ldd	r25, Z+2	; 0x02
     a40:	83 81       	ldd	r24, Z+3	; 0x03
     a42:	df 01       	movw	r26, r30
     a44:	e9 2f       	mov	r30, r25
     a46:	f8 2f       	mov	r31, r24
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	d1 f6       	brne	.-76     	; 0xa00 <malloc+0x22>
     a4c:	21 15       	cp	r18, r1
     a4e:	31 05       	cpc	r19, r1
     a50:	f9 f0       	breq	.+62     	; 0xa90 <malloc+0xb2>
     a52:	c9 01       	movw	r24, r18
     a54:	84 1b       	sub	r24, r20
     a56:	95 0b       	sbc	r25, r21
     a58:	84 30       	cpi	r24, 0x04	; 4
     a5a:	91 05       	cpc	r25, r1
     a5c:	80 f4       	brcc	.+32     	; 0xa7e <malloc+0xa0>
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	9b 81       	ldd	r25, Y+3	; 0x03
     a62:	61 15       	cp	r22, r1
     a64:	71 05       	cpc	r23, r1
     a66:	21 f0       	breq	.+8      	; 0xa70 <malloc+0x92>
     a68:	fb 01       	movw	r30, r22
     a6a:	93 83       	std	Z+3, r25	; 0x03
     a6c:	82 83       	std	Z+2, r24	; 0x02
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <malloc+0x9a>
     a70:	90 93 b2 04 	sts	0x04B2, r25
     a74:	80 93 b1 04 	sts	0x04B1, r24
     a78:	fe 01       	movw	r30, r28
     a7a:	32 96       	adiw	r30, 0x02	; 2
     a7c:	42 c0       	rjmp	.+132    	; 0xb02 <malloc+0x124>
     a7e:	fe 01       	movw	r30, r28
     a80:	e8 0f       	add	r30, r24
     a82:	f9 1f       	adc	r31, r25
     a84:	41 93       	st	Z+, r20
     a86:	51 93       	st	Z+, r21
     a88:	02 97       	sbiw	r24, 0x02	; 2
     a8a:	99 83       	std	Y+1, r25	; 0x01
     a8c:	88 83       	st	Y, r24
     a8e:	39 c0       	rjmp	.+114    	; 0xb02 <malloc+0x124>
     a90:	80 91 af 04 	lds	r24, 0x04AF
     a94:	90 91 b0 04 	lds	r25, 0x04B0
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	41 f4       	brne	.+16     	; 0xaac <malloc+0xce>
     a9c:	80 91 9c 02 	lds	r24, 0x029C
     aa0:	90 91 9d 02 	lds	r25, 0x029D
     aa4:	90 93 b0 04 	sts	0x04B0, r25
     aa8:	80 93 af 04 	sts	0x04AF, r24
     aac:	20 91 9a 02 	lds	r18, 0x029A
     ab0:	30 91 9b 02 	lds	r19, 0x029B
     ab4:	21 15       	cp	r18, r1
     ab6:	31 05       	cpc	r19, r1
     ab8:	41 f4       	brne	.+16     	; 0xaca <malloc+0xec>
     aba:	2d b7       	in	r18, 0x3d	; 61
     abc:	3e b7       	in	r19, 0x3e	; 62
     abe:	80 91 9e 02 	lds	r24, 0x029E
     ac2:	90 91 9f 02 	lds	r25, 0x029F
     ac6:	28 1b       	sub	r18, r24
     ac8:	39 0b       	sbc	r19, r25
     aca:	e0 91 af 04 	lds	r30, 0x04AF
     ace:	f0 91 b0 04 	lds	r31, 0x04B0
     ad2:	e2 17       	cp	r30, r18
     ad4:	f3 07       	cpc	r31, r19
     ad6:	98 f4       	brcc	.+38     	; 0xafe <malloc+0x120>
     ad8:	2e 1b       	sub	r18, r30
     ada:	3f 0b       	sbc	r19, r31
     adc:	24 17       	cp	r18, r20
     ade:	35 07       	cpc	r19, r21
     ae0:	70 f0       	brcs	.+28     	; 0xafe <malloc+0x120>
     ae2:	ca 01       	movw	r24, r20
     ae4:	02 96       	adiw	r24, 0x02	; 2
     ae6:	28 17       	cp	r18, r24
     ae8:	39 07       	cpc	r19, r25
     aea:	48 f0       	brcs	.+18     	; 0xafe <malloc+0x120>
     aec:	8e 0f       	add	r24, r30
     aee:	9f 1f       	adc	r25, r31
     af0:	90 93 b0 04 	sts	0x04B0, r25
     af4:	80 93 af 04 	sts	0x04AF, r24
     af8:	41 93       	st	Z+, r20
     afa:	51 93       	st	Z+, r21
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <malloc+0x124>
     afe:	e0 e0       	ldi	r30, 0x00	; 0
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	cf 01       	movw	r24, r30
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <free>:
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	9c 01       	movw	r18, r24
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	09 f4       	brne	.+2      	; 0xb1a <free+0x10>
     b18:	8c c0       	rjmp	.+280    	; 0xc32 <free+0x128>
     b1a:	dc 01       	movw	r26, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	1c 92       	st	X, r1
     b22:	1e 92       	st	-X, r1
     b24:	12 97       	sbiw	r26, 0x02	; 2
     b26:	60 91 b1 04 	lds	r22, 0x04B1
     b2a:	70 91 b2 04 	lds	r23, 0x04B2
     b2e:	61 15       	cp	r22, r1
     b30:	71 05       	cpc	r23, r1
     b32:	89 f4       	brne	.+34     	; 0xb56 <free+0x4c>
     b34:	8d 91       	ld	r24, X+
     b36:	9c 91       	ld	r25, X
     b38:	11 97       	sbiw	r26, 0x01	; 1
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	20 91 af 04 	lds	r18, 0x04AF
     b42:	30 91 b0 04 	lds	r19, 0x04B0
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	69 f5       	brne	.+90     	; 0xba6 <free+0x9c>
     b4c:	b0 93 b0 04 	sts	0x04B0, r27
     b50:	a0 93 af 04 	sts	0x04AF, r26
     b54:	6e c0       	rjmp	.+220    	; 0xc32 <free+0x128>
     b56:	fb 01       	movw	r30, r22
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <free+0x56>
     b5e:	fc 01       	movw	r30, r24
     b60:	ea 17       	cp	r30, r26
     b62:	fb 07       	cpc	r31, r27
     b64:	30 f4       	brcc	.+12     	; 0xb72 <free+0x68>
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	af 01       	movw	r20, r30
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	b9 f7       	brne	.-18     	; 0xb5e <free+0x54>
     b70:	1f c0       	rjmp	.+62     	; 0xbb0 <free+0xa6>
     b72:	e9 01       	movw	r28, r18
     b74:	22 97       	sbiw	r28, 0x02	; 2
     b76:	fb 83       	std	Y+3, r31	; 0x03
     b78:	ea 83       	std	Y+2, r30	; 0x02
     b7a:	08 81       	ld	r16, Y
     b7c:	19 81       	ldd	r17, Y+1	; 0x01
     b7e:	c9 01       	movw	r24, r18
     b80:	80 0f       	add	r24, r16
     b82:	91 1f       	adc	r25, r17
     b84:	8e 17       	cp	r24, r30
     b86:	9f 07       	cpc	r25, r31
     b88:	59 f4       	brne	.+22     	; 0xba0 <free+0x96>
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	80 0f       	add	r24, r16
     b90:	91 1f       	adc	r25, r17
     b92:	02 96       	adiw	r24, 0x02	; 2
     b94:	99 83       	std	Y+1, r25	; 0x01
     b96:	88 83       	st	Y, r24
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	9b 83       	std	Y+3, r25	; 0x03
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	29 f4       	brne	.+10     	; 0xbb0 <free+0xa6>
     ba6:	b0 93 b2 04 	sts	0x04B2, r27
     baa:	a0 93 b1 04 	sts	0x04B1, r26
     bae:	41 c0       	rjmp	.+130    	; 0xc32 <free+0x128>
     bb0:	fa 01       	movw	r30, r20
     bb2:	b3 83       	std	Z+3, r27	; 0x03
     bb4:	a2 83       	std	Z+2, r26	; 0x02
     bb6:	c1 91       	ld	r28, Z+
     bb8:	d1 91       	ld	r29, Z+
     bba:	ec 0f       	add	r30, r28
     bbc:	fd 1f       	adc	r31, r29
     bbe:	ae 17       	cp	r26, r30
     bc0:	bf 07       	cpc	r27, r31
     bc2:	81 f4       	brne	.+32     	; 0xbe4 <free+0xda>
     bc4:	f9 01       	movw	r30, r18
     bc6:	92 91       	ld	r25, -Z
     bc8:	82 91       	ld	r24, -Z
     bca:	8c 0f       	add	r24, r28
     bcc:	9d 1f       	adc	r25, r29
     bce:	02 96       	adiw	r24, 0x02	; 2
     bd0:	da 01       	movw	r26, r20
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	9c 93       	st	X, r25
     bd6:	8e 93       	st	-X, r24
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	9c 93       	st	X, r25
     be0:	8e 93       	st	-X, r24
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	e0 e0       	ldi	r30, 0x00	; 0
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <free+0xe4>
     bea:	fb 01       	movw	r30, r22
     bec:	bc 01       	movw	r22, r24
     bee:	db 01       	movw	r26, r22
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	8d 91       	ld	r24, X+
     bf4:	9c 91       	ld	r25, X
     bf6:	13 97       	sbiw	r26, 0x03	; 3
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	b9 f7       	brne	.-18     	; 0xbea <free+0xe0>
     bfc:	cb 01       	movw	r24, r22
     bfe:	02 96       	adiw	r24, 0x02	; 2
     c00:	2d 91       	ld	r18, X+
     c02:	3c 91       	ld	r19, X
     c04:	11 97       	sbiw	r26, 0x01	; 1
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	20 91 af 04 	lds	r18, 0x04AF
     c0e:	30 91 b0 04 	lds	r19, 0x04B0
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	69 f4       	brne	.+26     	; 0xc32 <free+0x128>
     c18:	30 97       	sbiw	r30, 0x00	; 0
     c1a:	29 f4       	brne	.+10     	; 0xc26 <free+0x11c>
     c1c:	10 92 b2 04 	sts	0x04B2, r1
     c20:	10 92 b1 04 	sts	0x04B1, r1
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <free+0x120>
     c26:	13 82       	std	Z+3, r1	; 0x03
     c28:	12 82       	std	Z+2, r1	; 0x02
     c2a:	70 93 b0 04 	sts	0x04B0, r23
     c2e:	60 93 af 04 	sts	0x04AF, r22
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <atoi>:
     c3c:	fc 01       	movw	r30, r24
     c3e:	88 27       	eor	r24, r24
     c40:	99 27       	eor	r25, r25
     c42:	e8 94       	clt
     c44:	21 91       	ld	r18, Z+
     c46:	20 32       	cpi	r18, 0x20	; 32
     c48:	e9 f3       	breq	.-6      	; 0xc44 <atoi+0x8>
     c4a:	29 30       	cpi	r18, 0x09	; 9
     c4c:	10 f0       	brcs	.+4      	; 0xc52 <atoi+0x16>
     c4e:	2e 30       	cpi	r18, 0x0E	; 14
     c50:	c8 f3       	brcs	.-14     	; 0xc44 <atoi+0x8>
     c52:	2b 32       	cpi	r18, 0x2B	; 43
     c54:	41 f0       	breq	.+16     	; 0xc66 <atoi+0x2a>
     c56:	2d 32       	cpi	r18, 0x2D	; 45
     c58:	39 f4       	brne	.+14     	; 0xc68 <atoi+0x2c>
     c5a:	68 94       	set
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <atoi+0x2a>
     c5e:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulhi_const_10>
     c62:	82 0f       	add	r24, r18
     c64:	91 1d       	adc	r25, r1
     c66:	21 91       	ld	r18, Z+
     c68:	20 53       	subi	r18, 0x30	; 48
     c6a:	2a 30       	cpi	r18, 0x0A	; 10
     c6c:	c0 f3       	brcs	.-16     	; 0xc5e <atoi+0x22>
     c6e:	1e f4       	brtc	.+6      	; 0xc76 <atoi+0x3a>
     c70:	90 95       	com	r25
     c72:	81 95       	neg	r24
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	08 95       	ret

00000c78 <strtok>:
     c78:	44 ea       	ldi	r20, 0xA4	; 164
     c7a:	52 e0       	ldi	r21, 0x02	; 2
     c7c:	0e 94 4a 06 	call	0xc94	; 0xc94 <strtok_r>
     c80:	08 95       	ret

00000c82 <strcmp>:
     c82:	fb 01       	movw	r30, r22
     c84:	dc 01       	movw	r26, r24
     c86:	8d 91       	ld	r24, X+
     c88:	01 90       	ld	r0, Z+
     c8a:	80 19       	sub	r24, r0
     c8c:	01 10       	cpse	r0, r1
     c8e:	d9 f3       	breq	.-10     	; 0xc86 <strcmp+0x4>
     c90:	99 0b       	sbc	r25, r25
     c92:	08 95       	ret

00000c94 <strtok_r>:
     c94:	fa 01       	movw	r30, r20
     c96:	a1 91       	ld	r26, Z+
     c98:	b0 81       	ld	r27, Z
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	19 f4       	brne	.+6      	; 0xca4 <strtok_r+0x10>
     c9e:	10 97       	sbiw	r26, 0x00	; 0
     ca0:	e1 f0       	breq	.+56     	; 0xcda <strtok_r+0x46>
     ca2:	cd 01       	movw	r24, r26
     ca4:	dc 01       	movw	r26, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0d 90       	ld	r0, X+
     caa:	00 20       	and	r0, r0
     cac:	11 f4       	brne	.+4      	; 0xcb2 <strtok_r+0x1e>
     cae:	c0 01       	movw	r24, r0
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <strtok_r+0x44>
     cb2:	fb 01       	movw	r30, r22
     cb4:	21 91       	ld	r18, Z+
     cb6:	22 23       	and	r18, r18
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <strtok_r+0x2c>
     cba:	20 15       	cp	r18, r0
     cbc:	d9 f7       	brne	.-10     	; 0xcb4 <strtok_r+0x20>
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <strtok_r+0x12>
     cc0:	fb 01       	movw	r30, r22
     cc2:	21 91       	ld	r18, Z+
     cc4:	20 15       	cp	r18, r0
     cc6:	19 f4       	brne	.+6      	; 0xcce <strtok_r+0x3a>
     cc8:	1e 92       	st	-X, r1
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <strtok_r+0x46>
     cce:	22 23       	and	r18, r18
     cd0:	c1 f7       	brne	.-16     	; 0xcc2 <strtok_r+0x2e>
     cd2:	0d 90       	ld	r0, X+
     cd4:	00 20       	and	r0, r0
     cd6:	a1 f7       	brne	.-24     	; 0xcc0 <strtok_r+0x2c>
     cd8:	d0 01       	movw	r26, r0
     cda:	fa 01       	movw	r30, r20
     cdc:	a1 93       	st	Z+, r26
     cde:	b0 83       	st	Z, r27
     ce0:	08 95       	ret

00000ce2 <__mulhi_const_10>:
     ce2:	7a e0       	ldi	r23, 0x0A	; 10
     ce4:	97 9f       	mul	r25, r23
     ce6:	90 2d       	mov	r25, r0
     ce8:	87 9f       	mul	r24, r23
     cea:	80 2d       	mov	r24, r0
     cec:	91 0d       	add	r25, r1
     cee:	11 24       	eor	r1, r1
     cf0:	08 95       	ret

00000cf2 <fgets>:
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	8c 01       	movw	r16, r24
     d04:	6a 01       	movw	r12, r20
     d06:	fa 01       	movw	r30, r20
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	80 ff       	sbrs	r24, 0
     d0c:	1a c0       	rjmp	.+52     	; 0xd42 <fgets+0x50>
     d0e:	16 16       	cp	r1, r22
     d10:	17 06       	cpc	r1, r23
     d12:	bc f4       	brge	.+46     	; 0xd42 <fgets+0x50>
     d14:	7b 01       	movw	r14, r22
     d16:	e8 01       	movw	r28, r16
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <fgets+0x44>
     d1a:	c6 01       	movw	r24, r12
     d1c:	0e 94 11 09 	call	0x1222	; 0x1222 <fgetc>
     d20:	ff ef       	ldi	r31, 0xFF	; 255
     d22:	8f 3f       	cpi	r24, 0xFF	; 255
     d24:	9f 07       	cpc	r25, r31
     d26:	69 f0       	breq	.+26     	; 0xd42 <fgets+0x50>
     d28:	89 93       	st	Y+, r24
     d2a:	08 94       	sec
     d2c:	e1 08       	sbc	r14, r1
     d2e:	f1 08       	sbc	r15, r1
     d30:	8a 30       	cpi	r24, 0x0A	; 10
     d32:	91 05       	cpc	r25, r1
     d34:	21 f0       	breq	.+8      	; 0xd3e <fgets+0x4c>
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	e2 16       	cp	r14, r18
     d3a:	f1 04       	cpc	r15, r1
     d3c:	71 f7       	brne	.-36     	; 0xd1a <fgets+0x28>
     d3e:	18 82       	st	Y, r1
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <fgets+0x54>
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	10 e0       	ldi	r17, 0x00	; 0
     d46:	c8 01       	movw	r24, r16
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <printf>:
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	fe 01       	movw	r30, r28
     d64:	36 96       	adiw	r30, 0x06	; 6
     d66:	61 91       	ld	r22, Z+
     d68:	71 91       	ld	r23, Z+
     d6a:	80 91 b5 04 	lds	r24, 0x04B5
     d6e:	90 91 b6 04 	lds	r25, 0x04B6
     d72:	af 01       	movw	r20, r30
     d74:	0e 94 f4 06 	call	0xde8	; 0xde8 <vfprintf>
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <putchar>:
     d7e:	60 91 b5 04 	lds	r22, 0x04B5
     d82:	70 91 b6 04 	lds	r23, 0x04B6
     d86:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     d8a:	08 95       	ret

00000d8c <puts>:
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	8c 01       	movw	r16, r24
     d96:	e0 91 b5 04 	lds	r30, 0x04B5
     d9a:	f0 91 b6 04 	lds	r31, 0x04B6
     d9e:	83 81       	ldd	r24, Z+3	; 0x03
     da0:	81 ff       	sbrs	r24, 1
     da2:	1a c0       	rjmp	.+52     	; 0xdd8 <puts+0x4c>
     da4:	c0 e0       	ldi	r28, 0x00	; 0
     da6:	d0 e0       	ldi	r29, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <puts+0x28>
     daa:	19 95       	eicall
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	11 f0       	breq	.+4      	; 0xdb4 <puts+0x28>
     db0:	cf ef       	ldi	r28, 0xFF	; 255
     db2:	df ef       	ldi	r29, 0xFF	; 255
     db4:	f8 01       	movw	r30, r16
     db6:	81 91       	ld	r24, Z+
     db8:	8f 01       	movw	r16, r30
     dba:	60 91 b5 04 	lds	r22, 0x04B5
     dbe:	70 91 b6 04 	lds	r23, 0x04B6
     dc2:	db 01       	movw	r26, r22
     dc4:	18 96       	adiw	r26, 0x08	; 8
     dc6:	ed 91       	ld	r30, X+
     dc8:	fc 91       	ld	r31, X
     dca:	19 97       	sbiw	r26, 0x09	; 9
     dcc:	88 23       	and	r24, r24
     dce:	69 f7       	brne	.-38     	; 0xdaa <puts+0x1e>
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	19 95       	eicall
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	11 f0       	breq	.+4      	; 0xddc <puts+0x50>
     dd8:	cf ef       	ldi	r28, 0xFF	; 255
     dda:	df ef       	ldi	r29, 0xFF	; 255
     ddc:	ce 01       	movw	r24, r28
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	08 95       	ret

00000de8 <vfprintf>:
     de8:	2f 92       	push	r2
     dea:	3f 92       	push	r3
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	2d 97       	sbiw	r28, 0x0d	; 13
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	3c 01       	movw	r6, r24
     e1e:	7d 87       	std	Y+13, r23	; 0x0d
     e20:	6c 87       	std	Y+12, r22	; 0x0c
     e22:	5a 01       	movw	r10, r20
     e24:	fc 01       	movw	r30, r24
     e26:	17 82       	std	Z+7, r1	; 0x07
     e28:	16 82       	std	Z+6, r1	; 0x06
     e2a:	83 81       	ldd	r24, Z+3	; 0x03
     e2c:	81 ff       	sbrs	r24, 1
     e2e:	c8 c1       	rjmp	.+912    	; 0x11c0 <vfprintf+0x3d8>
     e30:	2e 01       	movw	r4, r28
     e32:	08 94       	sec
     e34:	41 1c       	adc	r4, r1
     e36:	51 1c       	adc	r5, r1
     e38:	f3 01       	movw	r30, r6
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	ec 85       	ldd	r30, Y+12	; 0x0c
     e3e:	fd 85       	ldd	r31, Y+13	; 0x0d
     e40:	93 fd       	sbrc	r25, 3
     e42:	85 91       	lpm	r24, Z+
     e44:	93 ff       	sbrs	r25, 3
     e46:	81 91       	ld	r24, Z+
     e48:	fd 87       	std	Y+13, r31	; 0x0d
     e4a:	ec 87       	std	Y+12, r30	; 0x0c
     e4c:	88 23       	and	r24, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <vfprintf+0x6a>
     e50:	b3 c1       	rjmp	.+870    	; 0x11b8 <vfprintf+0x3d0>
     e52:	85 32       	cpi	r24, 0x25	; 37
     e54:	41 f4       	brne	.+16     	; 0xe66 <vfprintf+0x7e>
     e56:	93 fd       	sbrc	r25, 3
     e58:	85 91       	lpm	r24, Z+
     e5a:	93 ff       	sbrs	r25, 3
     e5c:	81 91       	ld	r24, Z+
     e5e:	fd 87       	std	Y+13, r31	; 0x0d
     e60:	ec 87       	std	Y+12, r30	; 0x0c
     e62:	85 32       	cpi	r24, 0x25	; 37
     e64:	29 f4       	brne	.+10     	; 0xe70 <vfprintf+0x88>
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b3 01       	movw	r22, r6
     e6a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     e6e:	e4 cf       	rjmp	.-56     	; 0xe38 <vfprintf+0x50>
     e70:	ff 24       	eor	r15, r15
     e72:	ee 24       	eor	r14, r14
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	10 32       	cpi	r17, 0x20	; 32
     e78:	b0 f4       	brcc	.+44     	; 0xea6 <vfprintf+0xbe>
     e7a:	8b 32       	cpi	r24, 0x2B	; 43
     e7c:	69 f0       	breq	.+26     	; 0xe98 <vfprintf+0xb0>
     e7e:	8c 32       	cpi	r24, 0x2C	; 44
     e80:	28 f4       	brcc	.+10     	; 0xe8c <vfprintf+0xa4>
     e82:	80 32       	cpi	r24, 0x20	; 32
     e84:	51 f0       	breq	.+20     	; 0xe9a <vfprintf+0xb2>
     e86:	83 32       	cpi	r24, 0x23	; 35
     e88:	71 f4       	brne	.+28     	; 0xea6 <vfprintf+0xbe>
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <vfprintf+0xba>
     e8c:	8d 32       	cpi	r24, 0x2D	; 45
     e8e:	39 f0       	breq	.+14     	; 0xe9e <vfprintf+0xb6>
     e90:	80 33       	cpi	r24, 0x30	; 48
     e92:	49 f4       	brne	.+18     	; 0xea6 <vfprintf+0xbe>
     e94:	11 60       	ori	r17, 0x01	; 1
     e96:	2c c0       	rjmp	.+88     	; 0xef0 <vfprintf+0x108>
     e98:	12 60       	ori	r17, 0x02	; 2
     e9a:	14 60       	ori	r17, 0x04	; 4
     e9c:	29 c0       	rjmp	.+82     	; 0xef0 <vfprintf+0x108>
     e9e:	18 60       	ori	r17, 0x08	; 8
     ea0:	27 c0       	rjmp	.+78     	; 0xef0 <vfprintf+0x108>
     ea2:	10 61       	ori	r17, 0x10	; 16
     ea4:	25 c0       	rjmp	.+74     	; 0xef0 <vfprintf+0x108>
     ea6:	17 fd       	sbrc	r17, 7
     ea8:	2e c0       	rjmp	.+92     	; 0xf06 <vfprintf+0x11e>
     eaa:	28 2f       	mov	r18, r24
     eac:	20 53       	subi	r18, 0x30	; 48
     eae:	2a 30       	cpi	r18, 0x0A	; 10
     eb0:	98 f4       	brcc	.+38     	; 0xed8 <vfprintf+0xf0>
     eb2:	16 ff       	sbrs	r17, 6
     eb4:	08 c0       	rjmp	.+16     	; 0xec6 <vfprintf+0xde>
     eb6:	8f 2d       	mov	r24, r15
     eb8:	88 0f       	add	r24, r24
     eba:	f8 2e       	mov	r15, r24
     ebc:	ff 0c       	add	r15, r15
     ebe:	ff 0c       	add	r15, r15
     ec0:	f8 0e       	add	r15, r24
     ec2:	f2 0e       	add	r15, r18
     ec4:	15 c0       	rjmp	.+42     	; 0xef0 <vfprintf+0x108>
     ec6:	8e 2d       	mov	r24, r14
     ec8:	88 0f       	add	r24, r24
     eca:	e8 2e       	mov	r14, r24
     ecc:	ee 0c       	add	r14, r14
     ece:	ee 0c       	add	r14, r14
     ed0:	e8 0e       	add	r14, r24
     ed2:	e2 0e       	add	r14, r18
     ed4:	10 62       	ori	r17, 0x20	; 32
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <vfprintf+0x108>
     ed8:	8e 32       	cpi	r24, 0x2E	; 46
     eda:	21 f4       	brne	.+8      	; 0xee4 <vfprintf+0xfc>
     edc:	16 fd       	sbrc	r17, 6
     ede:	6c c1       	rjmp	.+728    	; 0x11b8 <vfprintf+0x3d0>
     ee0:	10 64       	ori	r17, 0x40	; 64
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <vfprintf+0x108>
     ee4:	8c 36       	cpi	r24, 0x6C	; 108
     ee6:	11 f4       	brne	.+4      	; 0xeec <vfprintf+0x104>
     ee8:	10 68       	ori	r17, 0x80	; 128
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x108>
     eec:	88 36       	cpi	r24, 0x68	; 104
     eee:	59 f4       	brne	.+22     	; 0xf06 <vfprintf+0x11e>
     ef0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ef2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ef4:	93 fd       	sbrc	r25, 3
     ef6:	85 91       	lpm	r24, Z+
     ef8:	93 ff       	sbrs	r25, 3
     efa:	81 91       	ld	r24, Z+
     efc:	fd 87       	std	Y+13, r31	; 0x0d
     efe:	ec 87       	std	Y+12, r30	; 0x0c
     f00:	88 23       	and	r24, r24
     f02:	09 f0       	breq	.+2      	; 0xf06 <vfprintf+0x11e>
     f04:	b8 cf       	rjmp	.-144    	; 0xe76 <vfprintf+0x8e>
     f06:	98 2f       	mov	r25, r24
     f08:	95 54       	subi	r25, 0x45	; 69
     f0a:	93 30       	cpi	r25, 0x03	; 3
     f0c:	18 f0       	brcs	.+6      	; 0xf14 <vfprintf+0x12c>
     f0e:	90 52       	subi	r25, 0x20	; 32
     f10:	93 30       	cpi	r25, 0x03	; 3
     f12:	38 f4       	brcc	.+14     	; 0xf22 <vfprintf+0x13a>
     f14:	24 e0       	ldi	r18, 0x04	; 4
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a2 0e       	add	r10, r18
     f1a:	b3 1e       	adc	r11, r19
     f1c:	3f e3       	ldi	r19, 0x3F	; 63
     f1e:	39 83       	std	Y+1, r19	; 0x01
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <vfprintf+0x158>
     f22:	83 36       	cpi	r24, 0x63	; 99
     f24:	31 f0       	breq	.+12     	; 0xf32 <vfprintf+0x14a>
     f26:	83 37       	cpi	r24, 0x73	; 115
     f28:	81 f0       	breq	.+32     	; 0xf4a <vfprintf+0x162>
     f2a:	83 35       	cpi	r24, 0x53	; 83
     f2c:	09 f0       	breq	.+2      	; 0xf30 <vfprintf+0x148>
     f2e:	5a c0       	rjmp	.+180    	; 0xfe4 <vfprintf+0x1fc>
     f30:	22 c0       	rjmp	.+68     	; 0xf76 <vfprintf+0x18e>
     f32:	f5 01       	movw	r30, r10
     f34:	80 81       	ld	r24, Z
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	22 e0       	ldi	r18, 0x02	; 2
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	a2 0e       	add	r10, r18
     f3e:	b3 1e       	adc	r11, r19
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	c2 2e       	mov	r12, r18
     f44:	d1 2c       	mov	r13, r1
     f46:	42 01       	movw	r8, r4
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <vfprintf+0x18a>
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	29 2e       	mov	r2, r25
     f4e:	31 2c       	mov	r3, r1
     f50:	2a 0c       	add	r2, r10
     f52:	3b 1c       	adc	r3, r11
     f54:	f5 01       	movw	r30, r10
     f56:	80 80       	ld	r8, Z
     f58:	91 80       	ldd	r9, Z+1	; 0x01
     f5a:	16 ff       	sbrs	r17, 6
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <vfprintf+0x17c>
     f5e:	6f 2d       	mov	r22, r15
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x180>
     f64:	6f ef       	ldi	r22, 0xFF	; 255
     f66:	7f ef       	ldi	r23, 0xFF	; 255
     f68:	c4 01       	movw	r24, r8
     f6a:	0e 94 06 09 	call	0x120c	; 0x120c <strnlen>
     f6e:	6c 01       	movw	r12, r24
     f70:	51 01       	movw	r10, r2
     f72:	1f 77       	andi	r17, 0x7F	; 127
     f74:	15 c0       	rjmp	.+42     	; 0xfa0 <vfprintf+0x1b8>
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	28 2e       	mov	r2, r24
     f7a:	31 2c       	mov	r3, r1
     f7c:	2a 0c       	add	r2, r10
     f7e:	3b 1c       	adc	r3, r11
     f80:	f5 01       	movw	r30, r10
     f82:	80 80       	ld	r8, Z
     f84:	91 80       	ldd	r9, Z+1	; 0x01
     f86:	16 ff       	sbrs	r17, 6
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <vfprintf+0x1a8>
     f8a:	6f 2d       	mov	r22, r15
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0x1ac>
     f90:	6f ef       	ldi	r22, 0xFF	; 255
     f92:	7f ef       	ldi	r23, 0xFF	; 255
     f94:	c4 01       	movw	r24, r8
     f96:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <strnlen_P>
     f9a:	6c 01       	movw	r12, r24
     f9c:	10 68       	ori	r17, 0x80	; 128
     f9e:	51 01       	movw	r10, r2
     fa0:	13 fd       	sbrc	r17, 3
     fa2:	1c c0       	rjmp	.+56     	; 0xfdc <vfprintf+0x1f4>
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <vfprintf+0x1ca>
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	b3 01       	movw	r22, r6
     fac:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     fb0:	ea 94       	dec	r14
     fb2:	8e 2d       	mov	r24, r14
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	c8 16       	cp	r12, r24
     fb8:	d9 06       	cpc	r13, r25
     fba:	a8 f3       	brcs	.-22     	; 0xfa6 <vfprintf+0x1be>
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <vfprintf+0x1f4>
     fbe:	f4 01       	movw	r30, r8
     fc0:	17 fd       	sbrc	r17, 7
     fc2:	85 91       	lpm	r24, Z+
     fc4:	17 ff       	sbrs	r17, 7
     fc6:	81 91       	ld	r24, Z+
     fc8:	4f 01       	movw	r8, r30
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	b3 01       	movw	r22, r6
     fce:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     fd2:	e1 10       	cpse	r14, r1
     fd4:	ea 94       	dec	r14
     fd6:	08 94       	sec
     fd8:	c1 08       	sbc	r12, r1
     fda:	d1 08       	sbc	r13, r1
     fdc:	c1 14       	cp	r12, r1
     fde:	d1 04       	cpc	r13, r1
     fe0:	71 f7       	brne	.-36     	; 0xfbe <vfprintf+0x1d6>
     fe2:	e7 c0       	rjmp	.+462    	; 0x11b2 <vfprintf+0x3ca>
     fe4:	84 36       	cpi	r24, 0x64	; 100
     fe6:	11 f0       	breq	.+4      	; 0xfec <vfprintf+0x204>
     fe8:	89 36       	cpi	r24, 0x69	; 105
     fea:	51 f5       	brne	.+84     	; 0x1040 <vfprintf+0x258>
     fec:	f5 01       	movw	r30, r10
     fee:	17 ff       	sbrs	r17, 7
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <vfprintf+0x218>
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	a2 81       	ldd	r26, Z+2	; 0x02
     ff8:	b3 81       	ldd	r27, Z+3	; 0x03
     ffa:	24 e0       	ldi	r18, 0x04	; 4
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <vfprintf+0x228>
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	aa 27       	eor	r26, r26
    1006:	97 fd       	sbrc	r25, 7
    1008:	a0 95       	com	r26
    100a:	ba 2f       	mov	r27, r26
    100c:	22 e0       	ldi	r18, 0x02	; 2
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	a2 0e       	add	r10, r18
    1012:	b3 1e       	adc	r11, r19
    1014:	01 2f       	mov	r16, r17
    1016:	0f 76       	andi	r16, 0x6F	; 111
    1018:	b7 ff       	sbrs	r27, 7
    101a:	08 c0       	rjmp	.+16     	; 0x102c <vfprintf+0x244>
    101c:	b0 95       	com	r27
    101e:	a0 95       	com	r26
    1020:	90 95       	com	r25
    1022:	81 95       	neg	r24
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	af 4f       	sbci	r26, 0xFF	; 255
    1028:	bf 4f       	sbci	r27, 0xFF	; 255
    102a:	00 68       	ori	r16, 0x80	; 128
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	a2 01       	movw	r20, r4
    1032:	2a e0       	ldi	r18, 0x0A	; 10
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__ultoa_invert>
    103a:	d8 2e       	mov	r13, r24
    103c:	d4 18       	sub	r13, r4
    103e:	3f c0       	rjmp	.+126    	; 0x10be <vfprintf+0x2d6>
    1040:	85 37       	cpi	r24, 0x75	; 117
    1042:	21 f4       	brne	.+8      	; 0x104c <vfprintf+0x264>
    1044:	1f 7e       	andi	r17, 0xEF	; 239
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	20 c0       	rjmp	.+64     	; 0x108c <vfprintf+0x2a4>
    104c:	19 7f       	andi	r17, 0xF9	; 249
    104e:	8f 36       	cpi	r24, 0x6F	; 111
    1050:	a9 f0       	breq	.+42     	; 0x107c <vfprintf+0x294>
    1052:	80 37       	cpi	r24, 0x70	; 112
    1054:	20 f4       	brcc	.+8      	; 0x105e <vfprintf+0x276>
    1056:	88 35       	cpi	r24, 0x58	; 88
    1058:	09 f0       	breq	.+2      	; 0x105c <vfprintf+0x274>
    105a:	ae c0       	rjmp	.+348    	; 0x11b8 <vfprintf+0x3d0>
    105c:	0b c0       	rjmp	.+22     	; 0x1074 <vfprintf+0x28c>
    105e:	80 37       	cpi	r24, 0x70	; 112
    1060:	21 f0       	breq	.+8      	; 0x106a <vfprintf+0x282>
    1062:	88 37       	cpi	r24, 0x78	; 120
    1064:	09 f0       	breq	.+2      	; 0x1068 <vfprintf+0x280>
    1066:	a8 c0       	rjmp	.+336    	; 0x11b8 <vfprintf+0x3d0>
    1068:	01 c0       	rjmp	.+2      	; 0x106c <vfprintf+0x284>
    106a:	10 61       	ori	r17, 0x10	; 16
    106c:	14 ff       	sbrs	r17, 4
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x29a>
    1070:	14 60       	ori	r17, 0x04	; 4
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <vfprintf+0x29a>
    1074:	14 ff       	sbrs	r17, 4
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <vfprintf+0x2a0>
    1078:	16 60       	ori	r17, 0x06	; 6
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x2a0>
    107c:	28 e0       	ldi	r18, 0x08	; 8
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	05 c0       	rjmp	.+10     	; 0x108c <vfprintf+0x2a4>
    1082:	20 e1       	ldi	r18, 0x10	; 16
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x2a4>
    1088:	20 e1       	ldi	r18, 0x10	; 16
    108a:	32 e0       	ldi	r19, 0x02	; 2
    108c:	f5 01       	movw	r30, r10
    108e:	17 ff       	sbrs	r17, 7
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <vfprintf+0x2b8>
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	44 e0       	ldi	r20, 0x04	; 4
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x2c4>
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	42 e0       	ldi	r20, 0x02	; 2
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	a4 0e       	add	r10, r20
    10ae:	b5 1e       	adc	r11, r21
    10b0:	a2 01       	movw	r20, r4
    10b2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__ultoa_invert>
    10b6:	d8 2e       	mov	r13, r24
    10b8:	d4 18       	sub	r13, r4
    10ba:	01 2f       	mov	r16, r17
    10bc:	0f 77       	andi	r16, 0x7F	; 127
    10be:	06 ff       	sbrs	r16, 6
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x2ec>
    10c2:	0e 7f       	andi	r16, 0xFE	; 254
    10c4:	df 14       	cp	r13, r15
    10c6:	30 f4       	brcc	.+12     	; 0x10d4 <vfprintf+0x2ec>
    10c8:	04 ff       	sbrs	r16, 4
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <vfprintf+0x2f0>
    10cc:	02 fd       	sbrc	r16, 2
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <vfprintf+0x2f0>
    10d0:	0f 7e       	andi	r16, 0xEF	; 239
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x2f0>
    10d4:	1d 2d       	mov	r17, r13
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <vfprintf+0x2f2>
    10d8:	1f 2d       	mov	r17, r15
    10da:	80 2f       	mov	r24, r16
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	04 ff       	sbrs	r16, 4
    10e0:	0c c0       	rjmp	.+24     	; 0x10fa <vfprintf+0x312>
    10e2:	fe 01       	movw	r30, r28
    10e4:	ed 0d       	add	r30, r13
    10e6:	f1 1d       	adc	r31, r1
    10e8:	20 81       	ld	r18, Z
    10ea:	20 33       	cpi	r18, 0x30	; 48
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <vfprintf+0x30a>
    10ee:	09 7e       	andi	r16, 0xE9	; 233
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x31c>
    10f2:	02 ff       	sbrs	r16, 2
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <vfprintf+0x31a>
    10f6:	1e 5f       	subi	r17, 0xFE	; 254
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <vfprintf+0x31c>
    10fa:	86 78       	andi	r24, 0x86	; 134
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	09 f0       	breq	.+2      	; 0x1104 <vfprintf+0x31c>
    1102:	1f 5f       	subi	r17, 0xFF	; 255
    1104:	80 2e       	mov	r8, r16
    1106:	99 24       	eor	r9, r9
    1108:	03 fd       	sbrc	r16, 3
    110a:	12 c0       	rjmp	.+36     	; 0x1130 <vfprintf+0x348>
    110c:	00 ff       	sbrs	r16, 0
    110e:	0d c0       	rjmp	.+26     	; 0x112a <vfprintf+0x342>
    1110:	fd 2c       	mov	r15, r13
    1112:	1e 15       	cp	r17, r14
    1114:	50 f4       	brcc	.+20     	; 0x112a <vfprintf+0x342>
    1116:	fe 0c       	add	r15, r14
    1118:	f1 1a       	sub	r15, r17
    111a:	1e 2d       	mov	r17, r14
    111c:	06 c0       	rjmp	.+12     	; 0x112a <vfprintf+0x342>
    111e:	80 e2       	ldi	r24, 0x20	; 32
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	b3 01       	movw	r22, r6
    1124:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    1128:	1f 5f       	subi	r17, 0xFF	; 255
    112a:	1e 15       	cp	r17, r14
    112c:	c0 f3       	brcs	.-16     	; 0x111e <vfprintf+0x336>
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <vfprintf+0x350>
    1130:	1e 15       	cp	r17, r14
    1132:	10 f4       	brcc	.+4      	; 0x1138 <vfprintf+0x350>
    1134:	e1 1a       	sub	r14, r17
    1136:	01 c0       	rjmp	.+2      	; 0x113a <vfprintf+0x352>
    1138:	ee 24       	eor	r14, r14
    113a:	84 fe       	sbrs	r8, 4
    113c:	0f c0       	rjmp	.+30     	; 0x115c <vfprintf+0x374>
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	b3 01       	movw	r22, r6
    1144:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    1148:	82 fe       	sbrs	r8, 2
    114a:	1f c0       	rjmp	.+62     	; 0x118a <vfprintf+0x3a2>
    114c:	81 fe       	sbrs	r8, 1
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <vfprintf+0x36e>
    1150:	88 e5       	ldi	r24, 0x58	; 88
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	10 c0       	rjmp	.+32     	; 0x1176 <vfprintf+0x38e>
    1156:	88 e7       	ldi	r24, 0x78	; 120
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x38e>
    115c:	c4 01       	movw	r24, r8
    115e:	86 78       	andi	r24, 0x86	; 134
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	91 f0       	breq	.+36     	; 0x118a <vfprintf+0x3a2>
    1166:	81 fc       	sbrc	r8, 1
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x386>
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x388>
    116e:	8b e2       	ldi	r24, 0x2B	; 43
    1170:	07 fd       	sbrc	r16, 7
    1172:	8d e2       	ldi	r24, 0x2D	; 45
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	b3 01       	movw	r22, r6
    1178:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    117c:	06 c0       	rjmp	.+12     	; 0x118a <vfprintf+0x3a2>
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	b3 01       	movw	r22, r6
    1184:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    1188:	fa 94       	dec	r15
    118a:	df 14       	cp	r13, r15
    118c:	c0 f3       	brcs	.-16     	; 0x117e <vfprintf+0x396>
    118e:	da 94       	dec	r13
    1190:	f2 01       	movw	r30, r4
    1192:	ed 0d       	add	r30, r13
    1194:	f1 1d       	adc	r31, r1
    1196:	80 81       	ld	r24, Z
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    11a0:	dd 20       	and	r13, r13
    11a2:	a9 f7       	brne	.-22     	; 0x118e <vfprintf+0x3a6>
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0x3ca>
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	b3 01       	movw	r22, r6
    11ac:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
    11b0:	ea 94       	dec	r14
    11b2:	ee 20       	and	r14, r14
    11b4:	c1 f7       	brne	.-16     	; 0x11a6 <vfprintf+0x3be>
    11b6:	40 ce       	rjmp	.-896    	; 0xe38 <vfprintf+0x50>
    11b8:	f3 01       	movw	r30, r6
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <vfprintf+0x3dc>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	2d 96       	adiw	r28, 0x0d	; 13
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	7f 90       	pop	r7
    11ea:	6f 90       	pop	r6
    11ec:	5f 90       	pop	r5
    11ee:	4f 90       	pop	r4
    11f0:	3f 90       	pop	r3
    11f2:	2f 90       	pop	r2
    11f4:	08 95       	ret

000011f6 <strnlen_P>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	05 90       	lpm	r0, Z+
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	70 40       	sbci	r23, 0x00	; 0
    11fe:	01 10       	cpse	r0, r1
    1200:	d8 f7       	brcc	.-10     	; 0x11f8 <strnlen_P+0x2>
    1202:	80 95       	com	r24
    1204:	90 95       	com	r25
    1206:	8e 0f       	add	r24, r30
    1208:	9f 1f       	adc	r25, r31
    120a:	08 95       	ret

0000120c <strnlen>:
    120c:	fc 01       	movw	r30, r24
    120e:	61 50       	subi	r22, 0x01	; 1
    1210:	70 40       	sbci	r23, 0x00	; 0
    1212:	01 90       	ld	r0, Z+
    1214:	01 10       	cpse	r0, r1
    1216:	d8 f7       	brcc	.-10     	; 0x120e <strnlen+0x2>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	8e 0f       	add	r24, r30
    121e:	9f 1f       	adc	r25, r31
    1220:	08 95       	ret

00001222 <fgetc>:
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	20 ff       	sbrs	r18, 0
    122c:	35 c0       	rjmp	.+106    	; 0x1298 <fgetc+0x76>
    122e:	26 ff       	sbrs	r18, 6
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <fgetc+0x22>
    1232:	2f 7b       	andi	r18, 0xBF	; 191
    1234:	2b 83       	std	Y+3, r18	; 0x03
    1236:	8e 81       	ldd	r24, Y+6	; 0x06
    1238:	9f 81       	ldd	r25, Y+7	; 0x07
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	9f 83       	std	Y+7, r25	; 0x07
    123e:	8e 83       	std	Y+6, r24	; 0x06
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 c0       	rjmp	.+80     	; 0x1294 <fgetc+0x72>
    1244:	22 ff       	sbrs	r18, 2
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <fgetc+0x44>
    1248:	e8 81       	ld	r30, Y
    124a:	f9 81       	ldd	r31, Y+1	; 0x01
    124c:	80 81       	ld	r24, Z
    124e:	99 27       	eor	r25, r25
    1250:	87 fd       	sbrc	r24, 7
    1252:	90 95       	com	r25
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	19 f4       	brne	.+6      	; 0x125e <fgetc+0x3c>
    1258:	20 62       	ori	r18, 0x20	; 32
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	1d c0       	rjmp	.+58     	; 0x1298 <fgetc+0x76>
    125e:	31 96       	adiw	r30, 0x01	; 1
    1260:	f9 83       	std	Y+1, r31	; 0x01
    1262:	e8 83       	st	Y, r30
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <fgetc+0x66>
    1266:	ea 85       	ldd	r30, Y+10	; 0x0a
    1268:	fb 85       	ldd	r31, Y+11	; 0x0b
    126a:	ce 01       	movw	r24, r28
    126c:	19 95       	eicall
    126e:	97 ff       	sbrs	r25, 7
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <fgetc+0x66>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	8f 3f       	cpi	r24, 0xFF	; 255
    1278:	93 07       	cpc	r25, r19
    127a:	11 f4       	brne	.+4      	; 0x1280 <fgetc+0x5e>
    127c:	80 e1       	ldi	r24, 0x10	; 16
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <fgetc+0x60>
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	82 2b       	or	r24, r18
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <fgetc+0x76>
    1288:	2e 81       	ldd	r18, Y+6	; 0x06
    128a:	3f 81       	ldd	r19, Y+7	; 0x07
    128c:	2f 5f       	subi	r18, 0xFF	; 255
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	3f 83       	std	Y+7, r19	; 0x07
    1292:	2e 83       	std	Y+6, r18	; 0x06
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <fgetc+0x7a>
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	9f ef       	ldi	r25, 0xFF	; 255
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <fputc>:
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	8c 01       	movw	r16, r24
    12ac:	eb 01       	movw	r28, r22
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 ff       	sbrs	r24, 1
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <fputc+0x48>
    12b4:	82 ff       	sbrs	r24, 2
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <fputc+0x30>
    12b8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ba:	3f 81       	ldd	r19, Y+7	; 0x07
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	28 17       	cp	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	64 f4       	brge	.+24     	; 0x12de <fputc+0x3c>
    12c6:	e8 81       	ld	r30, Y
    12c8:	f9 81       	ldd	r31, Y+1	; 0x01
    12ca:	01 93       	st	Z+, r16
    12cc:	f9 83       	std	Y+1, r31	; 0x01
    12ce:	e8 83       	st	Y, r30
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <fputc+0x3c>
    12d2:	e8 85       	ldd	r30, Y+8	; 0x08
    12d4:	f9 85       	ldd	r31, Y+9	; 0x09
    12d6:	80 2f       	mov	r24, r16
    12d8:	19 95       	eicall
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	31 f4       	brne	.+12     	; 0x12ea <fputc+0x48>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	9f 83       	std	Y+7, r25	; 0x07
    12e6:	8e 83       	std	Y+6, r24	; 0x06
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <fputc+0x4c>
    12ea:	0f ef       	ldi	r16, 0xFF	; 255
    12ec:	1f ef       	ldi	r17, 0xFF	; 255
    12ee:	c8 01       	movw	r24, r16
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <__ultoa_invert>:
    12fa:	fa 01       	movw	r30, r20
    12fc:	aa 27       	eor	r26, r26
    12fe:	28 30       	cpi	r18, 0x08	; 8
    1300:	51 f1       	breq	.+84     	; 0x1356 <__ultoa_invert+0x5c>
    1302:	20 31       	cpi	r18, 0x10	; 16
    1304:	81 f1       	breq	.+96     	; 0x1366 <__ultoa_invert+0x6c>
    1306:	e8 94       	clt
    1308:	6f 93       	push	r22
    130a:	6e 7f       	andi	r22, 0xFE	; 254
    130c:	6e 5f       	subi	r22, 0xFE	; 254
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8f 4f       	sbci	r24, 0xFF	; 255
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	af 4f       	sbci	r26, 0xFF	; 255
    1316:	b1 e0       	ldi	r27, 0x01	; 1
    1318:	3e d0       	rcall	.+124    	; 0x1396 <__ultoa_invert+0x9c>
    131a:	b4 e0       	ldi	r27, 0x04	; 4
    131c:	3c d0       	rcall	.+120    	; 0x1396 <__ultoa_invert+0x9c>
    131e:	67 0f       	add	r22, r23
    1320:	78 1f       	adc	r23, r24
    1322:	89 1f       	adc	r24, r25
    1324:	9a 1f       	adc	r25, r26
    1326:	a1 1d       	adc	r26, r1
    1328:	68 0f       	add	r22, r24
    132a:	79 1f       	adc	r23, r25
    132c:	8a 1f       	adc	r24, r26
    132e:	91 1d       	adc	r25, r1
    1330:	a1 1d       	adc	r26, r1
    1332:	6a 0f       	add	r22, r26
    1334:	71 1d       	adc	r23, r1
    1336:	81 1d       	adc	r24, r1
    1338:	91 1d       	adc	r25, r1
    133a:	a1 1d       	adc	r26, r1
    133c:	20 d0       	rcall	.+64     	; 0x137e <__ultoa_invert+0x84>
    133e:	09 f4       	brne	.+2      	; 0x1342 <__ultoa_invert+0x48>
    1340:	68 94       	set
    1342:	3f 91       	pop	r19
    1344:	2a e0       	ldi	r18, 0x0A	; 10
    1346:	26 9f       	mul	r18, r22
    1348:	11 24       	eor	r1, r1
    134a:	30 19       	sub	r19, r0
    134c:	30 5d       	subi	r19, 0xD0	; 208
    134e:	31 93       	st	Z+, r19
    1350:	de f6       	brtc	.-74     	; 0x1308 <__ultoa_invert+0xe>
    1352:	cf 01       	movw	r24, r30
    1354:	08 95       	ret
    1356:	46 2f       	mov	r20, r22
    1358:	47 70       	andi	r20, 0x07	; 7
    135a:	40 5d       	subi	r20, 0xD0	; 208
    135c:	41 93       	st	Z+, r20
    135e:	b3 e0       	ldi	r27, 0x03	; 3
    1360:	0f d0       	rcall	.+30     	; 0x1380 <__ultoa_invert+0x86>
    1362:	c9 f7       	brne	.-14     	; 0x1356 <__ultoa_invert+0x5c>
    1364:	f6 cf       	rjmp	.-20     	; 0x1352 <__ultoa_invert+0x58>
    1366:	46 2f       	mov	r20, r22
    1368:	4f 70       	andi	r20, 0x0F	; 15
    136a:	40 5d       	subi	r20, 0xD0	; 208
    136c:	4a 33       	cpi	r20, 0x3A	; 58
    136e:	18 f0       	brcs	.+6      	; 0x1376 <__ultoa_invert+0x7c>
    1370:	49 5d       	subi	r20, 0xD9	; 217
    1372:	31 fd       	sbrc	r19, 1
    1374:	40 52       	subi	r20, 0x20	; 32
    1376:	41 93       	st	Z+, r20
    1378:	02 d0       	rcall	.+4      	; 0x137e <__ultoa_invert+0x84>
    137a:	a9 f7       	brne	.-22     	; 0x1366 <__ultoa_invert+0x6c>
    137c:	ea cf       	rjmp	.-44     	; 0x1352 <__ultoa_invert+0x58>
    137e:	b4 e0       	ldi	r27, 0x04	; 4
    1380:	a6 95       	lsr	r26
    1382:	97 95       	ror	r25
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	ba 95       	dec	r27
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__ultoa_invert+0x86>
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	61 05       	cpc	r22, r1
    1392:	71 05       	cpc	r23, r1
    1394:	08 95       	ret
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	0a 2e       	mov	r0, r26
    139c:	06 94       	lsr	r0
    139e:	57 95       	ror	r21
    13a0:	47 95       	ror	r20
    13a2:	37 95       	ror	r19
    13a4:	27 95       	ror	r18
    13a6:	ba 95       	dec	r27
    13a8:	c9 f7       	brne	.-14     	; 0x139c <__ultoa_invert+0xa2>
    13aa:	62 0f       	add	r22, r18
    13ac:	73 1f       	adc	r23, r19
    13ae:	84 1f       	adc	r24, r20
    13b0:	95 1f       	adc	r25, r21
    13b2:	a0 1d       	adc	r26, r0
    13b4:	08 95       	ret

000013b6 <_exit>:
    13b6:	f8 94       	cli

000013b8 <__stop_program>:
    13b8:	ff cf       	rjmp	.-2      	; 0x13b8 <__stop_program>
