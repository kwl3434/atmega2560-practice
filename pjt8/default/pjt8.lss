
pjt8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000211  00800276  00800276  00000db8  2**0
                  ALLOC
  3 .stab         00000f24  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027c  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00001f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000193d  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c52  00000000  00000000  00003ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f55  00000000  00000000  00004707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  0000565c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00005a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e67  00000000  00000000  00005f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00006da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 37       	cpi	r26, 0x76	; 118
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	14 e0       	ldi	r17, 0x04	; 4
 112:	a6 e7       	ldi	r26, 0x76	; 118
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a7 38       	cpi	r26, 0x87	; 135
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
 124:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
 12c:	10 92 7d 03 	sts	0x037D, r1
 130:	10 92 7c 03 	sts	0x037C, r1
 134:	10 92 7b 03 	sts	0x037B, r1
 138:	10 92 7a 03 	sts	0x037A, r1
 13c:	10 92 7f 03 	sts	0x037F, r1
 140:	10 92 7e 03 	sts	0x037E, r1
 144:	10 92 79 02 	sts	0x0279, r1
 148:	10 92 78 02 	sts	0x0278, r1
}
 14c:	08 95       	ret

0000014e <qi_insert>:
int qi_insert(char ch)
{
 14e:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
 150:	20 91 7e 03 	lds	r18, 0x037E
 154:	30 91 7f 03 	lds	r19, 0x037F
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	c9 01       	movw	r24, r18
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 166:	9c 01       	movw	r18, r24
 168:	80 91 78 02 	lds	r24, 0x0278
 16c:	90 91 79 02 	lds	r25, 0x0279
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	59 f0       	breq	.+22     	; 0x18c <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
 176:	30 93 7f 03 	sts	0x037F, r19
 17a:	20 93 7e 03 	sts	0x037E, r18
	qi[ri] = ch;
 17e:	20 58       	subi	r18, 0x80	; 128
 180:	3c 4f       	sbci	r19, 0xFC	; 252
 182:	f9 01       	movw	r30, r18
 184:	40 83       	st	Z, r20
	return 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
 190:	08 95       	ret

00000192 <qi_delete>:
int qi_delete()
{
	if (ri == fi)
 192:	80 91 78 02 	lds	r24, 0x0278
 196:	90 91 79 02 	lds	r25, 0x0279
 19a:	20 91 7e 03 	lds	r18, 0x037E
 19e:	30 91 7f 03 	lds	r19, 0x037F
 1a2:	28 17       	cp	r18, r24
 1a4:	39 07       	cpc	r19, r25
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 1b2:	90 93 79 02 	sts	0x0279, r25
 1b6:	80 93 78 02 	sts	0x0278, r24
	return qi[fi];
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	9c 4f       	sbci	r25, 0xFC	; 252
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
 1ca:	08 95       	ret

000001cc <qo_insert>:
int qo_insert(char ch)
{
 1cc:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
 1ce:	20 91 7c 03 	lds	r18, 0x037C
 1d2:	30 91 7d 03 	lds	r19, 0x037D
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
 1da:	c9 01       	movw	r24, r18
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 1e4:	9c 01       	movw	r18, r24
 1e6:	80 91 7a 03 	lds	r24, 0x037A
 1ea:	90 91 7b 03 	lds	r25, 0x037B
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	59 f0       	breq	.+22     	; 0x20a <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
 1f4:	30 93 7d 03 	sts	0x037D, r19
 1f8:	20 93 7c 03 	sts	0x037C, r18
	qo[ro] = ch;
 1fc:	26 58       	subi	r18, 0x86	; 134
 1fe:	3d 4f       	sbci	r19, 0xFD	; 253
 200:	f9 01       	movw	r30, r18
 202:	40 83       	st	Z, r20
	return 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
 20e:	08 95       	ret

00000210 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
 210:	80 91 7a 03 	lds	r24, 0x037A
 214:	90 91 7b 03 	lds	r25, 0x037B
 218:	20 91 7c 03 	lds	r18, 0x037C
 21c:	30 91 7d 03 	lds	r19, 0x037D
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	79 f0       	breq	.+30     	; 0x244 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	71 e0       	ldi	r23, 0x01	; 1
 22c:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 230:	90 93 7b 03 	sts	0x037B, r25
 234:	80 93 7a 03 	sts	0x037A, r24
	return qo[fo];
 238:	86 58       	subi	r24, 0x86	; 134
 23a:	9d 4f       	sbci	r25, 0xFD	; 253
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
 248:	08 95       	ret

0000024a <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
 24a:	f8 94       	cli
		ch = qi_delete();
 24c:	0e 94 c9 00 	call	0x192	; 0x192 <qi_delete>
		sei();
 250:	78 94       	sei
	}while(ch == 0);
 252:	88 23       	and	r24, r24
 254:	d1 f3       	breq	.-12     	; 0x24a <uart_getchar>

	if (ch == ETX) return -1;
 256:	84 30       	cpi	r24, 0x04	; 4
 258:	11 f0       	breq	.+4      	; 0x25e <uart_getchar+0x14>
	else		   return ch;
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
 262:	08 95       	ret

00000264 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
 264:	cf 93       	push	r28
 266:	c8 2f       	mov	r28, r24
	if(ch == '\n')
 268:	8a 30       	cpi	r24, 0x0A	; 10
 26a:	19 f4       	brne	.+6      	; 0x272 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	0e 94 32 01 	call	0x264	; 0x264 <uart_putchar>
	cli();
 272:	f8 94       	cli
	if(!uart_busy){
 274:	80 91 80 04 	lds	r24, 0x0480
 278:	88 23       	and	r24, r24
 27a:	61 f4       	brne	.+24     	; 0x294 <uart_putchar+0x30>
		UDR0 = ch;
 27c:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 80 04 	sts	0x0480, r24
 286:	0b c0       	rjmp	.+22     	; 0x29e <uart_putchar+0x3a>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
 288:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	81 e2       	ldi	r24, 0x21	; 33
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <uart_putchar+0x28>
 290:	00 00       	nop
			_delay_us(100);
			cli();
 292:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 e6 00 	call	0x1cc	; 0x1cc <qo_insert>
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	a9 f3       	breq	.-22     	; 0x288 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 29e:	78 94       	sei
	return 1;
}
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
 2a8:	86 e3       	ldi	r24, 0x36	; 54
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	90 93 82 04 	sts	0x0482, r25
 2b0:	80 93 81 04 	sts	0x0481, r24
	stdout = &Mystdout;
 2b4:	84 e4       	ldi	r24, 0x44	; 68
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	90 93 84 04 	sts	0x0484, r25
 2bc:	80 93 83 04 	sts	0x0483, r24
	uart_busy = 0;
 2c0:	10 92 80 04 	sts	0x0480, r1
	q_init();
 2c4:	0e 94 96 00 	call	0x12c	; 0x12c <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
 2c8:	10 92 c5 00 	sts	0x00C5, r1
 2cc:	87 e0       	ldi	r24, 0x07	; 7
 2ce:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
 2d2:	e0 ec       	ldi	r30, 0xC0	; 192
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
 2dc:	e1 ec       	ldi	r30, 0xC1	; 193
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
 2ec:	80 81       	ld	r24, Z
 2ee:	80 61       	ori	r24, 0x10	; 16
 2f0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
 2f2:	80 81       	ld	r24, Z
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	80 83       	st	Z, r24
}
 2f8:	08 95       	ret

000002fa <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
 2fe:	8a 30       	cpi	r24, 0x0A	; 10
 300:	19 f4       	brne	.+6      	; 0x308 <uart_echo+0xe>
 302:	8d e0       	ldi	r24, 0x0D	; 13
 304:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_echo>
	if(!uart_busy){
 308:	80 91 80 04 	lds	r24, 0x0480
 30c:	88 23       	and	r24, r24
 30e:	31 f4       	brne	.+12     	; 0x31c <uart_echo+0x22>
		UDR0 = ch;
 310:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 80 04 	sts	0x0480, r24
 31a:	03 c0       	rjmp	.+6      	; 0x322 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <qo_insert>
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <is_prime>:
#include<stdio.h>

int is_prime(int n)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 334:	eb 01       	movw	r28, r22
 336:	22 e0       	ldi	r18, 0x02	; 2
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	08 c0       	rjmp	.+16     	; 0x34c <is_prime+0x26>
		if((n%i) == 0)
 33c:	cf 01       	movw	r24, r30
 33e:	b9 01       	movw	r22, r18
 340:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	41 f0       	breq	.+16     	; 0x358 <is_prime+0x32>
#include<stdio.h>

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
 348:	2f 5f       	subi	r18, 0xFF	; 255
 34a:	3f 4f       	sbci	r19, 0xFF	; 255
 34c:	c2 17       	cp	r28, r18
 34e:	d3 07       	cpc	r29, r19
 350:	ac f7       	brge	.-22     	; 0x33c <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <app_prime>:
void app_prime(int t)
{
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	7c 01       	movw	r14, r24
	int n,count = 0;
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
	for(n = 2; n<= t; n++){
 378:	c2 e0       	ldi	r28, 0x02	; 2
 37a:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
 37c:	22 e5       	ldi	r18, 0x52	; 82
 37e:	c2 2e       	mov	r12, r18
 380:	22 e0       	ldi	r18, 0x02	; 2
 382:	d2 2e       	mov	r13, r18
	return 1;
}
void app_prime(int t)
{
	int n,count = 0;
	for(n = 2; n<= t; n++){
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <app_prime+0x50>
		if(is_prime(n)) {
 386:	ce 01       	movw	r24, r28
 388:	0e 94 93 01 	call	0x326	; 0x326 <is_prime>
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	81 f0       	breq	.+32     	; 0x3b0 <app_prime+0x4e>
			count++;
 390:	0f 5f       	subi	r16, 0xFF	; 255
 392:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
 394:	00 d0       	rcall	.+0      	; 0x396 <app_prime+0x34>
 396:	0f 92       	push	r0
 398:	ed b7       	in	r30, 0x3d	; 61
 39a:	fe b7       	in	r31, 0x3e	; 62
 39c:	d2 82       	std	Z+2, r13	; 0x02
 39e:	c1 82       	std	Z+1, r12	; 0x01
 3a0:	d4 83       	std	Z+4, r29	; 0x04
 3a2:	c3 83       	std	Z+3, r28	; 0x03
 3a4:	0e 94 2e 03 	call	0x65c	; 0x65c <printf>
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
	return 1;
}
void app_prime(int t)
{
	int n,count = 0;
	for(n = 2; n<= t; n++){
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	ec 16       	cp	r14, r28
 3b4:	fd 06       	cpc	r15, r29
 3b6:	3c f7       	brge	.-50     	; 0x386 <app_prime+0x24>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <app_prime+0x58>
 3ba:	0f 92       	push	r0
 3bc:	8c e6       	ldi	r24, 0x6C	; 108
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	ed b7       	in	r30, 0x3d	; 61
 3c2:	fe b7       	in	r31, 0x3e	; 62
 3c4:	92 83       	std	Z+2, r25	; 0x02
 3c6:	81 83       	std	Z+1, r24	; 0x01
 3c8:	14 83       	std	Z+4, r17	; 0x04
 3ca:	03 83       	std	Z+3, r16	; 0x03
 3cc:	0e 94 2e 03 	call	0x65c	; 0x65c <printf>
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	08 95       	ret

000003ea <__vector_27>:
#include"queue.h"
#include"uart.h"
#define ETX 0x04
extern char volatile uart_busy;
ISR(USART0_TX_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	0b b6       	in	r0, 0x3b	; 59
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
 410:	0e 94 08 01 	call	0x210	; 0x210 <qo_delete>
 414:	88 23       	and	r24, r24
 416:	19 f4       	brne	.+6      	; 0x41e <__vector_27+0x34>
		uart_busy = 0;
 418:	10 92 80 04 	sts	0x0480, r1
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__vector_27+0x38>
	else
		UDR0 = ch;
 41e:	80 93 c6 00 	sts	0x00C6, r24
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0b be       	out	0x3b, r0	; 59
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_25>:
ISR(USART0_RX_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	0b b6       	in	r0, 0x3b	; 59
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	cf 93       	push	r28
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	char ch;

	ch = UDR0;
 470:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != ETX) {
 474:	c4 30       	cpi	r28, 0x04	; 4
 476:	31 f0       	breq	.+12     	; 0x484 <__vector_25+0x3c>
		if(ch == '\r')
 478:	cd 30       	cpi	r28, 0x0D	; 13
 47a:	09 f4       	brne	.+2      	; 0x47e <__vector_25+0x36>
			ch = '\n';
 47c:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_echo>
	}
	qi_insert(ch);
 484:	8c 2f       	mov	r24, r28
 486:	0e 94 a7 00 	call	0x14e	; 0x14e <qi_insert>
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	cf 91       	pop	r28
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0b be       	out	0x3b, r0	; 59
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <main>:
#include<string.h>
#include<avr/interrupt.h>
#include"prime.h"
#include"uart.h"

int main(){
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	c0 58       	subi	r28, 0x80	; 128
 4bc:	d0 40       	sbci	r29, 0x00	; 0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp;

	uart_init();
 4c8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <uart_init>
	sei();
 4cc:	78 94       	sei
	while(1){
		printf("$ ");
 4ce:	00 e0       	ldi	r16, 0x00	; 0
 4d0:	12 e0       	ldi	r17, 0x02	; 2
 4d2:	0f 92       	push	r0
 4d4:	0f 92       	push	r0
 4d6:	ed b7       	in	r30, 0x3d	; 61
 4d8:	fe b7       	in	r31, 0x3e	; 62
 4da:	12 83       	std	Z+2, r17	; 0x02
 4dc:	01 83       	std	Z+1, r16	; 0x01
 4de:	0e 94 2e 03 	call	0x65c	; 0x65c <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	40 91 81 04 	lds	r20, 0x0481
 4ea:	50 91 82 04 	lds	r21, 0x0482
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	60 e8       	ldi	r22, 0x80	; 128
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <fgets>
 4fa:	00 97       	sbiw	r24, 0x00	; 0
 4fc:	d1 f0       	breq	.+52     	; 0x532 <main+0x80>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) == NULL) continue;
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	63 e0       	ldi	r22, 0x03	; 3
 504:	72 e0       	ldi	r23, 0x02	; 2
 506:	0e 94 c5 02 	call	0x58a	; 0x58a <strtok>
 50a:	00 97       	sbiw	r24, 0x00	; 0
 50c:	11 f3       	breq	.-60     	; 0x4d2 <main+0x20>
		if(!strcmp(cmd, "prime" )) app_prime(2000);
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	68 e0       	ldi	r22, 0x08	; 8
 514:	72 e0       	ldi	r23, 0x02	; 2
 516:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	29 f4       	brne	.+10     	; 0x528 <main+0x76>
 51e:	80 ed       	ldi	r24, 0xD0	; 208
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	0e 94 b1 01 	call	0x362	; 0x362 <app_prime>
 526:	d5 cf       	rjmp	.-86     	; 0x4d2 <main+0x20>
		else					   printf("Unknown command...\n");
 528:	8e e0       	ldi	r24, 0x0E	; 14
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	0e 94 40 03 	call	0x680	; 0x680 <puts>
 530:	d0 cf       	rjmp	.-96     	; 0x4d2 <main+0x20>
	}
	printf("logout, good bye !!!\n");
 532:	81 e2       	ldi	r24, 0x21	; 33
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	0e 94 40 03 	call	0x680	; 0x680 <puts>
 53a:	ff cf       	rjmp	.-2      	; 0x53a <main+0x88>

0000053c <__divmodhi4>:
 53c:	97 fb       	bst	r25, 7
 53e:	09 2e       	mov	r0, r25
 540:	07 26       	eor	r0, r23
 542:	0a d0       	rcall	.+20     	; 0x558 <__divmodhi4_neg1>
 544:	77 fd       	sbrc	r23, 7
 546:	04 d0       	rcall	.+8      	; 0x550 <__divmodhi4_neg2>
 548:	0c d0       	rcall	.+24     	; 0x562 <__udivmodhi4>
 54a:	06 d0       	rcall	.+12     	; 0x558 <__divmodhi4_neg1>
 54c:	00 20       	and	r0, r0
 54e:	1a f4       	brpl	.+6      	; 0x556 <__divmodhi4_exit>

00000550 <__divmodhi4_neg2>:
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255

00000556 <__divmodhi4_exit>:
 556:	08 95       	ret

00000558 <__divmodhi4_neg1>:
 558:	f6 f7       	brtc	.-4      	; 0x556 <__divmodhi4_exit>
 55a:	90 95       	com	r25
 55c:	81 95       	neg	r24
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__udivmodhi4>:
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	51 e1       	ldi	r21, 0x11	; 17
 568:	07 c0       	rjmp	.+14     	; 0x578 <__udivmodhi4_ep>

0000056a <__udivmodhi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a6 17       	cp	r26, r22
 570:	b7 07       	cpc	r27, r23
 572:	10 f0       	brcs	.+4      	; 0x578 <__udivmodhi4_ep>
 574:	a6 1b       	sub	r26, r22
 576:	b7 0b       	sbc	r27, r23

00000578 <__udivmodhi4_ep>:
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	5a 95       	dec	r21
 57e:	a9 f7       	brne	.-22     	; 0x56a <__udivmodhi4_loop>
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	08 95       	ret

0000058a <strtok>:
 58a:	46 e7       	ldi	r20, 0x76	; 118
 58c:	52 e0       	ldi	r21, 0x02	; 2
 58e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <strtok_r>
 592:	08 95       	ret

00000594 <strcmp>:
 594:	fb 01       	movw	r30, r22
 596:	dc 01       	movw	r26, r24
 598:	8d 91       	ld	r24, X+
 59a:	01 90       	ld	r0, Z+
 59c:	80 19       	sub	r24, r0
 59e:	01 10       	cpse	r0, r1
 5a0:	d9 f3       	breq	.-10     	; 0x598 <strcmp+0x4>
 5a2:	99 0b       	sbc	r25, r25
 5a4:	08 95       	ret

000005a6 <strtok_r>:
 5a6:	fa 01       	movw	r30, r20
 5a8:	a1 91       	ld	r26, Z+
 5aa:	b0 81       	ld	r27, Z
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	19 f4       	brne	.+6      	; 0x5b6 <strtok_r+0x10>
 5b0:	10 97       	sbiw	r26, 0x00	; 0
 5b2:	e1 f0       	breq	.+56     	; 0x5ec <strtok_r+0x46>
 5b4:	cd 01       	movw	r24, r26
 5b6:	dc 01       	movw	r26, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	0d 90       	ld	r0, X+
 5bc:	00 20       	and	r0, r0
 5be:	11 f4       	brne	.+4      	; 0x5c4 <strtok_r+0x1e>
 5c0:	c0 01       	movw	r24, r0
 5c2:	13 c0       	rjmp	.+38     	; 0x5ea <strtok_r+0x44>
 5c4:	fb 01       	movw	r30, r22
 5c6:	21 91       	ld	r18, Z+
 5c8:	22 23       	and	r18, r18
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <strtok_r+0x2c>
 5cc:	20 15       	cp	r18, r0
 5ce:	d9 f7       	brne	.-10     	; 0x5c6 <strtok_r+0x20>
 5d0:	f3 cf       	rjmp	.-26     	; 0x5b8 <strtok_r+0x12>
 5d2:	fb 01       	movw	r30, r22
 5d4:	21 91       	ld	r18, Z+
 5d6:	20 15       	cp	r18, r0
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <strtok_r+0x3a>
 5da:	1e 92       	st	-X, r1
 5dc:	11 96       	adiw	r26, 0x01	; 1
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <strtok_r+0x46>
 5e0:	22 23       	and	r18, r18
 5e2:	c1 f7       	brne	.-16     	; 0x5d4 <strtok_r+0x2e>
 5e4:	0d 90       	ld	r0, X+
 5e6:	00 20       	and	r0, r0
 5e8:	a1 f7       	brne	.-24     	; 0x5d2 <strtok_r+0x2c>
 5ea:	d0 01       	movw	r26, r0
 5ec:	fa 01       	movw	r30, r20
 5ee:	a1 93       	st	Z+, r26
 5f0:	b0 83       	st	Z, r27
 5f2:	08 95       	ret

000005f4 <fgets>:
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	8c 01       	movw	r16, r24
 606:	6a 01       	movw	r12, r20
 608:	fa 01       	movw	r30, r20
 60a:	83 81       	ldd	r24, Z+3	; 0x03
 60c:	80 ff       	sbrs	r24, 0
 60e:	1a c0       	rjmp	.+52     	; 0x644 <fgets+0x50>
 610:	16 16       	cp	r1, r22
 612:	17 06       	cpc	r1, r23
 614:	bc f4       	brge	.+46     	; 0x644 <fgets+0x50>
 616:	7b 01       	movw	r14, r22
 618:	e8 01       	movw	r28, r16
 61a:	0e c0       	rjmp	.+28     	; 0x638 <fgets+0x44>
 61c:	c6 01       	movw	r24, r12
 61e:	0e 94 8b 05 	call	0xb16	; 0xb16 <fgetc>
 622:	ff ef       	ldi	r31, 0xFF	; 255
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	9f 07       	cpc	r25, r31
 628:	69 f0       	breq	.+26     	; 0x644 <fgets+0x50>
 62a:	89 93       	st	Y+, r24
 62c:	08 94       	sec
 62e:	e1 08       	sbc	r14, r1
 630:	f1 08       	sbc	r15, r1
 632:	8a 30       	cpi	r24, 0x0A	; 10
 634:	91 05       	cpc	r25, r1
 636:	21 f0       	breq	.+8      	; 0x640 <fgets+0x4c>
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	e2 16       	cp	r14, r18
 63c:	f1 04       	cpc	r15, r1
 63e:	71 f7       	brne	.-36     	; 0x61c <fgets+0x28>
 640:	18 82       	st	Y, r1
 642:	02 c0       	rjmp	.+4      	; 0x648 <fgets+0x54>
 644:	00 e0       	ldi	r16, 0x00	; 0
 646:	10 e0       	ldi	r17, 0x00	; 0
 648:	c8 01       	movw	r24, r16
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	08 95       	ret

0000065c <printf>:
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	fe 01       	movw	r30, r28
 666:	36 96       	adiw	r30, 0x06	; 6
 668:	61 91       	ld	r22, Z+
 66a:	71 91       	ld	r23, Z+
 66c:	80 91 83 04 	lds	r24, 0x0483
 670:	90 91 84 04 	lds	r25, 0x0484
 674:	af 01       	movw	r20, r30
 676:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vfprintf>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <puts>:
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	8c 01       	movw	r16, r24
 68a:	e0 91 83 04 	lds	r30, 0x0483
 68e:	f0 91 84 04 	lds	r31, 0x0484
 692:	83 81       	ldd	r24, Z+3	; 0x03
 694:	81 ff       	sbrs	r24, 1
 696:	1a c0       	rjmp	.+52     	; 0x6cc <puts+0x4c>
 698:	c0 e0       	ldi	r28, 0x00	; 0
 69a:	d0 e0       	ldi	r29, 0x00	; 0
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <puts+0x28>
 69e:	19 95       	eicall
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <puts+0x28>
 6a4:	cf ef       	ldi	r28, 0xFF	; 255
 6a6:	df ef       	ldi	r29, 0xFF	; 255
 6a8:	f8 01       	movw	r30, r16
 6aa:	81 91       	ld	r24, Z+
 6ac:	8f 01       	movw	r16, r30
 6ae:	60 91 83 04 	lds	r22, 0x0483
 6b2:	70 91 84 04 	lds	r23, 0x0484
 6b6:	db 01       	movw	r26, r22
 6b8:	18 96       	adiw	r26, 0x08	; 8
 6ba:	ed 91       	ld	r30, X+
 6bc:	fc 91       	ld	r31, X
 6be:	19 97       	sbiw	r26, 0x09	; 9
 6c0:	88 23       	and	r24, r24
 6c2:	69 f7       	brne	.-38     	; 0x69e <puts+0x1e>
 6c4:	8a e0       	ldi	r24, 0x0A	; 10
 6c6:	19 95       	eicall
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <puts+0x50>
 6cc:	cf ef       	ldi	r28, 0xFF	; 255
 6ce:	df ef       	ldi	r29, 0xFF	; 255
 6d0:	ce 01       	movw	r24, r28
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	08 95       	ret

000006dc <vfprintf>:
 6dc:	2f 92       	push	r2
 6de:	3f 92       	push	r3
 6e0:	4f 92       	push	r4
 6e2:	5f 92       	push	r5
 6e4:	6f 92       	push	r6
 6e6:	7f 92       	push	r7
 6e8:	8f 92       	push	r8
 6ea:	9f 92       	push	r9
 6ec:	af 92       	push	r10
 6ee:	bf 92       	push	r11
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	2d 97       	sbiw	r28, 0x0d	; 13
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	3c 01       	movw	r6, r24
 712:	7d 87       	std	Y+13, r23	; 0x0d
 714:	6c 87       	std	Y+12, r22	; 0x0c
 716:	5a 01       	movw	r10, r20
 718:	fc 01       	movw	r30, r24
 71a:	17 82       	std	Z+7, r1	; 0x07
 71c:	16 82       	std	Z+6, r1	; 0x06
 71e:	83 81       	ldd	r24, Z+3	; 0x03
 720:	81 ff       	sbrs	r24, 1
 722:	c8 c1       	rjmp	.+912    	; 0xab4 <vfprintf+0x3d8>
 724:	2e 01       	movw	r4, r28
 726:	08 94       	sec
 728:	41 1c       	adc	r4, r1
 72a:	51 1c       	adc	r5, r1
 72c:	f3 01       	movw	r30, r6
 72e:	93 81       	ldd	r25, Z+3	; 0x03
 730:	ec 85       	ldd	r30, Y+12	; 0x0c
 732:	fd 85       	ldd	r31, Y+13	; 0x0d
 734:	93 fd       	sbrc	r25, 3
 736:	85 91       	lpm	r24, Z+
 738:	93 ff       	sbrs	r25, 3
 73a:	81 91       	ld	r24, Z+
 73c:	fd 87       	std	Y+13, r31	; 0x0d
 73e:	ec 87       	std	Y+12, r30	; 0x0c
 740:	88 23       	and	r24, r24
 742:	09 f4       	brne	.+2      	; 0x746 <vfprintf+0x6a>
 744:	b3 c1       	rjmp	.+870    	; 0xaac <vfprintf+0x3d0>
 746:	85 32       	cpi	r24, 0x25	; 37
 748:	41 f4       	brne	.+16     	; 0x75a <vfprintf+0x7e>
 74a:	93 fd       	sbrc	r25, 3
 74c:	85 91       	lpm	r24, Z+
 74e:	93 ff       	sbrs	r25, 3
 750:	81 91       	ld	r24, Z+
 752:	fd 87       	std	Y+13, r31	; 0x0d
 754:	ec 87       	std	Y+12, r30	; 0x0c
 756:	85 32       	cpi	r24, 0x25	; 37
 758:	29 f4       	brne	.+10     	; 0x764 <vfprintf+0x88>
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	b3 01       	movw	r22, r6
 75e:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 762:	e4 cf       	rjmp	.-56     	; 0x72c <vfprintf+0x50>
 764:	ff 24       	eor	r15, r15
 766:	ee 24       	eor	r14, r14
 768:	10 e0       	ldi	r17, 0x00	; 0
 76a:	10 32       	cpi	r17, 0x20	; 32
 76c:	b0 f4       	brcc	.+44     	; 0x79a <vfprintf+0xbe>
 76e:	8b 32       	cpi	r24, 0x2B	; 43
 770:	69 f0       	breq	.+26     	; 0x78c <vfprintf+0xb0>
 772:	8c 32       	cpi	r24, 0x2C	; 44
 774:	28 f4       	brcc	.+10     	; 0x780 <vfprintf+0xa4>
 776:	80 32       	cpi	r24, 0x20	; 32
 778:	51 f0       	breq	.+20     	; 0x78e <vfprintf+0xb2>
 77a:	83 32       	cpi	r24, 0x23	; 35
 77c:	71 f4       	brne	.+28     	; 0x79a <vfprintf+0xbe>
 77e:	0b c0       	rjmp	.+22     	; 0x796 <vfprintf+0xba>
 780:	8d 32       	cpi	r24, 0x2D	; 45
 782:	39 f0       	breq	.+14     	; 0x792 <vfprintf+0xb6>
 784:	80 33       	cpi	r24, 0x30	; 48
 786:	49 f4       	brne	.+18     	; 0x79a <vfprintf+0xbe>
 788:	11 60       	ori	r17, 0x01	; 1
 78a:	2c c0       	rjmp	.+88     	; 0x7e4 <vfprintf+0x108>
 78c:	12 60       	ori	r17, 0x02	; 2
 78e:	14 60       	ori	r17, 0x04	; 4
 790:	29 c0       	rjmp	.+82     	; 0x7e4 <vfprintf+0x108>
 792:	18 60       	ori	r17, 0x08	; 8
 794:	27 c0       	rjmp	.+78     	; 0x7e4 <vfprintf+0x108>
 796:	10 61       	ori	r17, 0x10	; 16
 798:	25 c0       	rjmp	.+74     	; 0x7e4 <vfprintf+0x108>
 79a:	17 fd       	sbrc	r17, 7
 79c:	2e c0       	rjmp	.+92     	; 0x7fa <vfprintf+0x11e>
 79e:	28 2f       	mov	r18, r24
 7a0:	20 53       	subi	r18, 0x30	; 48
 7a2:	2a 30       	cpi	r18, 0x0A	; 10
 7a4:	98 f4       	brcc	.+38     	; 0x7cc <vfprintf+0xf0>
 7a6:	16 ff       	sbrs	r17, 6
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <vfprintf+0xde>
 7aa:	8f 2d       	mov	r24, r15
 7ac:	88 0f       	add	r24, r24
 7ae:	f8 2e       	mov	r15, r24
 7b0:	ff 0c       	add	r15, r15
 7b2:	ff 0c       	add	r15, r15
 7b4:	f8 0e       	add	r15, r24
 7b6:	f2 0e       	add	r15, r18
 7b8:	15 c0       	rjmp	.+42     	; 0x7e4 <vfprintf+0x108>
 7ba:	8e 2d       	mov	r24, r14
 7bc:	88 0f       	add	r24, r24
 7be:	e8 2e       	mov	r14, r24
 7c0:	ee 0c       	add	r14, r14
 7c2:	ee 0c       	add	r14, r14
 7c4:	e8 0e       	add	r14, r24
 7c6:	e2 0e       	add	r14, r18
 7c8:	10 62       	ori	r17, 0x20	; 32
 7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <vfprintf+0x108>
 7cc:	8e 32       	cpi	r24, 0x2E	; 46
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <vfprintf+0xfc>
 7d0:	16 fd       	sbrc	r17, 6
 7d2:	6c c1       	rjmp	.+728    	; 0xaac <vfprintf+0x3d0>
 7d4:	10 64       	ori	r17, 0x40	; 64
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <vfprintf+0x108>
 7d8:	8c 36       	cpi	r24, 0x6C	; 108
 7da:	11 f4       	brne	.+4      	; 0x7e0 <vfprintf+0x104>
 7dc:	10 68       	ori	r17, 0x80	; 128
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x108>
 7e0:	88 36       	cpi	r24, 0x68	; 104
 7e2:	59 f4       	brne	.+22     	; 0x7fa <vfprintf+0x11e>
 7e4:	ec 85       	ldd	r30, Y+12	; 0x0c
 7e6:	fd 85       	ldd	r31, Y+13	; 0x0d
 7e8:	93 fd       	sbrc	r25, 3
 7ea:	85 91       	lpm	r24, Z+
 7ec:	93 ff       	sbrs	r25, 3
 7ee:	81 91       	ld	r24, Z+
 7f0:	fd 87       	std	Y+13, r31	; 0x0d
 7f2:	ec 87       	std	Y+12, r30	; 0x0c
 7f4:	88 23       	and	r24, r24
 7f6:	09 f0       	breq	.+2      	; 0x7fa <vfprintf+0x11e>
 7f8:	b8 cf       	rjmp	.-144    	; 0x76a <vfprintf+0x8e>
 7fa:	98 2f       	mov	r25, r24
 7fc:	95 54       	subi	r25, 0x45	; 69
 7fe:	93 30       	cpi	r25, 0x03	; 3
 800:	18 f0       	brcs	.+6      	; 0x808 <vfprintf+0x12c>
 802:	90 52       	subi	r25, 0x20	; 32
 804:	93 30       	cpi	r25, 0x03	; 3
 806:	38 f4       	brcc	.+14     	; 0x816 <vfprintf+0x13a>
 808:	24 e0       	ldi	r18, 0x04	; 4
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	a2 0e       	add	r10, r18
 80e:	b3 1e       	adc	r11, r19
 810:	3f e3       	ldi	r19, 0x3F	; 63
 812:	39 83       	std	Y+1, r19	; 0x01
 814:	0f c0       	rjmp	.+30     	; 0x834 <vfprintf+0x158>
 816:	83 36       	cpi	r24, 0x63	; 99
 818:	31 f0       	breq	.+12     	; 0x826 <vfprintf+0x14a>
 81a:	83 37       	cpi	r24, 0x73	; 115
 81c:	81 f0       	breq	.+32     	; 0x83e <vfprintf+0x162>
 81e:	83 35       	cpi	r24, 0x53	; 83
 820:	09 f0       	breq	.+2      	; 0x824 <vfprintf+0x148>
 822:	5a c0       	rjmp	.+180    	; 0x8d8 <vfprintf+0x1fc>
 824:	22 c0       	rjmp	.+68     	; 0x86a <vfprintf+0x18e>
 826:	f5 01       	movw	r30, r10
 828:	80 81       	ld	r24, Z
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	22 e0       	ldi	r18, 0x02	; 2
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	a2 0e       	add	r10, r18
 832:	b3 1e       	adc	r11, r19
 834:	21 e0       	ldi	r18, 0x01	; 1
 836:	c2 2e       	mov	r12, r18
 838:	d1 2c       	mov	r13, r1
 83a:	42 01       	movw	r8, r4
 83c:	14 c0       	rjmp	.+40     	; 0x866 <vfprintf+0x18a>
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	29 2e       	mov	r2, r25
 842:	31 2c       	mov	r3, r1
 844:	2a 0c       	add	r2, r10
 846:	3b 1c       	adc	r3, r11
 848:	f5 01       	movw	r30, r10
 84a:	80 80       	ld	r8, Z
 84c:	91 80       	ldd	r9, Z+1	; 0x01
 84e:	16 ff       	sbrs	r17, 6
 850:	03 c0       	rjmp	.+6      	; 0x858 <vfprintf+0x17c>
 852:	6f 2d       	mov	r22, r15
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <vfprintf+0x180>
 858:	6f ef       	ldi	r22, 0xFF	; 255
 85a:	7f ef       	ldi	r23, 0xFF	; 255
 85c:	c4 01       	movw	r24, r8
 85e:	0e 94 80 05 	call	0xb00	; 0xb00 <strnlen>
 862:	6c 01       	movw	r12, r24
 864:	51 01       	movw	r10, r2
 866:	1f 77       	andi	r17, 0x7F	; 127
 868:	15 c0       	rjmp	.+42     	; 0x894 <vfprintf+0x1b8>
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	28 2e       	mov	r2, r24
 86e:	31 2c       	mov	r3, r1
 870:	2a 0c       	add	r2, r10
 872:	3b 1c       	adc	r3, r11
 874:	f5 01       	movw	r30, r10
 876:	80 80       	ld	r8, Z
 878:	91 80       	ldd	r9, Z+1	; 0x01
 87a:	16 ff       	sbrs	r17, 6
 87c:	03 c0       	rjmp	.+6      	; 0x884 <vfprintf+0x1a8>
 87e:	6f 2d       	mov	r22, r15
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x1ac>
 884:	6f ef       	ldi	r22, 0xFF	; 255
 886:	7f ef       	ldi	r23, 0xFF	; 255
 888:	c4 01       	movw	r24, r8
 88a:	0e 94 75 05 	call	0xaea	; 0xaea <strnlen_P>
 88e:	6c 01       	movw	r12, r24
 890:	10 68       	ori	r17, 0x80	; 128
 892:	51 01       	movw	r10, r2
 894:	13 fd       	sbrc	r17, 3
 896:	1c c0       	rjmp	.+56     	; 0x8d0 <vfprintf+0x1f4>
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x1ca>
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	b3 01       	movw	r22, r6
 8a0:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 8a4:	ea 94       	dec	r14
 8a6:	8e 2d       	mov	r24, r14
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	c8 16       	cp	r12, r24
 8ac:	d9 06       	cpc	r13, r25
 8ae:	a8 f3       	brcs	.-22     	; 0x89a <vfprintf+0x1be>
 8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <vfprintf+0x1f4>
 8b2:	f4 01       	movw	r30, r8
 8b4:	17 fd       	sbrc	r17, 7
 8b6:	85 91       	lpm	r24, Z+
 8b8:	17 ff       	sbrs	r17, 7
 8ba:	81 91       	ld	r24, Z+
 8bc:	4f 01       	movw	r8, r30
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	b3 01       	movw	r22, r6
 8c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 8c6:	e1 10       	cpse	r14, r1
 8c8:	ea 94       	dec	r14
 8ca:	08 94       	sec
 8cc:	c1 08       	sbc	r12, r1
 8ce:	d1 08       	sbc	r13, r1
 8d0:	c1 14       	cp	r12, r1
 8d2:	d1 04       	cpc	r13, r1
 8d4:	71 f7       	brne	.-36     	; 0x8b2 <vfprintf+0x1d6>
 8d6:	e7 c0       	rjmp	.+462    	; 0xaa6 <vfprintf+0x3ca>
 8d8:	84 36       	cpi	r24, 0x64	; 100
 8da:	11 f0       	breq	.+4      	; 0x8e0 <vfprintf+0x204>
 8dc:	89 36       	cpi	r24, 0x69	; 105
 8de:	51 f5       	brne	.+84     	; 0x934 <vfprintf+0x258>
 8e0:	f5 01       	movw	r30, r10
 8e2:	17 ff       	sbrs	r17, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x218>
 8e6:	80 81       	ld	r24, Z
 8e8:	91 81       	ldd	r25, Z+1	; 0x01
 8ea:	a2 81       	ldd	r26, Z+2	; 0x02
 8ec:	b3 81       	ldd	r27, Z+3	; 0x03
 8ee:	24 e0       	ldi	r18, 0x04	; 4
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <vfprintf+0x228>
 8f4:	80 81       	ld	r24, Z
 8f6:	91 81       	ldd	r25, Z+1	; 0x01
 8f8:	aa 27       	eor	r26, r26
 8fa:	97 fd       	sbrc	r25, 7
 8fc:	a0 95       	com	r26
 8fe:	ba 2f       	mov	r27, r26
 900:	22 e0       	ldi	r18, 0x02	; 2
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	a2 0e       	add	r10, r18
 906:	b3 1e       	adc	r11, r19
 908:	01 2f       	mov	r16, r17
 90a:	0f 76       	andi	r16, 0x6F	; 111
 90c:	b7 ff       	sbrs	r27, 7
 90e:	08 c0       	rjmp	.+16     	; 0x920 <vfprintf+0x244>
 910:	b0 95       	com	r27
 912:	a0 95       	com	r26
 914:	90 95       	com	r25
 916:	81 95       	neg	r24
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	af 4f       	sbci	r26, 0xFF	; 255
 91c:	bf 4f       	sbci	r27, 0xFF	; 255
 91e:	00 68       	ori	r16, 0x80	; 128
 920:	bc 01       	movw	r22, r24
 922:	cd 01       	movw	r24, r26
 924:	a2 01       	movw	r20, r4
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	0e 94 f7 05 	call	0xbee	; 0xbee <__ultoa_invert>
 92e:	d8 2e       	mov	r13, r24
 930:	d4 18       	sub	r13, r4
 932:	3f c0       	rjmp	.+126    	; 0x9b2 <vfprintf+0x2d6>
 934:	85 37       	cpi	r24, 0x75	; 117
 936:	21 f4       	brne	.+8      	; 0x940 <vfprintf+0x264>
 938:	1f 7e       	andi	r17, 0xEF	; 239
 93a:	2a e0       	ldi	r18, 0x0A	; 10
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	20 c0       	rjmp	.+64     	; 0x980 <vfprintf+0x2a4>
 940:	19 7f       	andi	r17, 0xF9	; 249
 942:	8f 36       	cpi	r24, 0x6F	; 111
 944:	a9 f0       	breq	.+42     	; 0x970 <vfprintf+0x294>
 946:	80 37       	cpi	r24, 0x70	; 112
 948:	20 f4       	brcc	.+8      	; 0x952 <vfprintf+0x276>
 94a:	88 35       	cpi	r24, 0x58	; 88
 94c:	09 f0       	breq	.+2      	; 0x950 <vfprintf+0x274>
 94e:	ae c0       	rjmp	.+348    	; 0xaac <vfprintf+0x3d0>
 950:	0b c0       	rjmp	.+22     	; 0x968 <vfprintf+0x28c>
 952:	80 37       	cpi	r24, 0x70	; 112
 954:	21 f0       	breq	.+8      	; 0x95e <vfprintf+0x282>
 956:	88 37       	cpi	r24, 0x78	; 120
 958:	09 f0       	breq	.+2      	; 0x95c <vfprintf+0x280>
 95a:	a8 c0       	rjmp	.+336    	; 0xaac <vfprintf+0x3d0>
 95c:	01 c0       	rjmp	.+2      	; 0x960 <vfprintf+0x284>
 95e:	10 61       	ori	r17, 0x10	; 16
 960:	14 ff       	sbrs	r17, 4
 962:	09 c0       	rjmp	.+18     	; 0x976 <vfprintf+0x29a>
 964:	14 60       	ori	r17, 0x04	; 4
 966:	07 c0       	rjmp	.+14     	; 0x976 <vfprintf+0x29a>
 968:	14 ff       	sbrs	r17, 4
 96a:	08 c0       	rjmp	.+16     	; 0x97c <vfprintf+0x2a0>
 96c:	16 60       	ori	r17, 0x06	; 6
 96e:	06 c0       	rjmp	.+12     	; 0x97c <vfprintf+0x2a0>
 970:	28 e0       	ldi	r18, 0x08	; 8
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	05 c0       	rjmp	.+10     	; 0x980 <vfprintf+0x2a4>
 976:	20 e1       	ldi	r18, 0x10	; 16
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <vfprintf+0x2a4>
 97c:	20 e1       	ldi	r18, 0x10	; 16
 97e:	32 e0       	ldi	r19, 0x02	; 2
 980:	f5 01       	movw	r30, r10
 982:	17 ff       	sbrs	r17, 7
 984:	07 c0       	rjmp	.+14     	; 0x994 <vfprintf+0x2b8>
 986:	60 81       	ld	r22, Z
 988:	71 81       	ldd	r23, Z+1	; 0x01
 98a:	82 81       	ldd	r24, Z+2	; 0x02
 98c:	93 81       	ldd	r25, Z+3	; 0x03
 98e:	44 e0       	ldi	r20, 0x04	; 4
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <vfprintf+0x2c4>
 994:	60 81       	ld	r22, Z
 996:	71 81       	ldd	r23, Z+1	; 0x01
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	42 e0       	ldi	r20, 0x02	; 2
 99e:	50 e0       	ldi	r21, 0x00	; 0
 9a0:	a4 0e       	add	r10, r20
 9a2:	b5 1e       	adc	r11, r21
 9a4:	a2 01       	movw	r20, r4
 9a6:	0e 94 f7 05 	call	0xbee	; 0xbee <__ultoa_invert>
 9aa:	d8 2e       	mov	r13, r24
 9ac:	d4 18       	sub	r13, r4
 9ae:	01 2f       	mov	r16, r17
 9b0:	0f 77       	andi	r16, 0x7F	; 127
 9b2:	06 ff       	sbrs	r16, 6
 9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <vfprintf+0x2ec>
 9b6:	0e 7f       	andi	r16, 0xFE	; 254
 9b8:	df 14       	cp	r13, r15
 9ba:	30 f4       	brcc	.+12     	; 0x9c8 <vfprintf+0x2ec>
 9bc:	04 ff       	sbrs	r16, 4
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <vfprintf+0x2f0>
 9c0:	02 fd       	sbrc	r16, 2
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <vfprintf+0x2f0>
 9c4:	0f 7e       	andi	r16, 0xEF	; 239
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <vfprintf+0x2f0>
 9c8:	1d 2d       	mov	r17, r13
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <vfprintf+0x2f2>
 9cc:	1f 2d       	mov	r17, r15
 9ce:	80 2f       	mov	r24, r16
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	04 ff       	sbrs	r16, 4
 9d4:	0c c0       	rjmp	.+24     	; 0x9ee <vfprintf+0x312>
 9d6:	fe 01       	movw	r30, r28
 9d8:	ed 0d       	add	r30, r13
 9da:	f1 1d       	adc	r31, r1
 9dc:	20 81       	ld	r18, Z
 9de:	20 33       	cpi	r18, 0x30	; 48
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <vfprintf+0x30a>
 9e2:	09 7e       	andi	r16, 0xE9	; 233
 9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <vfprintf+0x31c>
 9e6:	02 ff       	sbrs	r16, 2
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x31a>
 9ea:	1e 5f       	subi	r17, 0xFE	; 254
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <vfprintf+0x31c>
 9ee:	86 78       	andi	r24, 0x86	; 134
 9f0:	90 70       	andi	r25, 0x00	; 0
 9f2:	00 97       	sbiw	r24, 0x00	; 0
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <vfprintf+0x31c>
 9f6:	1f 5f       	subi	r17, 0xFF	; 255
 9f8:	80 2e       	mov	r8, r16
 9fa:	99 24       	eor	r9, r9
 9fc:	03 fd       	sbrc	r16, 3
 9fe:	12 c0       	rjmp	.+36     	; 0xa24 <vfprintf+0x348>
 a00:	00 ff       	sbrs	r16, 0
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <vfprintf+0x342>
 a04:	fd 2c       	mov	r15, r13
 a06:	1e 15       	cp	r17, r14
 a08:	50 f4       	brcc	.+20     	; 0xa1e <vfprintf+0x342>
 a0a:	fe 0c       	add	r15, r14
 a0c:	f1 1a       	sub	r15, r17
 a0e:	1e 2d       	mov	r17, r14
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <vfprintf+0x342>
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	b3 01       	movw	r22, r6
 a18:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 a1c:	1f 5f       	subi	r17, 0xFF	; 255
 a1e:	1e 15       	cp	r17, r14
 a20:	c0 f3       	brcs	.-16     	; 0xa12 <vfprintf+0x336>
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <vfprintf+0x350>
 a24:	1e 15       	cp	r17, r14
 a26:	10 f4       	brcc	.+4      	; 0xa2c <vfprintf+0x350>
 a28:	e1 1a       	sub	r14, r17
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vfprintf+0x352>
 a2c:	ee 24       	eor	r14, r14
 a2e:	84 fe       	sbrs	r8, 4
 a30:	0f c0       	rjmp	.+30     	; 0xa50 <vfprintf+0x374>
 a32:	80 e3       	ldi	r24, 0x30	; 48
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	b3 01       	movw	r22, r6
 a38:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 a3c:	82 fe       	sbrs	r8, 2
 a3e:	1f c0       	rjmp	.+62     	; 0xa7e <vfprintf+0x3a2>
 a40:	81 fe       	sbrs	r8, 1
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <vfprintf+0x36e>
 a44:	88 e5       	ldi	r24, 0x58	; 88
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	10 c0       	rjmp	.+32     	; 0xa6a <vfprintf+0x38e>
 a4a:	88 e7       	ldi	r24, 0x78	; 120
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <vfprintf+0x38e>
 a50:	c4 01       	movw	r24, r8
 a52:	86 78       	andi	r24, 0x86	; 134
 a54:	90 70       	andi	r25, 0x00	; 0
 a56:	00 97       	sbiw	r24, 0x00	; 0
 a58:	91 f0       	breq	.+36     	; 0xa7e <vfprintf+0x3a2>
 a5a:	81 fc       	sbrc	r8, 1
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <vfprintf+0x386>
 a5e:	80 e2       	ldi	r24, 0x20	; 32
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <vfprintf+0x388>
 a62:	8b e2       	ldi	r24, 0x2B	; 43
 a64:	07 fd       	sbrc	r16, 7
 a66:	8d e2       	ldi	r24, 0x2D	; 45
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	b3 01       	movw	r22, r6
 a6c:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <vfprintf+0x3a2>
 a72:	80 e3       	ldi	r24, 0x30	; 48
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	b3 01       	movw	r22, r6
 a78:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 a7c:	fa 94       	dec	r15
 a7e:	df 14       	cp	r13, r15
 a80:	c0 f3       	brcs	.-16     	; 0xa72 <vfprintf+0x396>
 a82:	da 94       	dec	r13
 a84:	f2 01       	movw	r30, r4
 a86:	ed 0d       	add	r30, r13
 a88:	f1 1d       	adc	r31, r1
 a8a:	80 81       	ld	r24, Z
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b3 01       	movw	r22, r6
 a90:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 a94:	dd 20       	and	r13, r13
 a96:	a9 f7       	brne	.-22     	; 0xa82 <vfprintf+0x3a6>
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <vfprintf+0x3ca>
 a9a:	80 e2       	ldi	r24, 0x20	; 32
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	b3 01       	movw	r22, r6
 aa0:	0e 94 cb 05 	call	0xb96	; 0xb96 <fputc>
 aa4:	ea 94       	dec	r14
 aa6:	ee 20       	and	r14, r14
 aa8:	c1 f7       	brne	.-16     	; 0xa9a <vfprintf+0x3be>
 aaa:	40 ce       	rjmp	.-896    	; 0x72c <vfprintf+0x50>
 aac:	f3 01       	movw	r30, r6
 aae:	86 81       	ldd	r24, Z+6	; 0x06
 ab0:	97 81       	ldd	r25, Z+7	; 0x07
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0x3dc>
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	9f ef       	ldi	r25, 0xFF	; 255
 ab8:	2d 96       	adiw	r28, 0x0d	; 13
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	ff 90       	pop	r15
 ace:	ef 90       	pop	r14
 ad0:	df 90       	pop	r13
 ad2:	cf 90       	pop	r12
 ad4:	bf 90       	pop	r11
 ad6:	af 90       	pop	r10
 ad8:	9f 90       	pop	r9
 ada:	8f 90       	pop	r8
 adc:	7f 90       	pop	r7
 ade:	6f 90       	pop	r6
 ae0:	5f 90       	pop	r5
 ae2:	4f 90       	pop	r4
 ae4:	3f 90       	pop	r3
 ae6:	2f 90       	pop	r2
 ae8:	08 95       	ret

00000aea <strnlen_P>:
 aea:	fc 01       	movw	r30, r24
 aec:	05 90       	lpm	r0, Z+
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 10       	cpse	r0, r1
 af4:	d8 f7       	brcc	.-10     	; 0xaec <strnlen_P+0x2>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	8e 0f       	add	r24, r30
 afc:	9f 1f       	adc	r25, r31
 afe:	08 95       	ret

00000b00 <strnlen>:
 b00:	fc 01       	movw	r30, r24
 b02:	61 50       	subi	r22, 0x01	; 1
 b04:	70 40       	sbci	r23, 0x00	; 0
 b06:	01 90       	ld	r0, Z+
 b08:	01 10       	cpse	r0, r1
 b0a:	d8 f7       	brcc	.-10     	; 0xb02 <strnlen+0x2>
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	8e 0f       	add	r24, r30
 b12:	9f 1f       	adc	r25, r31
 b14:	08 95       	ret

00000b16 <fgetc>:
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	ec 01       	movw	r28, r24
 b1c:	2b 81       	ldd	r18, Y+3	; 0x03
 b1e:	20 ff       	sbrs	r18, 0
 b20:	35 c0       	rjmp	.+106    	; 0xb8c <fgetc+0x76>
 b22:	26 ff       	sbrs	r18, 6
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <fgetc+0x22>
 b26:	2f 7b       	andi	r18, 0xBF	; 191
 b28:	2b 83       	std	Y+3, r18	; 0x03
 b2a:	8e 81       	ldd	r24, Y+6	; 0x06
 b2c:	9f 81       	ldd	r25, Y+7	; 0x07
 b2e:	01 96       	adiw	r24, 0x01	; 1
 b30:	9f 83       	std	Y+7, r25	; 0x07
 b32:	8e 83       	std	Y+6, r24	; 0x06
 b34:	8a 81       	ldd	r24, Y+2	; 0x02
 b36:	28 c0       	rjmp	.+80     	; 0xb88 <fgetc+0x72>
 b38:	22 ff       	sbrs	r18, 2
 b3a:	0f c0       	rjmp	.+30     	; 0xb5a <fgetc+0x44>
 b3c:	e8 81       	ld	r30, Y
 b3e:	f9 81       	ldd	r31, Y+1	; 0x01
 b40:	80 81       	ld	r24, Z
 b42:	99 27       	eor	r25, r25
 b44:	87 fd       	sbrc	r24, 7
 b46:	90 95       	com	r25
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	19 f4       	brne	.+6      	; 0xb52 <fgetc+0x3c>
 b4c:	20 62       	ori	r18, 0x20	; 32
 b4e:	2b 83       	std	Y+3, r18	; 0x03
 b50:	1d c0       	rjmp	.+58     	; 0xb8c <fgetc+0x76>
 b52:	31 96       	adiw	r30, 0x01	; 1
 b54:	f9 83       	std	Y+1, r31	; 0x01
 b56:	e8 83       	st	Y, r30
 b58:	11 c0       	rjmp	.+34     	; 0xb7c <fgetc+0x66>
 b5a:	ea 85       	ldd	r30, Y+10	; 0x0a
 b5c:	fb 85       	ldd	r31, Y+11	; 0x0b
 b5e:	ce 01       	movw	r24, r28
 b60:	19 95       	eicall
 b62:	97 ff       	sbrs	r25, 7
 b64:	0b c0       	rjmp	.+22     	; 0xb7c <fgetc+0x66>
 b66:	2b 81       	ldd	r18, Y+3	; 0x03
 b68:	3f ef       	ldi	r19, 0xFF	; 255
 b6a:	8f 3f       	cpi	r24, 0xFF	; 255
 b6c:	93 07       	cpc	r25, r19
 b6e:	11 f4       	brne	.+4      	; 0xb74 <fgetc+0x5e>
 b70:	80 e1       	ldi	r24, 0x10	; 16
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <fgetc+0x60>
 b74:	80 e2       	ldi	r24, 0x20	; 32
 b76:	82 2b       	or	r24, r18
 b78:	8b 83       	std	Y+3, r24	; 0x03
 b7a:	08 c0       	rjmp	.+16     	; 0xb8c <fgetc+0x76>
 b7c:	2e 81       	ldd	r18, Y+6	; 0x06
 b7e:	3f 81       	ldd	r19, Y+7	; 0x07
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	3f 83       	std	Y+7, r19	; 0x07
 b86:	2e 83       	std	Y+6, r18	; 0x06
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <fgetc+0x7a>
 b8c:	8f ef       	ldi	r24, 0xFF	; 255
 b8e:	9f ef       	ldi	r25, 0xFF	; 255
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	08 95       	ret

00000b96 <fputc>:
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	8c 01       	movw	r16, r24
 ba0:	eb 01       	movw	r28, r22
 ba2:	8b 81       	ldd	r24, Y+3	; 0x03
 ba4:	81 ff       	sbrs	r24, 1
 ba6:	1b c0       	rjmp	.+54     	; 0xbde <fputc+0x48>
 ba8:	82 ff       	sbrs	r24, 2
 baa:	0d c0       	rjmp	.+26     	; 0xbc6 <fputc+0x30>
 bac:	2e 81       	ldd	r18, Y+6	; 0x06
 bae:	3f 81       	ldd	r19, Y+7	; 0x07
 bb0:	8c 81       	ldd	r24, Y+4	; 0x04
 bb2:	9d 81       	ldd	r25, Y+5	; 0x05
 bb4:	28 17       	cp	r18, r24
 bb6:	39 07       	cpc	r19, r25
 bb8:	64 f4       	brge	.+24     	; 0xbd2 <fputc+0x3c>
 bba:	e8 81       	ld	r30, Y
 bbc:	f9 81       	ldd	r31, Y+1	; 0x01
 bbe:	01 93       	st	Z+, r16
 bc0:	f9 83       	std	Y+1, r31	; 0x01
 bc2:	e8 83       	st	Y, r30
 bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <fputc+0x3c>
 bc6:	e8 85       	ldd	r30, Y+8	; 0x08
 bc8:	f9 85       	ldd	r31, Y+9	; 0x09
 bca:	80 2f       	mov	r24, r16
 bcc:	19 95       	eicall
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	31 f4       	brne	.+12     	; 0xbde <fputc+0x48>
 bd2:	8e 81       	ldd	r24, Y+6	; 0x06
 bd4:	9f 81       	ldd	r25, Y+7	; 0x07
 bd6:	01 96       	adiw	r24, 0x01	; 1
 bd8:	9f 83       	std	Y+7, r25	; 0x07
 bda:	8e 83       	std	Y+6, r24	; 0x06
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <fputc+0x4c>
 bde:	0f ef       	ldi	r16, 0xFF	; 255
 be0:	1f ef       	ldi	r17, 0xFF	; 255
 be2:	c8 01       	movw	r24, r16
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	08 95       	ret

00000bee <__ultoa_invert>:
 bee:	fa 01       	movw	r30, r20
 bf0:	aa 27       	eor	r26, r26
 bf2:	28 30       	cpi	r18, 0x08	; 8
 bf4:	51 f1       	breq	.+84     	; 0xc4a <__ultoa_invert+0x5c>
 bf6:	20 31       	cpi	r18, 0x10	; 16
 bf8:	81 f1       	breq	.+96     	; 0xc5a <__ultoa_invert+0x6c>
 bfa:	e8 94       	clt
 bfc:	6f 93       	push	r22
 bfe:	6e 7f       	andi	r22, 0xFE	; 254
 c00:	6e 5f       	subi	r22, 0xFE	; 254
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	af 4f       	sbci	r26, 0xFF	; 255
 c0a:	b1 e0       	ldi	r27, 0x01	; 1
 c0c:	3e d0       	rcall	.+124    	; 0xc8a <__ultoa_invert+0x9c>
 c0e:	b4 e0       	ldi	r27, 0x04	; 4
 c10:	3c d0       	rcall	.+120    	; 0xc8a <__ultoa_invert+0x9c>
 c12:	67 0f       	add	r22, r23
 c14:	78 1f       	adc	r23, r24
 c16:	89 1f       	adc	r24, r25
 c18:	9a 1f       	adc	r25, r26
 c1a:	a1 1d       	adc	r26, r1
 c1c:	68 0f       	add	r22, r24
 c1e:	79 1f       	adc	r23, r25
 c20:	8a 1f       	adc	r24, r26
 c22:	91 1d       	adc	r25, r1
 c24:	a1 1d       	adc	r26, r1
 c26:	6a 0f       	add	r22, r26
 c28:	71 1d       	adc	r23, r1
 c2a:	81 1d       	adc	r24, r1
 c2c:	91 1d       	adc	r25, r1
 c2e:	a1 1d       	adc	r26, r1
 c30:	20 d0       	rcall	.+64     	; 0xc72 <__ultoa_invert+0x84>
 c32:	09 f4       	brne	.+2      	; 0xc36 <__ultoa_invert+0x48>
 c34:	68 94       	set
 c36:	3f 91       	pop	r19
 c38:	2a e0       	ldi	r18, 0x0A	; 10
 c3a:	26 9f       	mul	r18, r22
 c3c:	11 24       	eor	r1, r1
 c3e:	30 19       	sub	r19, r0
 c40:	30 5d       	subi	r19, 0xD0	; 208
 c42:	31 93       	st	Z+, r19
 c44:	de f6       	brtc	.-74     	; 0xbfc <__ultoa_invert+0xe>
 c46:	cf 01       	movw	r24, r30
 c48:	08 95       	ret
 c4a:	46 2f       	mov	r20, r22
 c4c:	47 70       	andi	r20, 0x07	; 7
 c4e:	40 5d       	subi	r20, 0xD0	; 208
 c50:	41 93       	st	Z+, r20
 c52:	b3 e0       	ldi	r27, 0x03	; 3
 c54:	0f d0       	rcall	.+30     	; 0xc74 <__ultoa_invert+0x86>
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__ultoa_invert+0x5c>
 c58:	f6 cf       	rjmp	.-20     	; 0xc46 <__ultoa_invert+0x58>
 c5a:	46 2f       	mov	r20, r22
 c5c:	4f 70       	andi	r20, 0x0F	; 15
 c5e:	40 5d       	subi	r20, 0xD0	; 208
 c60:	4a 33       	cpi	r20, 0x3A	; 58
 c62:	18 f0       	brcs	.+6      	; 0xc6a <__ultoa_invert+0x7c>
 c64:	49 5d       	subi	r20, 0xD9	; 217
 c66:	31 fd       	sbrc	r19, 1
 c68:	40 52       	subi	r20, 0x20	; 32
 c6a:	41 93       	st	Z+, r20
 c6c:	02 d0       	rcall	.+4      	; 0xc72 <__ultoa_invert+0x84>
 c6e:	a9 f7       	brne	.-22     	; 0xc5a <__ultoa_invert+0x6c>
 c70:	ea cf       	rjmp	.-44     	; 0xc46 <__ultoa_invert+0x58>
 c72:	b4 e0       	ldi	r27, 0x04	; 4
 c74:	a6 95       	lsr	r26
 c76:	97 95       	ror	r25
 c78:	87 95       	ror	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	ba 95       	dec	r27
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__ultoa_invert+0x86>
 c82:	00 97       	sbiw	r24, 0x00	; 0
 c84:	61 05       	cpc	r22, r1
 c86:	71 05       	cpc	r23, r1
 c88:	08 95       	ret
 c8a:	9b 01       	movw	r18, r22
 c8c:	ac 01       	movw	r20, r24
 c8e:	0a 2e       	mov	r0, r26
 c90:	06 94       	lsr	r0
 c92:	57 95       	ror	r21
 c94:	47 95       	ror	r20
 c96:	37 95       	ror	r19
 c98:	27 95       	ror	r18
 c9a:	ba 95       	dec	r27
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__ultoa_invert+0xa2>
 c9e:	62 0f       	add	r22, r18
 ca0:	73 1f       	adc	r23, r19
 ca2:	84 1f       	adc	r24, r20
 ca4:	95 1f       	adc	r25, r21
 ca6:	a0 1d       	adc	r26, r0
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
