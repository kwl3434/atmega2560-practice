
pjt9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00001194  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000217  00800290  00800290  000012b8  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  00002708  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002131  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001057  00000000  00000000  00004ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134c  00000000  00000000  00005b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00006e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  000073cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000158c  00000000  00000000  00007a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00008fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e9       	ldi	r30, 0x94	; 148
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 39       	cpi	r26, 0x90	; 144
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	a0 e9       	ldi	r26, 0x90	; 144
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 3a       	cpi	r26, 0xA7	; 167
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
     124:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__vector_27>:
#include"queue.h"
#include"uart.h"
#define ETX 0x04
extern char volatile uart_busy;
ISR(USART0_TX_vect)
{
     12c:	1f 92       	push	r1
     12e:	0f 92       	push	r0
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	0f 92       	push	r0
     134:	0b b6       	in	r0, 0x3b	; 59
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	2f 93       	push	r18
     13c:	3f 93       	push	r19
     13e:	4f 93       	push	r20
     140:	5f 93       	push	r21
     142:	6f 93       	push	r22
     144:	7f 93       	push	r23
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
     14a:	af 93       	push	r26
     14c:	bf 93       	push	r27
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     152:	0e 94 28 02 	call	0x450	; 0x450 <qo_delete>
     156:	88 23       	and	r24, r24
     158:	19 f4       	brne	.+6      	; 0x160 <__vector_27+0x34>
		uart_busy = 0;
     15a:	10 92 9c 04 	sts	0x049C, r1
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__vector_27+0x38>
	else
		UDR0 = ch;
     160:	80 93 c6 00 	sts	0x00C6, r24
}
     164:	ff 91       	pop	r31
     166:	ef 91       	pop	r30
     168:	bf 91       	pop	r27
     16a:	af 91       	pop	r26
     16c:	9f 91       	pop	r25
     16e:	8f 91       	pop	r24
     170:	7f 91       	pop	r23
     172:	6f 91       	pop	r22
     174:	5f 91       	pop	r21
     176:	4f 91       	pop	r20
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <__vector_25>:
ISR(USART0_RX_vect)
{
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	0b b6       	in	r0, 0x3b	; 59
     194:	0f 92       	push	r0
     196:	11 24       	eor	r1, r1
     198:	2f 93       	push	r18
     19a:	3f 93       	push	r19
     19c:	4f 93       	push	r20
     19e:	5f 93       	push	r21
     1a0:	6f 93       	push	r22
     1a2:	7f 93       	push	r23
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	af 93       	push	r26
     1aa:	bf 93       	push	r27
     1ac:	cf 93       	push	r28
     1ae:	ef 93       	push	r30
     1b0:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     1b2:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != ETX) {
     1b6:	c4 30       	cpi	r28, 0x04	; 4
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <__vector_25+0x3c>
		if(ch == '\r')
     1ba:	cd 30       	cpi	r28, 0x0D	; 13
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <__vector_25+0x36>
			ch = '\n';
     1be:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 9d 02 	call	0x53a	; 0x53a <uart_echo>
	}
	qi_insert(ch);
     1c6:	8c 2f       	mov	r24, r28
     1c8:	0e 94 c7 01 	call	0x38e	; 0x38e <qi_insert>
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	cf 91       	pop	r28
     1d2:	bf 91       	pop	r27
     1d4:	af 91       	pop	r26
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	7f 91       	pop	r23
     1dc:	6f 91       	pop	r22
     1de:	5f 91       	pop	r21
     1e0:	4f 91       	pop	r20
     1e2:	3f 91       	pop	r19
     1e4:	2f 91       	pop	r18
     1e6:	0f 90       	pop	r0
     1e8:	0b be       	out	0x3b, r0	; 59
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     1fa:	62 e0       	ldi	r22, 0x02	; 2
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     202:	eb 01       	movw	r28, r22
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	08 c0       	rjmp	.+16     	; 0x21a <is_prime+0x26>
		if((n%i) == 0)
     20a:	cf 01       	movw	r24, r30
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	41 f0       	breq	.+16     	; 0x226 <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     216:	2f 5f       	subi	r18, 0xFF	; 255
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	c2 17       	cp	r28, r18
     21c:	d3 07       	cpc	r29, r19
     21e:	ac f7       	brge	.-22     	; 0x20a <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <app_prime>:
void app_prime(char *ap)
{
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	21 f0       	breq	.+8      	; 0x24c <app_prime+0x1c>
     244:	0e 94 0b 05 	call	0xa16	; 0xa16 <atoi>
     248:	7c 01       	movw	r14, r24
     24a:	04 c0       	rjmp	.+8      	; 0x254 <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     24c:	90 ed       	ldi	r25, 0xD0	; 208
     24e:	e9 2e       	mov	r14, r25
     250:	97 e0       	ldi	r25, 0x07	; 7
     252:	f9 2e       	mov	r15, r25
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     258:	c2 e0       	ldi	r28, 0x02	; 2
     25a:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     25c:	8f e3       	ldi	r24, 0x3F	; 63
     25e:	c8 2e       	mov	r12, r24
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     264:	16 c0       	rjmp	.+44     	; 0x292 <app_prime+0x62>
		if(is_prime(n)) {
     266:	ce 01       	movw	r24, r28
     268:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <is_prime>
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	81 f0       	breq	.+32     	; 0x290 <app_prime+0x60>
			count++;
     270:	0f 5f       	subi	r16, 0xFF	; 255
     272:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     274:	00 d0       	rcall	.+0      	; 0x276 <app_prime+0x46>
     276:	0f 92       	push	r0
     278:	ed b7       	in	r30, 0x3d	; 61
     27a:	fe b7       	in	r31, 0x3e	; 62
     27c:	d2 82       	std	Z+2, r13	; 0x02
     27e:	c1 82       	std	Z+1, r12	; 0x01
     280:	d4 83       	std	Z+4, r29	; 0x04
     282:	c3 83       	std	Z+3, r28	; 0x03
     284:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     290:	21 96       	adiw	r28, 0x01	; 1
     292:	ec 16       	cp	r14, r28
     294:	fd 06       	cpc	r15, r29
     296:	3c f7       	brge	.-50     	; 0x266 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     298:	00 d0       	rcall	.+0      	; 0x29a <app_prime+0x6a>
     29a:	0f 92       	push	r0
     29c:	89 e5       	ldi	r24, 0x59	; 89
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	ed b7       	in	r30, 0x3d	; 61
     2a2:	fe b7       	in	r31, 0x3e	; 62
     2a4:	92 83       	std	Z+2, r25	; 0x02
     2a6:	81 83       	std	Z+1, r24	; 0x01
     2a8:	14 83       	std	Z+4, r17	; 0x04
     2aa:	03 83       	std	Z+3, r16	; 0x03
     2ac:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <app_list>:
void app_list(char *ap)
{
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	28 97       	sbiw	r28, 0x08	; 8
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	19 f0       	breq	.+6      	; 0x2ee <app_list+0x24>
     2e8:	fc 01       	movw	r30, r24
     2ea:	10 81       	ld	r17, Z
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     2ee:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     2f0:	23 e6       	ldi	r18, 0x63	; 99
     2f2:	e2 2e       	mov	r14, r18
     2f4:	22 e0       	ldi	r18, 0x02	; 2
     2f6:	f2 2e       	mov	r15, r18
     2f8:	0f 92       	push	r0
     2fa:	0f 92       	push	r0
     2fc:	ed b7       	in	r30, 0x3d	; 61
     2fe:	fe b7       	in	r31, 0x3e	; 62
     300:	f2 82       	std	Z+2, r15	; 0x02
     302:	e1 82       	std	Z+1, r14	; 0x01
     304:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	40 91 a1 04 	lds	r20, 0x04A1
     310:	50 91 a2 04 	lds	r21, 0x04A2
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	68 e0       	ldi	r22, 0x08	; 8
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	0e 94 66 05 	call	0xacc	; 0xacc <fgets>
     320:	00 97       	sbiw	r24, 0x00	; 0
     322:	a1 f0       	breq	.+40     	; 0x34c <app_list+0x82>
			break;
		np = get_node();
     324:	0e 94 57 03 	call	0x6ae	; 0x6ae <get_node>
		np->data = buf[0];
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     330:	18 36       	cpi	r17, 0x68	; 104
     332:	19 f0       	breq	.+6      	; 0x33a <app_list+0x70>
     334:	14 37       	cpi	r17, 0x74	; 116
     336:	39 f4       	brne	.+14     	; 0x346 <app_list+0x7c>
     338:	03 c0       	rjmp	.+6      	; 0x340 <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     33a:	0e 94 b3 02 	call	0x566	; 0x566 <insert_node_head>
     33e:	dc cf       	rjmp	.-72     	; 0x2f8 <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     340:	0e 94 c8 02 	call	0x590	; 0x590 <insert_node_tail>
     344:	d9 cf       	rjmp	.-78     	; 0x2f8 <app_list+0x2e>
			default :insert_node_ascn(np);
     346:	0e 94 df 02 	call	0x5be	; 0x5be <insert_node_ascn>
     34a:	d6 cf       	rjmp	.-84     	; 0x2f8 <app_list+0x2e>
		}
	}
	tour_list();
     34c:	0e 94 19 03 	call	0x632	; 0x632 <tour_list>
	free_list();
     350:	0e 94 46 03 	call	0x68c	; 0x68c <free_list>
}
     354:	28 96       	adiw	r28, 0x08	; 8
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     36c:	10 92 99 03 	sts	0x0399, r1
     370:	10 92 98 03 	sts	0x0398, r1
     374:	10 92 97 03 	sts	0x0397, r1
     378:	10 92 96 03 	sts	0x0396, r1
     37c:	10 92 9b 03 	sts	0x039B, r1
     380:	10 92 9a 03 	sts	0x039A, r1
     384:	10 92 95 02 	sts	0x0295, r1
     388:	10 92 94 02 	sts	0x0294, r1
}
     38c:	08 95       	ret

0000038e <qi_insert>:
int qi_insert(char ch)
{
     38e:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     390:	20 91 9a 03 	lds	r18, 0x039A
     394:	30 91 9b 03 	lds	r19, 0x039B
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	c9 01       	movw	r24, r18
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	71 e0       	ldi	r23, 0x01	; 1
     3a2:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     3a6:	9c 01       	movw	r18, r24
     3a8:	80 91 94 02 	lds	r24, 0x0294
     3ac:	90 91 95 02 	lds	r25, 0x0295
     3b0:	28 17       	cp	r18, r24
     3b2:	39 07       	cpc	r19, r25
     3b4:	59 f0       	breq	.+22     	; 0x3cc <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     3b6:	30 93 9b 03 	sts	0x039B, r19
     3ba:	20 93 9a 03 	sts	0x039A, r18
	qi[ri] = ch;
     3be:	24 56       	subi	r18, 0x64	; 100
     3c0:	3c 4f       	sbci	r19, 0xFC	; 252
     3c2:	f9 01       	movw	r30, r18
     3c4:	40 83       	st	Z, r20
	return 1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     3d0:	08 95       	ret

000003d2 <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     3d2:	80 91 94 02 	lds	r24, 0x0294
     3d6:	90 91 95 02 	lds	r25, 0x0295
     3da:	20 91 9a 03 	lds	r18, 0x039A
     3de:	30 91 9b 03 	lds	r19, 0x039B
     3e2:	28 17       	cp	r18, r24
     3e4:	39 07       	cpc	r19, r25
     3e6:	79 f0       	breq	.+30     	; 0x406 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     3f2:	90 93 95 02 	sts	0x0295, r25
     3f6:	80 93 94 02 	sts	0x0294, r24
	return qi[fi];
     3fa:	84 56       	subi	r24, 0x64	; 100
     3fc:	9c 4f       	sbci	r25, 0xFC	; 252
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     40a:	08 95       	ret

0000040c <qo_insert>:
int qo_insert(char ch)
{
     40c:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     40e:	20 91 98 03 	lds	r18, 0x0398
     412:	30 91 99 03 	lds	r19, 0x0399
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	c9 01       	movw	r24, r18
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	71 e0       	ldi	r23, 0x01	; 1
     420:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     424:	9c 01       	movw	r18, r24
     426:	80 91 96 03 	lds	r24, 0x0396
     42a:	90 91 97 03 	lds	r25, 0x0397
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	59 f0       	breq	.+22     	; 0x44a <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     434:	30 93 99 03 	sts	0x0399, r19
     438:	20 93 98 03 	sts	0x0398, r18
	qo[ro] = ch;
     43c:	2a 56       	subi	r18, 0x6A	; 106
     43e:	3d 4f       	sbci	r19, 0xFD	; 253
     440:	f9 01       	movw	r30, r18
     442:	40 83       	st	Z, r20
	return 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     44e:	08 95       	ret

00000450 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     450:	80 91 96 03 	lds	r24, 0x0396
     454:	90 91 97 03 	lds	r25, 0x0397
     458:	20 91 98 03 	lds	r18, 0x0398
     45c:	30 91 99 03 	lds	r19, 0x0399
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	79 f0       	breq	.+30     	; 0x484 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     470:	90 93 97 03 	sts	0x0397, r25
     474:	80 93 96 03 	sts	0x0396, r24
	return qo[fo];
     478:	8a 56       	subi	r24, 0x6A	; 106
     47a:	9d 4f       	sbci	r25, 0xFD	; 253
     47c:	fc 01       	movw	r30, r24
     47e:	80 81       	ld	r24, Z
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     488:	08 95       	ret

0000048a <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     48a:	f8 94       	cli
		ch = qi_delete();
     48c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <qi_delete>
		sei();
     490:	78 94       	sei
	}while(ch == 0);
     492:	88 23       	and	r24, r24
     494:	d1 f3       	breq	.-12     	; 0x48a <uart_getchar>

	if (ch == ETX) return -1;
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	11 f0       	breq	.+4      	; 0x49e <uart_getchar+0x14>
	else		   return ch;
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     4a2:	08 95       	ret

000004a4 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     4a4:	cf 93       	push	r28
     4a6:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     4a8:	8a 30       	cpi	r24, 0x0A	; 10
     4aa:	19 f4       	brne	.+6      	; 0x4b2 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     4ac:	8d e0       	ldi	r24, 0x0D	; 13
     4ae:	0e 94 52 02 	call	0x4a4	; 0x4a4 <uart_putchar>
	cli();
     4b2:	f8 94       	cli
	if(!uart_busy){
     4b4:	80 91 9c 04 	lds	r24, 0x049C
     4b8:	88 23       	and	r24, r24
     4ba:	61 f4       	brne	.+24     	; 0x4d4 <uart_putchar+0x30>
		UDR0 = ch;
     4bc:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 9c 04 	sts	0x049C, r24
     4c6:	0b c0       	rjmp	.+22     	; 0x4de <uart_putchar+0x3a>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     4c8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ca:	81 e2       	ldi	r24, 0x21	; 33
     4cc:	8a 95       	dec	r24
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <uart_putchar+0x28>
     4d0:	00 00       	nop
			_delay_us(100);
			cli();
     4d2:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     4d4:	8c 2f       	mov	r24, r28
     4d6:	0e 94 06 02 	call	0x40c	; 0x40c <qo_insert>
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	a9 f3       	breq	.-22     	; 0x4c8 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     4de:	78 94       	sei
	return 1;
}
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     4e8:	86 e6       	ldi	r24, 0x66	; 102
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	90 93 a2 04 	sts	0x04A2, r25
     4f0:	80 93 a1 04 	sts	0x04A1, r24
	stdout = &Mystdout;
     4f4:	84 e7       	ldi	r24, 0x74	; 116
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	90 93 a4 04 	sts	0x04A4, r25
     4fc:	80 93 a3 04 	sts	0x04A3, r24
	uart_busy = 0;
     500:	10 92 9c 04 	sts	0x049C, r1
	q_init();
     504:	0e 94 b6 01 	call	0x36c	; 0x36c <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     508:	10 92 c5 00 	sts	0x00C5, r1
     50c:	87 e0       	ldi	r24, 0x07	; 7
     50e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     512:	e0 ec       	ldi	r30, 0xC0	; 192
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	82 60       	ori	r24, 0x02	; 2
     51a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     51c:	e1 ec       	ldi	r30, 0xC1	; 193
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	88 60       	ori	r24, 0x08	; 8
     524:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     526:	80 81       	ld	r24, Z
     528:	80 64       	ori	r24, 0x40	; 64
     52a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     52c:	80 81       	ld	r24, Z
     52e:	80 61       	ori	r24, 0x10	; 16
     530:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     532:	80 81       	ld	r24, Z
     534:	80 68       	ori	r24, 0x80	; 128
     536:	80 83       	st	Z, r24
}
     538:	08 95       	ret

0000053a <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     53a:	cf 93       	push	r28
     53c:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     53e:	8a 30       	cpi	r24, 0x0A	; 10
     540:	19 f4       	brne	.+6      	; 0x548 <uart_echo+0xe>
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	0e 94 9d 02 	call	0x53a	; 0x53a <uart_echo>
	if(!uart_busy){
     548:	80 91 9c 04 	lds	r24, 0x049C
     54c:	88 23       	and	r24, r24
     54e:	31 f4       	brne	.+12     	; 0x55c <uart_echo+0x22>
		UDR0 = ch;
     550:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 9c 04 	sts	0x049C, r24
     55a:	03 c0       	rjmp	.+6      	; 0x562 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     55c:	8c 2f       	mov	r24, r28
     55e:	0e 94 06 02 	call	0x40c	; 0x40c <qo_insert>
}
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     566:	fc 01       	movw	r30, r24
	if(!Head){
     568:	80 91 90 02 	lds	r24, 0x0290
     56c:	90 91 91 02 	lds	r25, 0x0291
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	39 f4       	brne	.+14     	; 0x582 <insert_node_head+0x1c>
		Head = np;
     574:	f0 93 91 02 	sts	0x0291, r31
     578:	e0 93 90 02 	sts	0x0290, r30
		np->link = NULL;
     57c:	13 82       	std	Z+3, r1	; 0x03
     57e:	12 82       	std	Z+2, r1	; 0x02
     580:	08 95       	ret
	}else {
		np->link = Head;
     582:	93 83       	std	Z+3, r25	; 0x03
     584:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     586:	f0 93 91 02 	sts	0x0291, r31
     58a:	e0 93 90 02 	sts	0x0290, r30
     58e:	08 95       	ret

00000590 <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     590:	e0 91 90 02 	lds	r30, 0x0290
     594:	f0 91 91 02 	lds	r31, 0x0291
     598:	30 97       	sbiw	r30, 0x00	; 0
     59a:	31 f4       	brne	.+12     	; 0x5a8 <insert_node_tail+0x18>
		Head = np;
     59c:	90 93 91 02 	sts	0x0291, r25
     5a0:	80 93 90 02 	sts	0x0290, r24
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     5a6:	f9 01       	movw	r30, r18
     5a8:	22 81       	ldd	r18, Z+2	; 0x02
     5aa:	33 81       	ldd	r19, Z+3	; 0x03
     5ac:	21 15       	cp	r18, r1
     5ae:	31 05       	cpc	r19, r1
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <insert_node_tail+0x16>
			;
		cp->link = np;
     5b2:	93 83       	std	Z+3, r25	; 0x03
     5b4:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     5b6:	fc 01       	movw	r30, r24
     5b8:	13 82       	std	Z+3, r1	; 0x03
     5ba:	12 82       	std	Z+2, r1	; 0x02
}
     5bc:	08 95       	ret

000005be <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     5c4:	20 91 90 02 	lds	r18, 0x0290
     5c8:	30 91 91 02 	lds	r19, 0x0291
     5cc:	21 15       	cp	r18, r1
     5ce:	31 05       	cpc	r19, r1
     5d0:	31 f0       	breq	.+12     	; 0x5de <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     5d2:	40 81       	ld	r20, Z
     5d4:	51 81       	ldd	r21, Z+1	; 0x01
     5d6:	d9 01       	movw	r26, r18
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
     5da:	d0 e0       	ldi	r29, 0x00	; 0
     5dc:	0f c0       	rjmp	.+30     	; 0x5fc <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     5de:	90 93 91 02 	sts	0x0291, r25
     5e2:	80 93 90 02 	sts	0x0290, r24
		np->link = NULL;
     5e6:	13 82       	std	Z+3, r1	; 0x03
     5e8:	12 82       	std	Z+2, r1	; 0x02
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     5ec:	12 96       	adiw	r26, 0x02	; 2
     5ee:	8d 91       	ld	r24, X+
     5f0:	9c 91       	ld	r25, X
     5f2:	13 97       	sbiw	r26, 0x03	; 3
     5f4:	ed 01       	movw	r28, r26
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	39 f0       	breq	.+14     	; 0x608 <insert_node_ascn+0x4a>
     5fa:	dc 01       	movw	r26, r24
     5fc:	8d 91       	ld	r24, X+
     5fe:	9c 91       	ld	r25, X
     600:	11 97       	sbiw	r26, 0x01	; 1
     602:	84 17       	cp	r24, r20
     604:	95 07       	cpc	r25, r21
     606:	94 f3       	brlt	.-28     	; 0x5ec <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     608:	20 97       	sbiw	r28, 0x00	; 0
     60a:	39 f4       	brne	.+14     	; 0x61a <insert_node_ascn+0x5c>
			np->link = Head;
     60c:	33 83       	std	Z+3, r19	; 0x03
     60e:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     610:	f0 93 91 02 	sts	0x0291, r31
     614:	e0 93 90 02 	sts	0x0290, r30
     618:	06 c0       	rjmp	.+12     	; 0x626 <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	9b 81       	ldd	r25, Y+3	; 0x03
     61e:	93 83       	std	Z+3, r25	; 0x03
     620:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     622:	fb 83       	std	Y+3, r31	; 0x03
     624:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <free_node>:
void free_node(NODE *np)
{
	free(np);
     62c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <free>
}
     630:	08 95       	ret

00000632 <tour_list>:
void tour_list()
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     63a:	8a e0       	ldi	r24, 0x0A	; 10
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 ac 05 	call	0xb58	; 0xb58 <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     642:	c0 91 90 02 	lds	r28, 0x0290
     646:	d0 91 91 02 	lds	r29, 0x0291
		printf("-->%c ", cp->data);
     64a:	02 e8       	ldi	r16, 0x82	; 130
     64c:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     64e:	13 c0       	rjmp	.+38     	; 0x676 <tour_list+0x44>
		printf("-->%c ", cp->data);
     650:	00 d0       	rcall	.+0      	; 0x652 <tour_list+0x20>
     652:	0f 92       	push	r0
     654:	ed b7       	in	r30, 0x3d	; 61
     656:	fe b7       	in	r31, 0x3e	; 62
     658:	12 83       	std	Z+2, r17	; 0x02
     65a:	01 83       	std	Z+1, r16	; 0x01
     65c:	88 81       	ld	r24, Y
     65e:	99 81       	ldd	r25, Y+1	; 0x01
     660:	94 83       	std	Z+4, r25	; 0x04
     662:	83 83       	std	Z+3, r24	; 0x03
     664:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     668:	0a 80       	ldd	r0, Y+2	; 0x02
     66a:	db 81       	ldd	r29, Y+3	; 0x03
     66c:	c0 2d       	mov	r28, r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	20 97       	sbiw	r28, 0x00	; 0
     678:	59 f7       	brne	.-42     	; 0x650 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     67a:	8a e0       	ldi	r24, 0x0A	; 10
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 ac 05 	call	0xb58	; 0xb58 <putchar>
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     68e:	fc 01       	movw	r30, r24
     690:	22 81       	ldd	r18, Z+2	; 0x02
     692:	33 81       	ldd	r19, Z+3	; 0x03
     694:	30 93 91 02 	sts	0x0291, r19
     698:	20 93 90 02 	sts	0x0290, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     69c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     6a0:	80 91 90 02 	lds	r24, 0x0290
     6a4:	90 91 91 02 	lds	r25, 0x0291
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	89 f7       	brne	.-30     	; 0x68e <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     6ac:	08 95       	ret

000006ae <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <malloc>
	return cp;
}
     6b6:	08 95       	ret

000006b8 <main>:
#include<string.h>
#include<avr/interrupt.h>
#include"uart.h"
#include"prime.h"

int main(){
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	c0 58       	subi	r28, 0x80	; 128
     6c2:	d0 40       	sbci	r29, 0x00	; 0
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     6ce:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uart_init>
	sei();
     6d2:	78 94       	sei
	while(1){
		printf("$ ");
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	e8 2e       	mov	r14, r24
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	f8 2e       	mov	r15, r24
     6dc:	0f 92       	push	r0
     6de:	0f 92       	push	r0
     6e0:	ed b7       	in	r30, 0x3d	; 61
     6e2:	fe b7       	in	r31, 0x3e	; 62
     6e4:	f2 82       	std	Z+2, r15	; 0x02
     6e6:	e1 82       	std	Z+1, r14	; 0x01
     6e8:	0e 94 9a 05 	call	0xb34	; 0xb34 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	40 91 a1 04 	lds	r20, 0x04A1
     6f4:	50 91 a2 04 	lds	r21, 0x04A2
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	60 e8       	ldi	r22, 0x80	; 128
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	0e 94 66 05 	call	0xacc	; 0xacc <fgets>
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	61 f1       	breq	.+88     	; 0x760 <main+0xa8>
			break;
		if((cp = strtok(cmd, "\b\r\t ")) == NULL) continue;
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	63 e0       	ldi	r22, 0x03	; 3
     70e:	72 e0       	ldi	r23, 0x02	; 2
     710:	0e 94 29 05 	call	0xa52	; 0xa52 <strtok>
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	11 f3       	breq	.-60     	; 0x6dc <main+0x24>
		ap = strtok(NULL, "\n\r\t ");
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	68 e0       	ldi	r22, 0x08	; 8
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	0e 94 29 05 	call	0xa52	; 0xa52 <strtok>
     724:	8c 01       	movw	r16, r24
		if(!strcmp(cmd, "prime")) app_prime(ap);
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	6d e0       	ldi	r22, 0x0D	; 13
     72c:	72 e0       	ldi	r23, 0x02	; 2
     72e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strcmp>
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	21 f4       	brne	.+8      	; 0x73e <main+0x86>
     736:	c8 01       	movw	r24, r16
     738:	0e 94 18 01 	call	0x230	; 0x230 <app_prime>
     73c:	cf cf       	rjmp	.-98     	; 0x6dc <main+0x24>
		else if(!strcmp(cmd, "list")) app_list(ap);
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	63 e1       	ldi	r22, 0x13	; 19
     744:	72 e0       	ldi	r23, 0x02	; 2
     746:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strcmp>
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	21 f4       	brne	.+8      	; 0x756 <main+0x9e>
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 65 01 	call	0x2ca	; 0x2ca <app_list>
     754:	c3 cf       	rjmp	.-122    	; 0x6dc <main+0x24>
		else printf("Unkown command...\n");
     756:	88 e1       	ldi	r24, 0x18	; 24
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 b3 05 	call	0xb66	; 0xb66 <puts>
     75e:	be cf       	rjmp	.-132    	; 0x6dc <main+0x24>
	}
	printf("logout, good bye !!!\n");
     760:	8a e2       	ldi	r24, 0x2A	; 42
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 b3 05 	call	0xb66	; 0xb66 <puts>
     768:	ff cf       	rjmp	.-2      	; 0x768 <main+0xb0>

0000076a <__divmodhi4>:
     76a:	97 fb       	bst	r25, 7
     76c:	09 2e       	mov	r0, r25
     76e:	07 26       	eor	r0, r23
     770:	0a d0       	rcall	.+20     	; 0x786 <__divmodhi4_neg1>
     772:	77 fd       	sbrc	r23, 7
     774:	04 d0       	rcall	.+8      	; 0x77e <__divmodhi4_neg2>
     776:	0c d0       	rcall	.+24     	; 0x790 <__udivmodhi4>
     778:	06 d0       	rcall	.+12     	; 0x786 <__divmodhi4_neg1>
     77a:	00 20       	and	r0, r0
     77c:	1a f4       	brpl	.+6      	; 0x784 <__divmodhi4_exit>

0000077e <__divmodhi4_neg2>:
     77e:	70 95       	com	r23
     780:	61 95       	neg	r22
     782:	7f 4f       	sbci	r23, 0xFF	; 255

00000784 <__divmodhi4_exit>:
     784:	08 95       	ret

00000786 <__divmodhi4_neg1>:
     786:	f6 f7       	brtc	.-4      	; 0x784 <__divmodhi4_exit>
     788:	90 95       	com	r25
     78a:	81 95       	neg	r24
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	08 95       	ret

00000790 <__udivmodhi4>:
     790:	aa 1b       	sub	r26, r26
     792:	bb 1b       	sub	r27, r27
     794:	51 e1       	ldi	r21, 0x11	; 17
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <__udivmodhi4_ep>

00000798 <__udivmodhi4_loop>:
     798:	aa 1f       	adc	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	a6 17       	cp	r26, r22
     79e:	b7 07       	cpc	r27, r23
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <__udivmodhi4_ep>
     7a2:	a6 1b       	sub	r26, r22
     7a4:	b7 0b       	sbc	r27, r23

000007a6 <__udivmodhi4_ep>:
     7a6:	88 1f       	adc	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	5a 95       	dec	r21
     7ac:	a9 f7       	brne	.-22     	; 0x798 <__udivmodhi4_loop>
     7ae:	80 95       	com	r24
     7b0:	90 95       	com	r25
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	08 95       	ret

000007b8 <malloc>:
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ac 01       	movw	r20, r24
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	91 05       	cpc	r25, r1
     7c2:	10 f4       	brcc	.+4      	; 0x7c8 <malloc+0x10>
     7c4:	42 e0       	ldi	r20, 0x02	; 2
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	e0 91 9f 04 	lds	r30, 0x049F
     7cc:	f0 91 a0 04 	lds	r31, 0x04A0
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	24 c0       	rjmp	.+72     	; 0x822 <malloc+0x6a>
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	84 17       	cp	r24, r20
     7e0:	95 07       	cpc	r25, r21
     7e2:	d0 f0       	brcs	.+52     	; 0x818 <malloc+0x60>
     7e4:	84 17       	cp	r24, r20
     7e6:	95 07       	cpc	r25, r21
     7e8:	71 f4       	brne	.+28     	; 0x806 <malloc+0x4e>
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	93 81       	ldd	r25, Z+3	; 0x03
     7ee:	10 97       	sbiw	r26, 0x00	; 0
     7f0:	29 f0       	breq	.+10     	; 0x7fc <malloc+0x44>
     7f2:	13 96       	adiw	r26, 0x03	; 3
     7f4:	9c 93       	st	X, r25
     7f6:	8e 93       	st	-X, r24
     7f8:	12 97       	sbiw	r26, 0x02	; 2
     7fa:	2c c0       	rjmp	.+88     	; 0x854 <malloc+0x9c>
     7fc:	90 93 a0 04 	sts	0x04A0, r25
     800:	80 93 9f 04 	sts	0x049F, r24
     804:	27 c0       	rjmp	.+78     	; 0x854 <malloc+0x9c>
     806:	21 15       	cp	r18, r1
     808:	31 05       	cpc	r19, r1
     80a:	19 f0       	breq	.+6      	; 0x812 <malloc+0x5a>
     80c:	82 17       	cp	r24, r18
     80e:	93 07       	cpc	r25, r19
     810:	18 f4       	brcc	.+6      	; 0x818 <malloc+0x60>
     812:	9c 01       	movw	r18, r24
     814:	bd 01       	movw	r22, r26
     816:	ef 01       	movw	r28, r30
     818:	92 81       	ldd	r25, Z+2	; 0x02
     81a:	83 81       	ldd	r24, Z+3	; 0x03
     81c:	df 01       	movw	r26, r30
     81e:	e9 2f       	mov	r30, r25
     820:	f8 2f       	mov	r31, r24
     822:	30 97       	sbiw	r30, 0x00	; 0
     824:	d1 f6       	brne	.-76     	; 0x7da <malloc+0x22>
     826:	21 15       	cp	r18, r1
     828:	31 05       	cpc	r19, r1
     82a:	f9 f0       	breq	.+62     	; 0x86a <malloc+0xb2>
     82c:	c9 01       	movw	r24, r18
     82e:	84 1b       	sub	r24, r20
     830:	95 0b       	sbc	r25, r21
     832:	84 30       	cpi	r24, 0x04	; 4
     834:	91 05       	cpc	r25, r1
     836:	80 f4       	brcc	.+32     	; 0x858 <malloc+0xa0>
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	61 15       	cp	r22, r1
     83e:	71 05       	cpc	r23, r1
     840:	21 f0       	breq	.+8      	; 0x84a <malloc+0x92>
     842:	fb 01       	movw	r30, r22
     844:	93 83       	std	Z+3, r25	; 0x03
     846:	82 83       	std	Z+2, r24	; 0x02
     848:	04 c0       	rjmp	.+8      	; 0x852 <malloc+0x9a>
     84a:	90 93 a0 04 	sts	0x04A0, r25
     84e:	80 93 9f 04 	sts	0x049F, r24
     852:	fe 01       	movw	r30, r28
     854:	32 96       	adiw	r30, 0x02	; 2
     856:	42 c0       	rjmp	.+132    	; 0x8dc <malloc+0x124>
     858:	fe 01       	movw	r30, r28
     85a:	e8 0f       	add	r30, r24
     85c:	f9 1f       	adc	r31, r25
     85e:	41 93       	st	Z+, r20
     860:	51 93       	st	Z+, r21
     862:	02 97       	sbiw	r24, 0x02	; 2
     864:	99 83       	std	Y+1, r25	; 0x01
     866:	88 83       	st	Y, r24
     868:	39 c0       	rjmp	.+114    	; 0x8dc <malloc+0x124>
     86a:	80 91 9d 04 	lds	r24, 0x049D
     86e:	90 91 9e 04 	lds	r25, 0x049E
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	41 f4       	brne	.+16     	; 0x886 <malloc+0xce>
     876:	80 91 8b 02 	lds	r24, 0x028B
     87a:	90 91 8c 02 	lds	r25, 0x028C
     87e:	90 93 9e 04 	sts	0x049E, r25
     882:	80 93 9d 04 	sts	0x049D, r24
     886:	20 91 89 02 	lds	r18, 0x0289
     88a:	30 91 8a 02 	lds	r19, 0x028A
     88e:	21 15       	cp	r18, r1
     890:	31 05       	cpc	r19, r1
     892:	41 f4       	brne	.+16     	; 0x8a4 <malloc+0xec>
     894:	2d b7       	in	r18, 0x3d	; 61
     896:	3e b7       	in	r19, 0x3e	; 62
     898:	80 91 8d 02 	lds	r24, 0x028D
     89c:	90 91 8e 02 	lds	r25, 0x028E
     8a0:	28 1b       	sub	r18, r24
     8a2:	39 0b       	sbc	r19, r25
     8a4:	e0 91 9d 04 	lds	r30, 0x049D
     8a8:	f0 91 9e 04 	lds	r31, 0x049E
     8ac:	e2 17       	cp	r30, r18
     8ae:	f3 07       	cpc	r31, r19
     8b0:	98 f4       	brcc	.+38     	; 0x8d8 <malloc+0x120>
     8b2:	2e 1b       	sub	r18, r30
     8b4:	3f 0b       	sbc	r19, r31
     8b6:	24 17       	cp	r18, r20
     8b8:	35 07       	cpc	r19, r21
     8ba:	70 f0       	brcs	.+28     	; 0x8d8 <malloc+0x120>
     8bc:	ca 01       	movw	r24, r20
     8be:	02 96       	adiw	r24, 0x02	; 2
     8c0:	28 17       	cp	r18, r24
     8c2:	39 07       	cpc	r19, r25
     8c4:	48 f0       	brcs	.+18     	; 0x8d8 <malloc+0x120>
     8c6:	8e 0f       	add	r24, r30
     8c8:	9f 1f       	adc	r25, r31
     8ca:	90 93 9e 04 	sts	0x049E, r25
     8ce:	80 93 9d 04 	sts	0x049D, r24
     8d2:	41 93       	st	Z+, r20
     8d4:	51 93       	st	Z+, r21
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <malloc+0x124>
     8d8:	e0 e0       	ldi	r30, 0x00	; 0
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	cf 01       	movw	r24, r30
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <free>:
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	9c 01       	movw	r18, r24
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <free+0x10>
     8f2:	8c c0       	rjmp	.+280    	; 0xa0c <free+0x128>
     8f4:	dc 01       	movw	r26, r24
     8f6:	12 97       	sbiw	r26, 0x02	; 2
     8f8:	13 96       	adiw	r26, 0x03	; 3
     8fa:	1c 92       	st	X, r1
     8fc:	1e 92       	st	-X, r1
     8fe:	12 97       	sbiw	r26, 0x02	; 2
     900:	60 91 9f 04 	lds	r22, 0x049F
     904:	70 91 a0 04 	lds	r23, 0x04A0
     908:	61 15       	cp	r22, r1
     90a:	71 05       	cpc	r23, r1
     90c:	89 f4       	brne	.+34     	; 0x930 <free+0x4c>
     90e:	8d 91       	ld	r24, X+
     910:	9c 91       	ld	r25, X
     912:	11 97       	sbiw	r26, 0x01	; 1
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	20 91 9d 04 	lds	r18, 0x049D
     91c:	30 91 9e 04 	lds	r19, 0x049E
     920:	28 17       	cp	r18, r24
     922:	39 07       	cpc	r19, r25
     924:	69 f5       	brne	.+90     	; 0x980 <free+0x9c>
     926:	b0 93 9e 04 	sts	0x049E, r27
     92a:	a0 93 9d 04 	sts	0x049D, r26
     92e:	6e c0       	rjmp	.+220    	; 0xa0c <free+0x128>
     930:	fb 01       	movw	r30, r22
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	01 c0       	rjmp	.+2      	; 0x93a <free+0x56>
     938:	fc 01       	movw	r30, r24
     93a:	ea 17       	cp	r30, r26
     93c:	fb 07       	cpc	r31, r27
     93e:	30 f4       	brcc	.+12     	; 0x94c <free+0x68>
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	af 01       	movw	r20, r30
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	b9 f7       	brne	.-18     	; 0x938 <free+0x54>
     94a:	1f c0       	rjmp	.+62     	; 0x98a <free+0xa6>
     94c:	e9 01       	movw	r28, r18
     94e:	22 97       	sbiw	r28, 0x02	; 2
     950:	fb 83       	std	Y+3, r31	; 0x03
     952:	ea 83       	std	Y+2, r30	; 0x02
     954:	08 81       	ld	r16, Y
     956:	19 81       	ldd	r17, Y+1	; 0x01
     958:	c9 01       	movw	r24, r18
     95a:	80 0f       	add	r24, r16
     95c:	91 1f       	adc	r25, r17
     95e:	8e 17       	cp	r24, r30
     960:	9f 07       	cpc	r25, r31
     962:	59 f4       	brne	.+22     	; 0x97a <free+0x96>
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	80 0f       	add	r24, r16
     96a:	91 1f       	adc	r25, r17
     96c:	02 96       	adiw	r24, 0x02	; 2
     96e:	99 83       	std	Y+1, r25	; 0x01
     970:	88 83       	st	Y, r24
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	93 81       	ldd	r25, Z+3	; 0x03
     976:	9b 83       	std	Y+3, r25	; 0x03
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	41 15       	cp	r20, r1
     97c:	51 05       	cpc	r21, r1
     97e:	29 f4       	brne	.+10     	; 0x98a <free+0xa6>
     980:	b0 93 a0 04 	sts	0x04A0, r27
     984:	a0 93 9f 04 	sts	0x049F, r26
     988:	41 c0       	rjmp	.+130    	; 0xa0c <free+0x128>
     98a:	fa 01       	movw	r30, r20
     98c:	b3 83       	std	Z+3, r27	; 0x03
     98e:	a2 83       	std	Z+2, r26	; 0x02
     990:	c1 91       	ld	r28, Z+
     992:	d1 91       	ld	r29, Z+
     994:	ec 0f       	add	r30, r28
     996:	fd 1f       	adc	r31, r29
     998:	ae 17       	cp	r26, r30
     99a:	bf 07       	cpc	r27, r31
     99c:	81 f4       	brne	.+32     	; 0x9be <free+0xda>
     99e:	f9 01       	movw	r30, r18
     9a0:	92 91       	ld	r25, -Z
     9a2:	82 91       	ld	r24, -Z
     9a4:	8c 0f       	add	r24, r28
     9a6:	9d 1f       	adc	r25, r29
     9a8:	02 96       	adiw	r24, 0x02	; 2
     9aa:	da 01       	movw	r26, r20
     9ac:	11 96       	adiw	r26, 0x01	; 1
     9ae:	9c 93       	st	X, r25
     9b0:	8e 93       	st	-X, r24
     9b2:	82 81       	ldd	r24, Z+2	; 0x02
     9b4:	93 81       	ldd	r25, Z+3	; 0x03
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	12 97       	sbiw	r26, 0x02	; 2
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <free+0xe4>
     9c4:	fb 01       	movw	r30, r22
     9c6:	bc 01       	movw	r22, r24
     9c8:	db 01       	movw	r26, r22
     9ca:	12 96       	adiw	r26, 0x02	; 2
     9cc:	8d 91       	ld	r24, X+
     9ce:	9c 91       	ld	r25, X
     9d0:	13 97       	sbiw	r26, 0x03	; 3
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	b9 f7       	brne	.-18     	; 0x9c4 <free+0xe0>
     9d6:	cb 01       	movw	r24, r22
     9d8:	02 96       	adiw	r24, 0x02	; 2
     9da:	2d 91       	ld	r18, X+
     9dc:	3c 91       	ld	r19, X
     9de:	11 97       	sbiw	r26, 0x01	; 1
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	20 91 9d 04 	lds	r18, 0x049D
     9e8:	30 91 9e 04 	lds	r19, 0x049E
     9ec:	28 17       	cp	r18, r24
     9ee:	39 07       	cpc	r19, r25
     9f0:	69 f4       	brne	.+26     	; 0xa0c <free+0x128>
     9f2:	30 97       	sbiw	r30, 0x00	; 0
     9f4:	29 f4       	brne	.+10     	; 0xa00 <free+0x11c>
     9f6:	10 92 a0 04 	sts	0x04A0, r1
     9fa:	10 92 9f 04 	sts	0x049F, r1
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <free+0x120>
     a00:	13 82       	std	Z+3, r1	; 0x03
     a02:	12 82       	std	Z+2, r1	; 0x02
     a04:	70 93 9e 04 	sts	0x049E, r23
     a08:	60 93 9d 04 	sts	0x049D, r22
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <atoi>:
     a16:	fc 01       	movw	r30, r24
     a18:	88 27       	eor	r24, r24
     a1a:	99 27       	eor	r25, r25
     a1c:	e8 94       	clt
     a1e:	21 91       	ld	r18, Z+
     a20:	20 32       	cpi	r18, 0x20	; 32
     a22:	e9 f3       	breq	.-6      	; 0xa1e <atoi+0x8>
     a24:	29 30       	cpi	r18, 0x09	; 9
     a26:	10 f0       	brcs	.+4      	; 0xa2c <atoi+0x16>
     a28:	2e 30       	cpi	r18, 0x0E	; 14
     a2a:	c8 f3       	brcs	.-14     	; 0xa1e <atoi+0x8>
     a2c:	2b 32       	cpi	r18, 0x2B	; 43
     a2e:	41 f0       	breq	.+16     	; 0xa40 <atoi+0x2a>
     a30:	2d 32       	cpi	r18, 0x2D	; 45
     a32:	39 f4       	brne	.+14     	; 0xa42 <atoi+0x2c>
     a34:	68 94       	set
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <atoi+0x2a>
     a38:	0e 94 5e 05 	call	0xabc	; 0xabc <__mulhi_const_10>
     a3c:	82 0f       	add	r24, r18
     a3e:	91 1d       	adc	r25, r1
     a40:	21 91       	ld	r18, Z+
     a42:	20 53       	subi	r18, 0x30	; 48
     a44:	2a 30       	cpi	r18, 0x0A	; 10
     a46:	c0 f3       	brcs	.-16     	; 0xa38 <atoi+0x22>
     a48:	1e f4       	brtc	.+6      	; 0xa50 <atoi+0x3a>
     a4a:	90 95       	com	r25
     a4c:	81 95       	neg	r24
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	08 95       	ret

00000a52 <strtok>:
     a52:	42 e9       	ldi	r20, 0x92	; 146
     a54:	52 e0       	ldi	r21, 0x02	; 2
     a56:	0e 94 37 05 	call	0xa6e	; 0xa6e <strtok_r>
     a5a:	08 95       	ret

00000a5c <strcmp>:
     a5c:	fb 01       	movw	r30, r22
     a5e:	dc 01       	movw	r26, r24
     a60:	8d 91       	ld	r24, X+
     a62:	01 90       	ld	r0, Z+
     a64:	80 19       	sub	r24, r0
     a66:	01 10       	cpse	r0, r1
     a68:	d9 f3       	breq	.-10     	; 0xa60 <strcmp+0x4>
     a6a:	99 0b       	sbc	r25, r25
     a6c:	08 95       	ret

00000a6e <strtok_r>:
     a6e:	fa 01       	movw	r30, r20
     a70:	a1 91       	ld	r26, Z+
     a72:	b0 81       	ld	r27, Z
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	19 f4       	brne	.+6      	; 0xa7e <strtok_r+0x10>
     a78:	10 97       	sbiw	r26, 0x00	; 0
     a7a:	e1 f0       	breq	.+56     	; 0xab4 <strtok_r+0x46>
     a7c:	cd 01       	movw	r24, r26
     a7e:	dc 01       	movw	r26, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0d 90       	ld	r0, X+
     a84:	00 20       	and	r0, r0
     a86:	11 f4       	brne	.+4      	; 0xa8c <strtok_r+0x1e>
     a88:	c0 01       	movw	r24, r0
     a8a:	13 c0       	rjmp	.+38     	; 0xab2 <strtok_r+0x44>
     a8c:	fb 01       	movw	r30, r22
     a8e:	21 91       	ld	r18, Z+
     a90:	22 23       	and	r18, r18
     a92:	19 f0       	breq	.+6      	; 0xa9a <strtok_r+0x2c>
     a94:	20 15       	cp	r18, r0
     a96:	d9 f7       	brne	.-10     	; 0xa8e <strtok_r+0x20>
     a98:	f3 cf       	rjmp	.-26     	; 0xa80 <strtok_r+0x12>
     a9a:	fb 01       	movw	r30, r22
     a9c:	21 91       	ld	r18, Z+
     a9e:	20 15       	cp	r18, r0
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <strtok_r+0x3a>
     aa2:	1e 92       	st	-X, r1
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <strtok_r+0x46>
     aa8:	22 23       	and	r18, r18
     aaa:	c1 f7       	brne	.-16     	; 0xa9c <strtok_r+0x2e>
     aac:	0d 90       	ld	r0, X+
     aae:	00 20       	and	r0, r0
     ab0:	a1 f7       	brne	.-24     	; 0xa9a <strtok_r+0x2c>
     ab2:	d0 01       	movw	r26, r0
     ab4:	fa 01       	movw	r30, r20
     ab6:	a1 93       	st	Z+, r26
     ab8:	b0 83       	st	Z, r27
     aba:	08 95       	ret

00000abc <__mulhi_const_10>:
     abc:	7a e0       	ldi	r23, 0x0A	; 10
     abe:	97 9f       	mul	r25, r23
     ac0:	90 2d       	mov	r25, r0
     ac2:	87 9f       	mul	r24, r23
     ac4:	80 2d       	mov	r24, r0
     ac6:	91 0d       	add	r25, r1
     ac8:	11 24       	eor	r1, r1
     aca:	08 95       	ret

00000acc <fgets>:
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	8c 01       	movw	r16, r24
     ade:	6a 01       	movw	r12, r20
     ae0:	fa 01       	movw	r30, r20
     ae2:	83 81       	ldd	r24, Z+3	; 0x03
     ae4:	80 ff       	sbrs	r24, 0
     ae6:	1a c0       	rjmp	.+52     	; 0xb1c <fgets+0x50>
     ae8:	16 16       	cp	r1, r22
     aea:	17 06       	cpc	r1, r23
     aec:	bc f4       	brge	.+46     	; 0xb1c <fgets+0x50>
     aee:	7b 01       	movw	r14, r22
     af0:	e8 01       	movw	r28, r16
     af2:	0e c0       	rjmp	.+28     	; 0xb10 <fgets+0x44>
     af4:	c6 01       	movw	r24, r12
     af6:	0e 94 fe 07 	call	0xffc	; 0xffc <fgetc>
     afa:	ff ef       	ldi	r31, 0xFF	; 255
     afc:	8f 3f       	cpi	r24, 0xFF	; 255
     afe:	9f 07       	cpc	r25, r31
     b00:	69 f0       	breq	.+26     	; 0xb1c <fgets+0x50>
     b02:	89 93       	st	Y+, r24
     b04:	08 94       	sec
     b06:	e1 08       	sbc	r14, r1
     b08:	f1 08       	sbc	r15, r1
     b0a:	8a 30       	cpi	r24, 0x0A	; 10
     b0c:	91 05       	cpc	r25, r1
     b0e:	21 f0       	breq	.+8      	; 0xb18 <fgets+0x4c>
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	e2 16       	cp	r14, r18
     b14:	f1 04       	cpc	r15, r1
     b16:	71 f7       	brne	.-36     	; 0xaf4 <fgets+0x28>
     b18:	18 82       	st	Y, r1
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <fgets+0x54>
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	c8 01       	movw	r24, r16
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	08 95       	ret

00000b34 <printf>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	fe 01       	movw	r30, r28
     b3e:	36 96       	adiw	r30, 0x06	; 6
     b40:	61 91       	ld	r22, Z+
     b42:	71 91       	ld	r23, Z+
     b44:	80 91 a3 04 	lds	r24, 0x04A3
     b48:	90 91 a4 04 	lds	r25, 0x04A4
     b4c:	af 01       	movw	r20, r30
     b4e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vfprintf>
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <putchar>:
     b58:	60 91 a3 04 	lds	r22, 0x04A3
     b5c:	70 91 a4 04 	lds	r23, 0x04A4
     b60:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     b64:	08 95       	ret

00000b66 <puts>:
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	8c 01       	movw	r16, r24
     b70:	e0 91 a3 04 	lds	r30, 0x04A3
     b74:	f0 91 a4 04 	lds	r31, 0x04A4
     b78:	83 81       	ldd	r24, Z+3	; 0x03
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	1a c0       	rjmp	.+52     	; 0xbb2 <puts+0x4c>
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d0 e0       	ldi	r29, 0x00	; 0
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <puts+0x28>
     b84:	19 95       	eicall
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	11 f0       	breq	.+4      	; 0xb8e <puts+0x28>
     b8a:	cf ef       	ldi	r28, 0xFF	; 255
     b8c:	df ef       	ldi	r29, 0xFF	; 255
     b8e:	f8 01       	movw	r30, r16
     b90:	81 91       	ld	r24, Z+
     b92:	8f 01       	movw	r16, r30
     b94:	60 91 a3 04 	lds	r22, 0x04A3
     b98:	70 91 a4 04 	lds	r23, 0x04A4
     b9c:	db 01       	movw	r26, r22
     b9e:	18 96       	adiw	r26, 0x08	; 8
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	19 97       	sbiw	r26, 0x09	; 9
     ba6:	88 23       	and	r24, r24
     ba8:	69 f7       	brne	.-38     	; 0xb84 <puts+0x1e>
     baa:	8a e0       	ldi	r24, 0x0A	; 10
     bac:	19 95       	eicall
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <puts+0x50>
     bb2:	cf ef       	ldi	r28, 0xFF	; 255
     bb4:	df ef       	ldi	r29, 0xFF	; 255
     bb6:	ce 01       	movw	r24, r28
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <vfprintf>:
     bc2:	2f 92       	push	r2
     bc4:	3f 92       	push	r3
     bc6:	4f 92       	push	r4
     bc8:	5f 92       	push	r5
     bca:	6f 92       	push	r6
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	2d 97       	sbiw	r28, 0x0d	; 13
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	3c 01       	movw	r6, r24
     bf8:	7d 87       	std	Y+13, r23	; 0x0d
     bfa:	6c 87       	std	Y+12, r22	; 0x0c
     bfc:	5a 01       	movw	r10, r20
     bfe:	fc 01       	movw	r30, r24
     c00:	17 82       	std	Z+7, r1	; 0x07
     c02:	16 82       	std	Z+6, r1	; 0x06
     c04:	83 81       	ldd	r24, Z+3	; 0x03
     c06:	81 ff       	sbrs	r24, 1
     c08:	c8 c1       	rjmp	.+912    	; 0xf9a <vfprintf+0x3d8>
     c0a:	2e 01       	movw	r4, r28
     c0c:	08 94       	sec
     c0e:	41 1c       	adc	r4, r1
     c10:	51 1c       	adc	r5, r1
     c12:	f3 01       	movw	r30, r6
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	ec 85       	ldd	r30, Y+12	; 0x0c
     c18:	fd 85       	ldd	r31, Y+13	; 0x0d
     c1a:	93 fd       	sbrc	r25, 3
     c1c:	85 91       	lpm	r24, Z+
     c1e:	93 ff       	sbrs	r25, 3
     c20:	81 91       	ld	r24, Z+
     c22:	fd 87       	std	Y+13, r31	; 0x0d
     c24:	ec 87       	std	Y+12, r30	; 0x0c
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <vfprintf+0x6a>
     c2a:	b3 c1       	rjmp	.+870    	; 0xf92 <vfprintf+0x3d0>
     c2c:	85 32       	cpi	r24, 0x25	; 37
     c2e:	41 f4       	brne	.+16     	; 0xc40 <vfprintf+0x7e>
     c30:	93 fd       	sbrc	r25, 3
     c32:	85 91       	lpm	r24, Z+
     c34:	93 ff       	sbrs	r25, 3
     c36:	81 91       	ld	r24, Z+
     c38:	fd 87       	std	Y+13, r31	; 0x0d
     c3a:	ec 87       	std	Y+12, r30	; 0x0c
     c3c:	85 32       	cpi	r24, 0x25	; 37
     c3e:	29 f4       	brne	.+10     	; 0xc4a <vfprintf+0x88>
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	b3 01       	movw	r22, r6
     c44:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     c48:	e4 cf       	rjmp	.-56     	; 0xc12 <vfprintf+0x50>
     c4a:	ff 24       	eor	r15, r15
     c4c:	ee 24       	eor	r14, r14
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	10 32       	cpi	r17, 0x20	; 32
     c52:	b0 f4       	brcc	.+44     	; 0xc80 <vfprintf+0xbe>
     c54:	8b 32       	cpi	r24, 0x2B	; 43
     c56:	69 f0       	breq	.+26     	; 0xc72 <vfprintf+0xb0>
     c58:	8c 32       	cpi	r24, 0x2C	; 44
     c5a:	28 f4       	brcc	.+10     	; 0xc66 <vfprintf+0xa4>
     c5c:	80 32       	cpi	r24, 0x20	; 32
     c5e:	51 f0       	breq	.+20     	; 0xc74 <vfprintf+0xb2>
     c60:	83 32       	cpi	r24, 0x23	; 35
     c62:	71 f4       	brne	.+28     	; 0xc80 <vfprintf+0xbe>
     c64:	0b c0       	rjmp	.+22     	; 0xc7c <vfprintf+0xba>
     c66:	8d 32       	cpi	r24, 0x2D	; 45
     c68:	39 f0       	breq	.+14     	; 0xc78 <vfprintf+0xb6>
     c6a:	80 33       	cpi	r24, 0x30	; 48
     c6c:	49 f4       	brne	.+18     	; 0xc80 <vfprintf+0xbe>
     c6e:	11 60       	ori	r17, 0x01	; 1
     c70:	2c c0       	rjmp	.+88     	; 0xcca <vfprintf+0x108>
     c72:	12 60       	ori	r17, 0x02	; 2
     c74:	14 60       	ori	r17, 0x04	; 4
     c76:	29 c0       	rjmp	.+82     	; 0xcca <vfprintf+0x108>
     c78:	18 60       	ori	r17, 0x08	; 8
     c7a:	27 c0       	rjmp	.+78     	; 0xcca <vfprintf+0x108>
     c7c:	10 61       	ori	r17, 0x10	; 16
     c7e:	25 c0       	rjmp	.+74     	; 0xcca <vfprintf+0x108>
     c80:	17 fd       	sbrc	r17, 7
     c82:	2e c0       	rjmp	.+92     	; 0xce0 <vfprintf+0x11e>
     c84:	28 2f       	mov	r18, r24
     c86:	20 53       	subi	r18, 0x30	; 48
     c88:	2a 30       	cpi	r18, 0x0A	; 10
     c8a:	98 f4       	brcc	.+38     	; 0xcb2 <vfprintf+0xf0>
     c8c:	16 ff       	sbrs	r17, 6
     c8e:	08 c0       	rjmp	.+16     	; 0xca0 <vfprintf+0xde>
     c90:	8f 2d       	mov	r24, r15
     c92:	88 0f       	add	r24, r24
     c94:	f8 2e       	mov	r15, r24
     c96:	ff 0c       	add	r15, r15
     c98:	ff 0c       	add	r15, r15
     c9a:	f8 0e       	add	r15, r24
     c9c:	f2 0e       	add	r15, r18
     c9e:	15 c0       	rjmp	.+42     	; 0xcca <vfprintf+0x108>
     ca0:	8e 2d       	mov	r24, r14
     ca2:	88 0f       	add	r24, r24
     ca4:	e8 2e       	mov	r14, r24
     ca6:	ee 0c       	add	r14, r14
     ca8:	ee 0c       	add	r14, r14
     caa:	e8 0e       	add	r14, r24
     cac:	e2 0e       	add	r14, r18
     cae:	10 62       	ori	r17, 0x20	; 32
     cb0:	0c c0       	rjmp	.+24     	; 0xcca <vfprintf+0x108>
     cb2:	8e 32       	cpi	r24, 0x2E	; 46
     cb4:	21 f4       	brne	.+8      	; 0xcbe <vfprintf+0xfc>
     cb6:	16 fd       	sbrc	r17, 6
     cb8:	6c c1       	rjmp	.+728    	; 0xf92 <vfprintf+0x3d0>
     cba:	10 64       	ori	r17, 0x40	; 64
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x108>
     cbe:	8c 36       	cpi	r24, 0x6C	; 108
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <vfprintf+0x104>
     cc2:	10 68       	ori	r17, 0x80	; 128
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x108>
     cc6:	88 36       	cpi	r24, 0x68	; 104
     cc8:	59 f4       	brne	.+22     	; 0xce0 <vfprintf+0x11e>
     cca:	ec 85       	ldd	r30, Y+12	; 0x0c
     ccc:	fd 85       	ldd	r31, Y+13	; 0x0d
     cce:	93 fd       	sbrc	r25, 3
     cd0:	85 91       	lpm	r24, Z+
     cd2:	93 ff       	sbrs	r25, 3
     cd4:	81 91       	ld	r24, Z+
     cd6:	fd 87       	std	Y+13, r31	; 0x0d
     cd8:	ec 87       	std	Y+12, r30	; 0x0c
     cda:	88 23       	and	r24, r24
     cdc:	09 f0       	breq	.+2      	; 0xce0 <vfprintf+0x11e>
     cde:	b8 cf       	rjmp	.-144    	; 0xc50 <vfprintf+0x8e>
     ce0:	98 2f       	mov	r25, r24
     ce2:	95 54       	subi	r25, 0x45	; 69
     ce4:	93 30       	cpi	r25, 0x03	; 3
     ce6:	18 f0       	brcs	.+6      	; 0xcee <vfprintf+0x12c>
     ce8:	90 52       	subi	r25, 0x20	; 32
     cea:	93 30       	cpi	r25, 0x03	; 3
     cec:	38 f4       	brcc	.+14     	; 0xcfc <vfprintf+0x13a>
     cee:	24 e0       	ldi	r18, 0x04	; 4
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	a2 0e       	add	r10, r18
     cf4:	b3 1e       	adc	r11, r19
     cf6:	3f e3       	ldi	r19, 0x3F	; 63
     cf8:	39 83       	std	Y+1, r19	; 0x01
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <vfprintf+0x158>
     cfc:	83 36       	cpi	r24, 0x63	; 99
     cfe:	31 f0       	breq	.+12     	; 0xd0c <vfprintf+0x14a>
     d00:	83 37       	cpi	r24, 0x73	; 115
     d02:	81 f0       	breq	.+32     	; 0xd24 <vfprintf+0x162>
     d04:	83 35       	cpi	r24, 0x53	; 83
     d06:	09 f0       	breq	.+2      	; 0xd0a <vfprintf+0x148>
     d08:	5a c0       	rjmp	.+180    	; 0xdbe <vfprintf+0x1fc>
     d0a:	22 c0       	rjmp	.+68     	; 0xd50 <vfprintf+0x18e>
     d0c:	f5 01       	movw	r30, r10
     d0e:	80 81       	ld	r24, Z
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	22 e0       	ldi	r18, 0x02	; 2
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a2 0e       	add	r10, r18
     d18:	b3 1e       	adc	r11, r19
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	c2 2e       	mov	r12, r18
     d1e:	d1 2c       	mov	r13, r1
     d20:	42 01       	movw	r8, r4
     d22:	14 c0       	rjmp	.+40     	; 0xd4c <vfprintf+0x18a>
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	29 2e       	mov	r2, r25
     d28:	31 2c       	mov	r3, r1
     d2a:	2a 0c       	add	r2, r10
     d2c:	3b 1c       	adc	r3, r11
     d2e:	f5 01       	movw	r30, r10
     d30:	80 80       	ld	r8, Z
     d32:	91 80       	ldd	r9, Z+1	; 0x01
     d34:	16 ff       	sbrs	r17, 6
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <vfprintf+0x17c>
     d38:	6f 2d       	mov	r22, r15
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x180>
     d3e:	6f ef       	ldi	r22, 0xFF	; 255
     d40:	7f ef       	ldi	r23, 0xFF	; 255
     d42:	c4 01       	movw	r24, r8
     d44:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <strnlen>
     d48:	6c 01       	movw	r12, r24
     d4a:	51 01       	movw	r10, r2
     d4c:	1f 77       	andi	r17, 0x7F	; 127
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <vfprintf+0x1b8>
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	28 2e       	mov	r2, r24
     d54:	31 2c       	mov	r3, r1
     d56:	2a 0c       	add	r2, r10
     d58:	3b 1c       	adc	r3, r11
     d5a:	f5 01       	movw	r30, r10
     d5c:	80 80       	ld	r8, Z
     d5e:	91 80       	ldd	r9, Z+1	; 0x01
     d60:	16 ff       	sbrs	r17, 6
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x1a8>
     d64:	6f 2d       	mov	r22, r15
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x1ac>
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	7f ef       	ldi	r23, 0xFF	; 255
     d6e:	c4 01       	movw	r24, r8
     d70:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <strnlen_P>
     d74:	6c 01       	movw	r12, r24
     d76:	10 68       	ori	r17, 0x80	; 128
     d78:	51 01       	movw	r10, r2
     d7a:	13 fd       	sbrc	r17, 3
     d7c:	1c c0       	rjmp	.+56     	; 0xdb6 <vfprintf+0x1f4>
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <vfprintf+0x1ca>
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	b3 01       	movw	r22, r6
     d86:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     d8a:	ea 94       	dec	r14
     d8c:	8e 2d       	mov	r24, r14
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	c8 16       	cp	r12, r24
     d92:	d9 06       	cpc	r13, r25
     d94:	a8 f3       	brcs	.-22     	; 0xd80 <vfprintf+0x1be>
     d96:	0f c0       	rjmp	.+30     	; 0xdb6 <vfprintf+0x1f4>
     d98:	f4 01       	movw	r30, r8
     d9a:	17 fd       	sbrc	r17, 7
     d9c:	85 91       	lpm	r24, Z+
     d9e:	17 ff       	sbrs	r17, 7
     da0:	81 91       	ld	r24, Z+
     da2:	4f 01       	movw	r8, r30
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	b3 01       	movw	r22, r6
     da8:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     dac:	e1 10       	cpse	r14, r1
     dae:	ea 94       	dec	r14
     db0:	08 94       	sec
     db2:	c1 08       	sbc	r12, r1
     db4:	d1 08       	sbc	r13, r1
     db6:	c1 14       	cp	r12, r1
     db8:	d1 04       	cpc	r13, r1
     dba:	71 f7       	brne	.-36     	; 0xd98 <vfprintf+0x1d6>
     dbc:	e7 c0       	rjmp	.+462    	; 0xf8c <vfprintf+0x3ca>
     dbe:	84 36       	cpi	r24, 0x64	; 100
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <vfprintf+0x204>
     dc2:	89 36       	cpi	r24, 0x69	; 105
     dc4:	51 f5       	brne	.+84     	; 0xe1a <vfprintf+0x258>
     dc6:	f5 01       	movw	r30, r10
     dc8:	17 ff       	sbrs	r17, 7
     dca:	07 c0       	rjmp	.+14     	; 0xdda <vfprintf+0x218>
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	24 e0       	ldi	r18, 0x04	; 4
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	08 c0       	rjmp	.+16     	; 0xdea <vfprintf+0x228>
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	aa 27       	eor	r26, r26
     de0:	97 fd       	sbrc	r25, 7
     de2:	a0 95       	com	r26
     de4:	ba 2f       	mov	r27, r26
     de6:	22 e0       	ldi	r18, 0x02	; 2
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	a2 0e       	add	r10, r18
     dec:	b3 1e       	adc	r11, r19
     dee:	01 2f       	mov	r16, r17
     df0:	0f 76       	andi	r16, 0x6F	; 111
     df2:	b7 ff       	sbrs	r27, 7
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <vfprintf+0x244>
     df6:	b0 95       	com	r27
     df8:	a0 95       	com	r26
     dfa:	90 95       	com	r25
     dfc:	81 95       	neg	r24
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	af 4f       	sbci	r26, 0xFF	; 255
     e02:	bf 4f       	sbci	r27, 0xFF	; 255
     e04:	00 68       	ori	r16, 0x80	; 128
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	a2 01       	movw	r20, r4
     e0c:	2a e0       	ldi	r18, 0x0A	; 10
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__ultoa_invert>
     e14:	d8 2e       	mov	r13, r24
     e16:	d4 18       	sub	r13, r4
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <vfprintf+0x2d6>
     e1a:	85 37       	cpi	r24, 0x75	; 117
     e1c:	21 f4       	brne	.+8      	; 0xe26 <vfprintf+0x264>
     e1e:	1f 7e       	andi	r17, 0xEF	; 239
     e20:	2a e0       	ldi	r18, 0x0A	; 10
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	20 c0       	rjmp	.+64     	; 0xe66 <vfprintf+0x2a4>
     e26:	19 7f       	andi	r17, 0xF9	; 249
     e28:	8f 36       	cpi	r24, 0x6F	; 111
     e2a:	a9 f0       	breq	.+42     	; 0xe56 <vfprintf+0x294>
     e2c:	80 37       	cpi	r24, 0x70	; 112
     e2e:	20 f4       	brcc	.+8      	; 0xe38 <vfprintf+0x276>
     e30:	88 35       	cpi	r24, 0x58	; 88
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x274>
     e34:	ae c0       	rjmp	.+348    	; 0xf92 <vfprintf+0x3d0>
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <vfprintf+0x28c>
     e38:	80 37       	cpi	r24, 0x70	; 112
     e3a:	21 f0       	breq	.+8      	; 0xe44 <vfprintf+0x282>
     e3c:	88 37       	cpi	r24, 0x78	; 120
     e3e:	09 f0       	breq	.+2      	; 0xe42 <vfprintf+0x280>
     e40:	a8 c0       	rjmp	.+336    	; 0xf92 <vfprintf+0x3d0>
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vfprintf+0x284>
     e44:	10 61       	ori	r17, 0x10	; 16
     e46:	14 ff       	sbrs	r17, 4
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x29a>
     e4a:	14 60       	ori	r17, 0x04	; 4
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <vfprintf+0x29a>
     e4e:	14 ff       	sbrs	r17, 4
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x2a0>
     e52:	16 60       	ori	r17, 0x06	; 6
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x2a0>
     e56:	28 e0       	ldi	r18, 0x08	; 8
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <vfprintf+0x2a4>
     e5c:	20 e1       	ldi	r18, 0x10	; 16
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x2a4>
     e62:	20 e1       	ldi	r18, 0x10	; 16
     e64:	32 e0       	ldi	r19, 0x02	; 2
     e66:	f5 01       	movw	r30, r10
     e68:	17 ff       	sbrs	r17, 7
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <vfprintf+0x2b8>
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	44 e0       	ldi	r20, 0x04	; 4
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x2c4>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	42 e0       	ldi	r20, 0x02	; 2
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	a4 0e       	add	r10, r20
     e88:	b5 1e       	adc	r11, r21
     e8a:	a2 01       	movw	r20, r4
     e8c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__ultoa_invert>
     e90:	d8 2e       	mov	r13, r24
     e92:	d4 18       	sub	r13, r4
     e94:	01 2f       	mov	r16, r17
     e96:	0f 77       	andi	r16, 0x7F	; 127
     e98:	06 ff       	sbrs	r16, 6
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <vfprintf+0x2ec>
     e9c:	0e 7f       	andi	r16, 0xFE	; 254
     e9e:	df 14       	cp	r13, r15
     ea0:	30 f4       	brcc	.+12     	; 0xeae <vfprintf+0x2ec>
     ea2:	04 ff       	sbrs	r16, 4
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <vfprintf+0x2f0>
     ea6:	02 fd       	sbrc	r16, 2
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <vfprintf+0x2f0>
     eaa:	0f 7e       	andi	r16, 0xEF	; 239
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x2f0>
     eae:	1d 2d       	mov	r17, r13
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <vfprintf+0x2f2>
     eb2:	1f 2d       	mov	r17, r15
     eb4:	80 2f       	mov	r24, r16
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	04 ff       	sbrs	r16, 4
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <vfprintf+0x312>
     ebc:	fe 01       	movw	r30, r28
     ebe:	ed 0d       	add	r30, r13
     ec0:	f1 1d       	adc	r31, r1
     ec2:	20 81       	ld	r18, Z
     ec4:	20 33       	cpi	r18, 0x30	; 48
     ec6:	11 f4       	brne	.+4      	; 0xecc <vfprintf+0x30a>
     ec8:	09 7e       	andi	r16, 0xE9	; 233
     eca:	09 c0       	rjmp	.+18     	; 0xede <vfprintf+0x31c>
     ecc:	02 ff       	sbrs	r16, 2
     ece:	06 c0       	rjmp	.+12     	; 0xedc <vfprintf+0x31a>
     ed0:	1e 5f       	subi	r17, 0xFE	; 254
     ed2:	05 c0       	rjmp	.+10     	; 0xede <vfprintf+0x31c>
     ed4:	86 78       	andi	r24, 0x86	; 134
     ed6:	90 70       	andi	r25, 0x00	; 0
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <vfprintf+0x31c>
     edc:	1f 5f       	subi	r17, 0xFF	; 255
     ede:	80 2e       	mov	r8, r16
     ee0:	99 24       	eor	r9, r9
     ee2:	03 fd       	sbrc	r16, 3
     ee4:	12 c0       	rjmp	.+36     	; 0xf0a <vfprintf+0x348>
     ee6:	00 ff       	sbrs	r16, 0
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <vfprintf+0x342>
     eea:	fd 2c       	mov	r15, r13
     eec:	1e 15       	cp	r17, r14
     eee:	50 f4       	brcc	.+20     	; 0xf04 <vfprintf+0x342>
     ef0:	fe 0c       	add	r15, r14
     ef2:	f1 1a       	sub	r15, r17
     ef4:	1e 2d       	mov	r17, r14
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <vfprintf+0x342>
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	b3 01       	movw	r22, r6
     efe:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f02:	1f 5f       	subi	r17, 0xFF	; 255
     f04:	1e 15       	cp	r17, r14
     f06:	c0 f3       	brcs	.-16     	; 0xef8 <vfprintf+0x336>
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <vfprintf+0x350>
     f0a:	1e 15       	cp	r17, r14
     f0c:	10 f4       	brcc	.+4      	; 0xf12 <vfprintf+0x350>
     f0e:	e1 1a       	sub	r14, r17
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <vfprintf+0x352>
     f12:	ee 24       	eor	r14, r14
     f14:	84 fe       	sbrs	r8, 4
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <vfprintf+0x374>
     f18:	80 e3       	ldi	r24, 0x30	; 48
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	b3 01       	movw	r22, r6
     f1e:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f22:	82 fe       	sbrs	r8, 2
     f24:	1f c0       	rjmp	.+62     	; 0xf64 <vfprintf+0x3a2>
     f26:	81 fe       	sbrs	r8, 1
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x36e>
     f2a:	88 e5       	ldi	r24, 0x58	; 88
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <vfprintf+0x38e>
     f30:	88 e7       	ldi	r24, 0x78	; 120
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <vfprintf+0x38e>
     f36:	c4 01       	movw	r24, r8
     f38:	86 78       	andi	r24, 0x86	; 134
     f3a:	90 70       	andi	r25, 0x00	; 0
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	91 f0       	breq	.+36     	; 0xf64 <vfprintf+0x3a2>
     f40:	81 fc       	sbrc	r8, 1
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x386>
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <vfprintf+0x388>
     f48:	8b e2       	ldi	r24, 0x2B	; 43
     f4a:	07 fd       	sbrc	r16, 7
     f4c:	8d e2       	ldi	r24, 0x2D	; 45
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	b3 01       	movw	r22, r6
     f52:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <vfprintf+0x3a2>
     f58:	80 e3       	ldi	r24, 0x30	; 48
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	b3 01       	movw	r22, r6
     f5e:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f62:	fa 94       	dec	r15
     f64:	df 14       	cp	r13, r15
     f66:	c0 f3       	brcs	.-16     	; 0xf58 <vfprintf+0x396>
     f68:	da 94       	dec	r13
     f6a:	f2 01       	movw	r30, r4
     f6c:	ed 0d       	add	r30, r13
     f6e:	f1 1d       	adc	r31, r1
     f70:	80 81       	ld	r24, Z
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	b3 01       	movw	r22, r6
     f76:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f7a:	dd 20       	and	r13, r13
     f7c:	a9 f7       	brne	.-22     	; 0xf68 <vfprintf+0x3a6>
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <vfprintf+0x3ca>
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	b3 01       	movw	r22, r6
     f86:	0e 94 3e 08 	call	0x107c	; 0x107c <fputc>
     f8a:	ea 94       	dec	r14
     f8c:	ee 20       	and	r14, r14
     f8e:	c1 f7       	brne	.-16     	; 0xf80 <vfprintf+0x3be>
     f90:	40 ce       	rjmp	.-896    	; 0xc12 <vfprintf+0x50>
     f92:	f3 01       	movw	r30, r6
     f94:	86 81       	ldd	r24, Z+6	; 0x06
     f96:	97 81       	ldd	r25, Z+7	; 0x07
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0x3dc>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	2d 96       	adiw	r28, 0x0d	; 13
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	8f 90       	pop	r8
     fc2:	7f 90       	pop	r7
     fc4:	6f 90       	pop	r6
     fc6:	5f 90       	pop	r5
     fc8:	4f 90       	pop	r4
     fca:	3f 90       	pop	r3
     fcc:	2f 90       	pop	r2
     fce:	08 95       	ret

00000fd0 <strnlen_P>:
     fd0:	fc 01       	movw	r30, r24
     fd2:	05 90       	lpm	r0, Z+
     fd4:	61 50       	subi	r22, 0x01	; 1
     fd6:	70 40       	sbci	r23, 0x00	; 0
     fd8:	01 10       	cpse	r0, r1
     fda:	d8 f7       	brcc	.-10     	; 0xfd2 <strnlen_P+0x2>
     fdc:	80 95       	com	r24
     fde:	90 95       	com	r25
     fe0:	8e 0f       	add	r24, r30
     fe2:	9f 1f       	adc	r25, r31
     fe4:	08 95       	ret

00000fe6 <strnlen>:
     fe6:	fc 01       	movw	r30, r24
     fe8:	61 50       	subi	r22, 0x01	; 1
     fea:	70 40       	sbci	r23, 0x00	; 0
     fec:	01 90       	ld	r0, Z+
     fee:	01 10       	cpse	r0, r1
     ff0:	d8 f7       	brcc	.-10     	; 0xfe8 <strnlen+0x2>
     ff2:	80 95       	com	r24
     ff4:	90 95       	com	r25
     ff6:	8e 0f       	add	r24, r30
     ff8:	9f 1f       	adc	r25, r31
     ffa:	08 95       	ret

00000ffc <fgetc>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	ec 01       	movw	r28, r24
    1002:	2b 81       	ldd	r18, Y+3	; 0x03
    1004:	20 ff       	sbrs	r18, 0
    1006:	35 c0       	rjmp	.+106    	; 0x1072 <fgetc+0x76>
    1008:	26 ff       	sbrs	r18, 6
    100a:	09 c0       	rjmp	.+18     	; 0x101e <fgetc+0x22>
    100c:	2f 7b       	andi	r18, 0xBF	; 191
    100e:	2b 83       	std	Y+3, r18	; 0x03
    1010:	8e 81       	ldd	r24, Y+6	; 0x06
    1012:	9f 81       	ldd	r25, Y+7	; 0x07
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9f 83       	std	Y+7, r25	; 0x07
    1018:	8e 83       	std	Y+6, r24	; 0x06
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 c0       	rjmp	.+80     	; 0x106e <fgetc+0x72>
    101e:	22 ff       	sbrs	r18, 2
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <fgetc+0x44>
    1022:	e8 81       	ld	r30, Y
    1024:	f9 81       	ldd	r31, Y+1	; 0x01
    1026:	80 81       	ld	r24, Z
    1028:	99 27       	eor	r25, r25
    102a:	87 fd       	sbrc	r24, 7
    102c:	90 95       	com	r25
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	19 f4       	brne	.+6      	; 0x1038 <fgetc+0x3c>
    1032:	20 62       	ori	r18, 0x20	; 32
    1034:	2b 83       	std	Y+3, r18	; 0x03
    1036:	1d c0       	rjmp	.+58     	; 0x1072 <fgetc+0x76>
    1038:	31 96       	adiw	r30, 0x01	; 1
    103a:	f9 83       	std	Y+1, r31	; 0x01
    103c:	e8 83       	st	Y, r30
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <fgetc+0x66>
    1040:	ea 85       	ldd	r30, Y+10	; 0x0a
    1042:	fb 85       	ldd	r31, Y+11	; 0x0b
    1044:	ce 01       	movw	r24, r28
    1046:	19 95       	eicall
    1048:	97 ff       	sbrs	r25, 7
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <fgetc+0x66>
    104c:	2b 81       	ldd	r18, Y+3	; 0x03
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	93 07       	cpc	r25, r19
    1054:	11 f4       	brne	.+4      	; 0x105a <fgetc+0x5e>
    1056:	80 e1       	ldi	r24, 0x10	; 16
    1058:	01 c0       	rjmp	.+2      	; 0x105c <fgetc+0x60>
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	82 2b       	or	r24, r18
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <fgetc+0x76>
    1062:	2e 81       	ldd	r18, Y+6	; 0x06
    1064:	3f 81       	ldd	r19, Y+7	; 0x07
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	3f 83       	std	Y+7, r19	; 0x07
    106c:	2e 83       	std	Y+6, r18	; 0x06
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <fgetc+0x7a>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <fputc>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	8c 01       	movw	r16, r24
    1086:	eb 01       	movw	r28, r22
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	81 ff       	sbrs	r24, 1
    108c:	1b c0       	rjmp	.+54     	; 0x10c4 <fputc+0x48>
    108e:	82 ff       	sbrs	r24, 2
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <fputc+0x30>
    1092:	2e 81       	ldd	r18, Y+6	; 0x06
    1094:	3f 81       	ldd	r19, Y+7	; 0x07
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	28 17       	cp	r18, r24
    109c:	39 07       	cpc	r19, r25
    109e:	64 f4       	brge	.+24     	; 0x10b8 <fputc+0x3c>
    10a0:	e8 81       	ld	r30, Y
    10a2:	f9 81       	ldd	r31, Y+1	; 0x01
    10a4:	01 93       	st	Z+, r16
    10a6:	f9 83       	std	Y+1, r31	; 0x01
    10a8:	e8 83       	st	Y, r30
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <fputc+0x3c>
    10ac:	e8 85       	ldd	r30, Y+8	; 0x08
    10ae:	f9 85       	ldd	r31, Y+9	; 0x09
    10b0:	80 2f       	mov	r24, r16
    10b2:	19 95       	eicall
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	31 f4       	brne	.+12     	; 0x10c4 <fputc+0x48>
    10b8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ba:	9f 81       	ldd	r25, Y+7	; 0x07
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	9f 83       	std	Y+7, r25	; 0x07
    10c0:	8e 83       	std	Y+6, r24	; 0x06
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <fputc+0x4c>
    10c4:	0f ef       	ldi	r16, 0xFF	; 255
    10c6:	1f ef       	ldi	r17, 0xFF	; 255
    10c8:	c8 01       	movw	r24, r16
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <__ultoa_invert>:
    10d4:	fa 01       	movw	r30, r20
    10d6:	aa 27       	eor	r26, r26
    10d8:	28 30       	cpi	r18, 0x08	; 8
    10da:	51 f1       	breq	.+84     	; 0x1130 <__ultoa_invert+0x5c>
    10dc:	20 31       	cpi	r18, 0x10	; 16
    10de:	81 f1       	breq	.+96     	; 0x1140 <__ultoa_invert+0x6c>
    10e0:	e8 94       	clt
    10e2:	6f 93       	push	r22
    10e4:	6e 7f       	andi	r22, 0xFE	; 254
    10e6:	6e 5f       	subi	r22, 0xFE	; 254
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	af 4f       	sbci	r26, 0xFF	; 255
    10f0:	b1 e0       	ldi	r27, 0x01	; 1
    10f2:	3e d0       	rcall	.+124    	; 0x1170 <__ultoa_invert+0x9c>
    10f4:	b4 e0       	ldi	r27, 0x04	; 4
    10f6:	3c d0       	rcall	.+120    	; 0x1170 <__ultoa_invert+0x9c>
    10f8:	67 0f       	add	r22, r23
    10fa:	78 1f       	adc	r23, r24
    10fc:	89 1f       	adc	r24, r25
    10fe:	9a 1f       	adc	r25, r26
    1100:	a1 1d       	adc	r26, r1
    1102:	68 0f       	add	r22, r24
    1104:	79 1f       	adc	r23, r25
    1106:	8a 1f       	adc	r24, r26
    1108:	91 1d       	adc	r25, r1
    110a:	a1 1d       	adc	r26, r1
    110c:	6a 0f       	add	r22, r26
    110e:	71 1d       	adc	r23, r1
    1110:	81 1d       	adc	r24, r1
    1112:	91 1d       	adc	r25, r1
    1114:	a1 1d       	adc	r26, r1
    1116:	20 d0       	rcall	.+64     	; 0x1158 <__ultoa_invert+0x84>
    1118:	09 f4       	brne	.+2      	; 0x111c <__ultoa_invert+0x48>
    111a:	68 94       	set
    111c:	3f 91       	pop	r19
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	26 9f       	mul	r18, r22
    1122:	11 24       	eor	r1, r1
    1124:	30 19       	sub	r19, r0
    1126:	30 5d       	subi	r19, 0xD0	; 208
    1128:	31 93       	st	Z+, r19
    112a:	de f6       	brtc	.-74     	; 0x10e2 <__ultoa_invert+0xe>
    112c:	cf 01       	movw	r24, r30
    112e:	08 95       	ret
    1130:	46 2f       	mov	r20, r22
    1132:	47 70       	andi	r20, 0x07	; 7
    1134:	40 5d       	subi	r20, 0xD0	; 208
    1136:	41 93       	st	Z+, r20
    1138:	b3 e0       	ldi	r27, 0x03	; 3
    113a:	0f d0       	rcall	.+30     	; 0x115a <__ultoa_invert+0x86>
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__ultoa_invert+0x5c>
    113e:	f6 cf       	rjmp	.-20     	; 0x112c <__ultoa_invert+0x58>
    1140:	46 2f       	mov	r20, r22
    1142:	4f 70       	andi	r20, 0x0F	; 15
    1144:	40 5d       	subi	r20, 0xD0	; 208
    1146:	4a 33       	cpi	r20, 0x3A	; 58
    1148:	18 f0       	brcs	.+6      	; 0x1150 <__ultoa_invert+0x7c>
    114a:	49 5d       	subi	r20, 0xD9	; 217
    114c:	31 fd       	sbrc	r19, 1
    114e:	40 52       	subi	r20, 0x20	; 32
    1150:	41 93       	st	Z+, r20
    1152:	02 d0       	rcall	.+4      	; 0x1158 <__ultoa_invert+0x84>
    1154:	a9 f7       	brne	.-22     	; 0x1140 <__ultoa_invert+0x6c>
    1156:	ea cf       	rjmp	.-44     	; 0x112c <__ultoa_invert+0x58>
    1158:	b4 e0       	ldi	r27, 0x04	; 4
    115a:	a6 95       	lsr	r26
    115c:	97 95       	ror	r25
    115e:	87 95       	ror	r24
    1160:	77 95       	ror	r23
    1162:	67 95       	ror	r22
    1164:	ba 95       	dec	r27
    1166:	c9 f7       	brne	.-14     	; 0x115a <__ultoa_invert+0x86>
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	61 05       	cpc	r22, r1
    116c:	71 05       	cpc	r23, r1
    116e:	08 95       	ret
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	0a 2e       	mov	r0, r26
    1176:	06 94       	lsr	r0
    1178:	57 95       	ror	r21
    117a:	47 95       	ror	r20
    117c:	37 95       	ror	r19
    117e:	27 95       	ror	r18
    1180:	ba 95       	dec	r27
    1182:	c9 f7       	brne	.-14     	; 0x1176 <__ultoa_invert+0xa2>
    1184:	62 0f       	add	r22, r18
    1186:	73 1f       	adc	r23, r19
    1188:	84 1f       	adc	r24, r20
    118a:	95 1f       	adc	r25, r21
    118c:	a0 1d       	adc	r26, r0
    118e:	08 95       	ret

00001190 <_exit>:
    1190:	f8 94       	cli

00001192 <__stop_program>:
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <__stop_program>
