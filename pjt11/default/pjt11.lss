
pjt11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  0000159e  00001632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000159e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  008002ae  008002ae  000016e0  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  00002b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000269e  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f1  00000000  00000000  00005496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001564  00000000  00000000  00006787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00007cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000765  00000000  00000000  00008424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019bf  00000000  00000000  00008b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000a548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e9       	ldi	r30, 0x9E	; 158
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 3a       	cpi	r26, 0xAE	; 174
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	ae ea       	ldi	r26, 0xAE	; 174
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ae 3c       	cpi	r26, 0xCE	; 206
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 43 05 	call	0xa86	; 0xa86 <main>
     124:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n%i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:
void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 10 07 	call	0xe20	; 0xe20 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     190:	c2 e0       	ldi	r28, 0x02	; 2
     192:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     194:	86 e4       	ldi	r24, 0x46	; 70
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if(is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	80 e6       	ldi	r24, 0x60	; 96
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:
void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     228:	2a e6       	ldi	r18, 0x6A	; 106
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
		if(fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 c8 04 	lds	r20, 0x04C8
     248:	50 91 c9 04 	lds	r21, 0x04C9
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 6b 07 	call	0xed6	; 0xed6 <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
			break;
		np = get_node();
     25c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <get_node>
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     272:	0e 94 4e 02 	call	0x49c	; 0x49c <insert_node_head>
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     278:	0e 94 63 02 	call	0x4c6	; 0x4c6 <insert_node_tail>
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default :insert_node_ascn(np);
     27e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
		}
	}
	tour_list();
     284:	0e 94 b4 02 	call	0x568	; 0x568 <tour_list>
	free_list();
     288:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     2a4:	10 92 c0 03 	sts	0x03C0, r1
     2a8:	10 92 bf 03 	sts	0x03BF, r1
     2ac:	10 92 be 03 	sts	0x03BE, r1
     2b0:	10 92 bd 03 	sts	0x03BD, r1
     2b4:	10 92 c2 03 	sts	0x03C2, r1
     2b8:	10 92 c1 03 	sts	0x03C1, r1
     2bc:	10 92 bc 02 	sts	0x02BC, r1
     2c0:	10 92 bb 02 	sts	0x02BB, r1
}
     2c4:	08 95       	ret

000002c6 <qi_insert>:
int qi_insert(char ch)
{
     2c6:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     2c8:	20 91 c1 03 	lds	r18, 0x03C1
     2cc:	30 91 c2 03 	lds	r19, 0x03C2
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	c9 01       	movw	r24, r18
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	71 e0       	ldi	r23, 0x01	; 1
     2da:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     2de:	9c 01       	movw	r18, r24
     2e0:	80 91 bb 02 	lds	r24, 0x02BB
     2e4:	90 91 bc 02 	lds	r25, 0x02BC
     2e8:	28 17       	cp	r18, r24
     2ea:	39 07       	cpc	r19, r25
     2ec:	59 f0       	breq	.+22     	; 0x304 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     2ee:	30 93 c2 03 	sts	0x03C2, r19
     2f2:	20 93 c1 03 	sts	0x03C1, r18
	qi[ri] = ch;
     2f6:	2d 53       	subi	r18, 0x3D	; 61
     2f8:	3c 4f       	sbci	r19, 0xFC	; 252
     2fa:	f9 01       	movw	r30, r18
     2fc:	40 83       	st	Z, r20
	return 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     308:	08 95       	ret

0000030a <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     30a:	80 91 bb 02 	lds	r24, 0x02BB
     30e:	90 91 bc 02 	lds	r25, 0x02BC
     312:	20 91 c1 03 	lds	r18, 0x03C1
     316:	30 91 c2 03 	lds	r19, 0x03C2
     31a:	28 17       	cp	r18, r24
     31c:	39 07       	cpc	r19, r25
     31e:	79 f0       	breq	.+30     	; 0x33e <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     32a:	90 93 bc 02 	sts	0x02BC, r25
     32e:	80 93 bb 02 	sts	0x02BB, r24
	return qi[fi];
     332:	8d 53       	subi	r24, 0x3D	; 61
     334:	9c 4f       	sbci	r25, 0xFC	; 252
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     342:	08 95       	ret

00000344 <qo_insert>:
int qo_insert(char ch)
{
     344:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     346:	20 91 bf 03 	lds	r18, 0x03BF
     34a:	30 91 c0 03 	lds	r19, 0x03C0
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	c9 01       	movw	r24, r18
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     35c:	9c 01       	movw	r18, r24
     35e:	80 91 bd 03 	lds	r24, 0x03BD
     362:	90 91 be 03 	lds	r25, 0x03BE
     366:	28 17       	cp	r18, r24
     368:	39 07       	cpc	r19, r25
     36a:	59 f0       	breq	.+22     	; 0x382 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     36c:	30 93 c0 03 	sts	0x03C0, r19
     370:	20 93 bf 03 	sts	0x03BF, r18
	qo[ro] = ch;
     374:	23 54       	subi	r18, 0x43	; 67
     376:	3d 4f       	sbci	r19, 0xFD	; 253
     378:	f9 01       	movw	r30, r18
     37a:	40 83       	st	Z, r20
	return 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     386:	08 95       	ret

00000388 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     388:	80 91 bd 03 	lds	r24, 0x03BD
     38c:	90 91 be 03 	lds	r25, 0x03BE
     390:	20 91 bf 03 	lds	r18, 0x03BF
     394:	30 91 c0 03 	lds	r19, 0x03C0
     398:	28 17       	cp	r18, r24
     39a:	39 07       	cpc	r19, r25
     39c:	79 f0       	breq	.+30     	; 0x3bc <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     3a8:	90 93 be 03 	sts	0x03BE, r25
     3ac:	80 93 bd 03 	sts	0x03BD, r24
	return qo[fo];
     3b0:	83 54       	subi	r24, 0x43	; 67
     3b2:	9d 4f       	sbci	r25, 0xFD	; 253
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     3c0:	08 95       	ret

000003c2 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     3c2:	f8 94       	cli
		ch = qi_delete();
     3c4:	0e 94 85 01 	call	0x30a	; 0x30a <qi_delete>
		sei();
     3c8:	78 94       	sei
	}while(ch == 0);
     3ca:	88 23       	and	r24, r24
     3cc:	d1 f3       	breq	.-12     	; 0x3c2 <uart_getchar>

	if (ch == ETX) return -1;
     3ce:	84 30       	cpi	r24, 0x04	; 4
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <uart_getchar+0x14>
	else		   return ch;
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     3da:	08 95       	ret

000003dc <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     3dc:	cf 93       	push	r28
     3de:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     3e0:	8a 30       	cpi	r24, 0x0A	; 10
     3e2:	19 f4       	brne	.+6      	; 0x3ea <uart_putchar+0xe>
		uart_putchar('\r', stream);
     3e4:	8d e0       	ldi	r24, 0x0D	; 13
     3e6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_putchar>
	cli();
     3ea:	f8 94       	cli
	if(!uart_busy){
     3ec:	80 91 c3 04 	lds	r24, 0x04C3
     3f0:	88 23       	and	r24, r24
     3f2:	59 f4       	brne	.+22     	; 0x40a <uart_putchar+0x2e>
		UDR0 = ch;
     3f4:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 c3 04 	sts	0x04C3, r24
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     400:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     402:	86 ef       	ldi	r24, 0xF6	; 246
     404:	8a 95       	dec	r24
     406:	f1 f7       	brne	.-4      	; 0x404 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     408:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     40a:	8c 2f       	mov	r24, r28
     40c:	0e 94 a2 01 	call	0x344	; 0x344 <qo_insert>
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	b1 f3       	breq	.-20     	; 0x400 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     414:	78 94       	sei
	return 1;
}
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     41e:	8d e6       	ldi	r24, 0x6D	; 109
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	90 93 c9 04 	sts	0x04C9, r25
     426:	80 93 c8 04 	sts	0x04C8, r24
	stdout = &Mystdout;
     42a:	8b e7       	ldi	r24, 0x7B	; 123
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	90 93 cb 04 	sts	0x04CB, r25
     432:	80 93 ca 04 	sts	0x04CA, r24
	uart_busy = 0;
     436:	10 92 c3 04 	sts	0x04C3, r1
	q_init();
     43a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     43e:	10 92 c5 00 	sts	0x00C5, r1
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     448:	e0 ec       	ldi	r30, 0xC0	; 192
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	82 60       	ori	r24, 0x02	; 2
     450:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     452:	e1 ec       	ldi	r30, 0xC1	; 193
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     45c:	80 81       	ld	r24, Z
     45e:	80 64       	ori	r24, 0x40	; 64
     460:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     462:	80 81       	ld	r24, Z
     464:	80 61       	ori	r24, 0x10	; 16
     466:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     468:	80 81       	ld	r24, Z
     46a:	80 68       	ori	r24, 0x80	; 128
     46c:	80 83       	st	Z, r24
}
     46e:	08 95       	ret

00000470 <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     470:	cf 93       	push	r28
     472:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     474:	8a 30       	cpi	r24, 0x0A	; 10
     476:	19 f4       	brne	.+6      	; 0x47e <uart_echo+0xe>
     478:	8d e0       	ldi	r24, 0x0D	; 13
     47a:	0e 94 38 02 	call	0x470	; 0x470 <uart_echo>
	if(!uart_busy){
     47e:	80 91 c3 04 	lds	r24, 0x04C3
     482:	88 23       	and	r24, r24
     484:	31 f4       	brne	.+12     	; 0x492 <uart_echo+0x22>
		UDR0 = ch;
     486:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 c3 04 	sts	0x04C3, r24
     490:	03 c0       	rjmp	.+6      	; 0x498 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     492:	8c 2f       	mov	r24, r28
     494:	0e 94 a2 01 	call	0x344	; 0x344 <qo_insert>
}
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     49c:	fc 01       	movw	r30, r24
	if(!Head){
     49e:	80 91 ae 02 	lds	r24, 0x02AE
     4a2:	90 91 af 02 	lds	r25, 0x02AF
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	39 f4       	brne	.+14     	; 0x4b8 <insert_node_head+0x1c>
		Head = np;
     4aa:	f0 93 af 02 	sts	0x02AF, r31
     4ae:	e0 93 ae 02 	sts	0x02AE, r30
		np->link = NULL;
     4b2:	13 82       	std	Z+3, r1	; 0x03
     4b4:	12 82       	std	Z+2, r1	; 0x02
     4b6:	08 95       	ret
	}else {
		np->link = Head;
     4b8:	93 83       	std	Z+3, r25	; 0x03
     4ba:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     4bc:	f0 93 af 02 	sts	0x02AF, r31
     4c0:	e0 93 ae 02 	sts	0x02AE, r30
     4c4:	08 95       	ret

000004c6 <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     4c6:	e0 91 ae 02 	lds	r30, 0x02AE
     4ca:	f0 91 af 02 	lds	r31, 0x02AF
     4ce:	30 97       	sbiw	r30, 0x00	; 0
     4d0:	31 f4       	brne	.+12     	; 0x4de <insert_node_tail+0x18>
		Head = np;
     4d2:	90 93 af 02 	sts	0x02AF, r25
     4d6:	80 93 ae 02 	sts	0x02AE, r24
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     4dc:	f9 01       	movw	r30, r18
     4de:	22 81       	ldd	r18, Z+2	; 0x02
     4e0:	33 81       	ldd	r19, Z+3	; 0x03
     4e2:	21 15       	cp	r18, r1
     4e4:	31 05       	cpc	r19, r1
     4e6:	d1 f7       	brne	.-12     	; 0x4dc <insert_node_tail+0x16>
			;
		cp->link = np;
     4e8:	93 83       	std	Z+3, r25	; 0x03
     4ea:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     4ec:	fc 01       	movw	r30, r24
     4ee:	13 82       	std	Z+3, r1	; 0x03
     4f0:	12 82       	std	Z+2, r1	; 0x02
}
     4f2:	08 95       	ret

000004f4 <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     4fa:	20 91 ae 02 	lds	r18, 0x02AE
     4fe:	30 91 af 02 	lds	r19, 0x02AF
     502:	21 15       	cp	r18, r1
     504:	31 05       	cpc	r19, r1
     506:	31 f0       	breq	.+12     	; 0x514 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     508:	40 81       	ld	r20, Z
     50a:	51 81       	ldd	r21, Z+1	; 0x01
     50c:	d9 01       	movw	r26, r18
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	0f c0       	rjmp	.+30     	; 0x532 <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     514:	90 93 af 02 	sts	0x02AF, r25
     518:	80 93 ae 02 	sts	0x02AE, r24
		np->link = NULL;
     51c:	13 82       	std	Z+3, r1	; 0x03
     51e:	12 82       	std	Z+2, r1	; 0x02
     520:	1d c0       	rjmp	.+58     	; 0x55c <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     522:	12 96       	adiw	r26, 0x02	; 2
     524:	8d 91       	ld	r24, X+
     526:	9c 91       	ld	r25, X
     528:	13 97       	sbiw	r26, 0x03	; 3
     52a:	ed 01       	movw	r28, r26
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	39 f0       	breq	.+14     	; 0x53e <insert_node_ascn+0x4a>
     530:	dc 01       	movw	r26, r24
     532:	8d 91       	ld	r24, X+
     534:	9c 91       	ld	r25, X
     536:	11 97       	sbiw	r26, 0x01	; 1
     538:	84 17       	cp	r24, r20
     53a:	95 07       	cpc	r25, r21
     53c:	94 f3       	brlt	.-28     	; 0x522 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     53e:	20 97       	sbiw	r28, 0x00	; 0
     540:	39 f4       	brne	.+14     	; 0x550 <insert_node_ascn+0x5c>
			np->link = Head;
     542:	33 83       	std	Z+3, r19	; 0x03
     544:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     546:	f0 93 af 02 	sts	0x02AF, r31
     54a:	e0 93 ae 02 	sts	0x02AE, r30
     54e:	06 c0       	rjmp	.+12     	; 0x55c <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	9b 81       	ldd	r25, Y+3	; 0x03
     554:	93 83       	std	Z+3, r25	; 0x03
     556:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     558:	fb 83       	std	Y+3, r31	; 0x03
     55a:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <free_node>:
void free_node(NODE *np)
{
	free(np);
     562:	0e 94 77 06 	call	0xcee	; 0xcee <free>
}
     566:	08 95       	ret

00000568 <tour_list>:
void tour_list()
{
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     570:	8a e0       	ldi	r24, 0x0A	; 10
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 b1 07 	call	0xf62	; 0xf62 <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     578:	c0 91 ae 02 	lds	r28, 0x02AE
     57c:	d0 91 af 02 	lds	r29, 0x02AF
		printf("-->%c ", cp->data);
     580:	09 e8       	ldi	r16, 0x89	; 137
     582:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     584:	13 c0       	rjmp	.+38     	; 0x5ac <tour_list+0x44>
		printf("-->%c ", cp->data);
     586:	00 d0       	rcall	.+0      	; 0x588 <tour_list+0x20>
     588:	0f 92       	push	r0
     58a:	ed b7       	in	r30, 0x3d	; 61
     58c:	fe b7       	in	r31, 0x3e	; 62
     58e:	12 83       	std	Z+2, r17	; 0x02
     590:	01 83       	std	Z+1, r16	; 0x01
     592:	88 81       	ld	r24, Y
     594:	99 81       	ldd	r25, Y+1	; 0x01
     596:	94 83       	std	Z+4, r25	; 0x04
     598:	83 83       	std	Z+3, r24	; 0x03
     59a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     59e:	0a 80       	ldd	r0, Y+2	; 0x02
     5a0:	db 81       	ldd	r29, Y+3	; 0x03
     5a2:	c0 2d       	mov	r28, r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	20 97       	sbiw	r28, 0x00	; 0
     5ae:	59 f7       	brne	.-42     	; 0x586 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 b1 07 	call	0xf62	; 0xf62 <putchar>
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     5c4:	fc 01       	movw	r30, r24
     5c6:	22 81       	ldd	r18, Z+2	; 0x02
     5c8:	33 81       	ldd	r19, Z+3	; 0x03
     5ca:	30 93 af 02 	sts	0x02AF, r19
     5ce:	20 93 ae 02 	sts	0x02AE, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     5d2:	0e 94 77 06 	call	0xcee	; 0xcee <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     5d6:	80 91 ae 02 	lds	r24, 0x02AE
     5da:	90 91 af 02 	lds	r25, 0x02AF
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	89 f7       	brne	.-30     	; 0x5c4 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     5e2:	08 95       	ret

000005e4 <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
	return cp;
}
     5ec:	08 95       	ret

000005ee <__vector_15>:
#include"time.h"
#include"led.h"
#define ETX 0x04
extern char volatile uart_busy;
ISR(TIMER2_OVF_vect)
{
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	0b b6       	in	r0, 0x3b	; 59
     5f8:	0f 92       	push	r0
     5fa:	11 24       	eor	r1, r1
     5fc:	2f 93       	push	r18
     5fe:	3f 93       	push	r19
     600:	4f 93       	push	r20
     602:	5f 93       	push	r21
     604:	6f 93       	push	r22
     606:	7f 93       	push	r23
     608:	8f 93       	push	r24
     60a:	9f 93       	push	r25
     60c:	af 93       	push	r26
     60e:	bf 93       	push	r27
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
	static int tag=0;
	static int counter=0;
	
	if(++counter!=4)
     614:	80 91 b0 02 	lds	r24, 0x02B0
     618:	90 91 b1 02 	lds	r25, 0x02B1
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	90 93 b1 02 	sts	0x02B1, r25
     622:	80 93 b0 02 	sts	0x02B0, r24
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	91 05       	cpc	r25, r1
     62a:	89 f5       	brne	.+98     	; 0x68e <__vector_15+0xa0>
		return;
	else {
		counter=0;
     62c:	10 92 b1 02 	sts	0x02B1, r1
     630:	10 92 b0 02 	sts	0x02B0, r1
		Tcount++;
     634:	80 91 b9 02 	lds	r24, 0x02B9
     638:	90 91 ba 02 	lds	r25, 0x02BA
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	90 93 ba 02 	sts	0x02BA, r25
     642:	80 93 b9 02 	sts	0x02B9, r24
		qi_insert('t');
     646:	84 e7       	ldi	r24, 0x74	; 116
     648:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
		qi_insert('i');
     64c:	89 e6       	ldi	r24, 0x69	; 105
     64e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
		qi_insert('m');
     652:	8d e6       	ldi	r24, 0x6D	; 109
     654:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
		qi_insert('e');
     658:	85 e6       	ldi	r24, 0x65	; 101
     65a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
		qi_insert('\n');
     65e:	8a e0       	ldi	r24, 0x0A	; 10
     660:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
	}
	if(!tag){
     664:	80 91 b2 02 	lds	r24, 0x02B2
     668:	90 91 b3 02 	lds	r25, 0x02B3
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	49 f4       	brne	.+18     	; 0x682 <__vector_15+0x94>
		led_on_all();
     670:	0e 94 14 05 	call	0xa28	; 0xa28 <led_on_all>
		tag=1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	90 93 b3 02 	sts	0x02B3, r25
     67c:	80 93 b2 02 	sts	0x02B2, r24
     680:	06 c0       	rjmp	.+12     	; 0x68e <__vector_15+0xa0>
	}else{
		led_off_all();
     682:	0e 94 19 05 	call	0xa32	; 0xa32 <led_off_all>
		tag=0;
     686:	10 92 b3 02 	sts	0x02B3, r1
     68a:	10 92 b2 02 	sts	0x02B2, r1
	}
}
     68e:	ff 91       	pop	r31
     690:	ef 91       	pop	r30
     692:	bf 91       	pop	r27
     694:	af 91       	pop	r26
     696:	9f 91       	pop	r25
     698:	8f 91       	pop	r24
     69a:	7f 91       	pop	r23
     69c:	6f 91       	pop	r22
     69e:	5f 91       	pop	r21
     6a0:	4f 91       	pop	r20
     6a2:	3f 91       	pop	r19
     6a4:	2f 91       	pop	r18
     6a6:	0f 90       	pop	r0
     6a8:	0b be       	out	0x3b, r0	; 59
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_27>:
ISR(USART0_TX_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     6da:	0e 94 c4 01 	call	0x388	; 0x388 <qo_delete>
     6de:	88 23       	and	r24, r24
     6e0:	19 f4       	brne	.+6      	; 0x6e8 <__vector_27+0x34>
		uart_busy = 0;
     6e2:	10 92 c3 04 	sts	0x04C3, r1
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <__vector_27+0x38>
	else
		UDR0 = ch;
     6e8:	80 93 c6 00 	sts	0x00C6, r24
}
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	bf 91       	pop	r27
     6f2:	af 91       	pop	r26
     6f4:	9f 91       	pop	r25
     6f6:	8f 91       	pop	r24
     6f8:	7f 91       	pop	r23
     6fa:	6f 91       	pop	r22
     6fc:	5f 91       	pop	r21
     6fe:	4f 91       	pop	r20
     700:	3f 91       	pop	r19
     702:	2f 91       	pop	r18
     704:	0f 90       	pop	r0
     706:	0b be       	out	0x3b, r0	; 59
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_25>:
ISR(USART0_RX_vect)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	0b b6       	in	r0, 0x3b	; 59
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	cf 93       	push	r28
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     73a:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != ETX) {
     73e:	c4 30       	cpi	r28, 0x04	; 4
     740:	31 f0       	breq	.+12     	; 0x74e <__vector_25+0x3c>
		if(ch == '\r')
     742:	cd 30       	cpi	r28, 0x0D	; 13
     744:	09 f4       	brne	.+2      	; 0x748 <__vector_25+0x36>
			ch = '\n';
     746:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 38 02 	call	0x470	; 0x470 <uart_echo>
	}
	qi_insert(ch);
     74e:	8c 2f       	mov	r24, r28
     750:	0e 94 63 01 	call	0x2c6	; 0x2c6 <qi_insert>
}
     754:	ff 91       	pop	r31
     756:	ef 91       	pop	r30
     758:	cf 91       	pop	r28
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0b be       	out	0x3b, r0	; 59
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <get_timer>:
struct timer *Thead=NULL;
struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     77c:	8e e0       	ldi	r24, 0x0E	; 14
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
	return(tp);
}
     784:	08 95       	ret

00000786 <insert_timer>:
void insert_timer(struct task *tskp, int ms)
{
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	f8 2e       	mov	r15, r24
     794:	e9 2e       	mov	r14, r25
     796:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     798:	0e 94 be 03 	call	0x77c	; 0x77c <get_timer>
     79c:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     79e:	dc 01       	movw	r26, r24
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	ef 2d       	mov	r30, r15
     7a4:	fe 2d       	mov	r31, r14
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <insert_timer+0x22>
	tp->time = ms;
     7b0:	19 83       	std	Y+1, r17	; 0x01
     7b2:	08 83       	st	Y, r16
	if(Thead == NULL){
     7b4:	e0 91 b4 02 	lds	r30, 0x02B4
     7b8:	f0 91 b5 02 	lds	r31, 0x02B5
     7bc:	30 97       	sbiw	r30, 0x00	; 0
     7be:	29 f4       	brne	.+10     	; 0x7ca <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     7c0:	d0 93 b5 02 	sts	0x02B5, r29
     7c4:	c0 93 b4 02 	sts	0x02B4, r28
     7c8:	2f c0       	rjmp	.+94     	; 0x828 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;
	if(Thead == NULL){
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     7d4:	fd 01       	movw	r30, r26
		total += cp->time;
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	28 0f       	add	r18, r24
     7dc:	39 1f       	adc	r19, r25
		if(total >=ms)
     7de:	20 17       	cp	r18, r16
     7e0:	31 07       	cpc	r19, r17
     7e2:	34 f4       	brge	.+12     	; 0x7f0 <insert_timer+0x6a>
	if(Thead == NULL){
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     7e4:	a4 85       	ldd	r26, Z+12	; 0x0c
     7e6:	b5 85       	ldd	r27, Z+13	; 0x0d
     7e8:	af 01       	movw	r20, r30
     7ea:	10 97       	sbiw	r26, 0x00	; 0
     7ec:	99 f7       	brne	.-26     	; 0x7d4 <insert_timer+0x4e>
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <insert_timer+0x6c>
		total += cp->time;
		if(total >=ms)
     7f0:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp ==NULL){
     7f2:	41 15       	cp	r20, r1
     7f4:	51 05       	cpc	r21, r1
     7f6:	79 f4       	brne	.+30     	; 0x816 <insert_timer+0x90>
		cp->time -= tp->time;
     7f8:	8d 91       	ld	r24, X+
     7fa:	9c 91       	ld	r25, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	80 1b       	sub	r24, r16
     800:	91 0b       	sbc	r25, r17
     802:	11 96       	adiw	r26, 0x01	; 1
     804:	9c 93       	st	X, r25
     806:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     808:	bd 87       	std	Y+13, r27	; 0x0d
     80a:	ac 87       	std	Y+12, r26	; 0x0c
     80c:	d0 93 b5 02 	sts	0x02B5, r29
     810:	c0 93 b4 02 	sts	0x02B4, r28
     814:	24 c0       	rjmp	.+72     	; 0x85e <insert_timer+0xd8>
	}
	else if(cp==NULL){
     816:	10 97       	sbiw	r26, 0x00	; 0
     818:	51 f4       	brne	.+20     	; 0x82e <insert_timer+0xa8>
		tp->time -= total;
     81a:	02 1b       	sub	r16, r18
     81c:	13 0b       	sbc	r17, r19
     81e:	19 83       	std	Y+1, r17	; 0x01
     820:	08 83       	st	Y, r16
		pp->link = tp;
     822:	fa 01       	movw	r30, r20
     824:	d5 87       	std	Z+13, r29	; 0x0d
     826:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     828:	1d 86       	std	Y+13, r1	; 0x0d
     82a:	1c 86       	std	Y+12, r1	; 0x0c
     82c:	18 c0       	rjmp	.+48     	; 0x85e <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     82e:	8d 91       	ld	r24, X+
     830:	9c 91       	ld	r25, X
     832:	11 97       	sbiw	r26, 0x01	; 1
     834:	b9 01       	movw	r22, r18
     836:	68 1b       	sub	r22, r24
     838:	79 0b       	sbc	r23, r25
		tp->time -= total;
     83a:	98 01       	movw	r18, r16
     83c:	26 1b       	sub	r18, r22
     83e:	37 0b       	sbc	r19, r23
     840:	39 83       	std	Y+1, r19	; 0x01
     842:	28 83       	st	Y, r18
		cp->time -= tp->time;
     844:	8d 91       	ld	r24, X+
     846:	9c 91       	ld	r25, X
     848:	11 97       	sbiw	r26, 0x01	; 1
     84a:	82 1b       	sub	r24, r18
     84c:	93 0b       	sbc	r25, r19
     84e:	11 96       	adiw	r26, 0x01	; 1
     850:	9c 93       	st	X, r25
     852:	8e 93       	st	-X, r24
		pp->link = tp;
     854:	fa 01       	movw	r30, r20
     856:	d5 87       	std	Z+13, r29	; 0x0d
     858:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     85a:	bd 87       	std	Y+13, r27	; 0x0d
     85c:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	08 95       	ret

0000086c <tour_timer>:
void tour_timer()
{
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 b1 07 	call	0xf62	; 0xf62 <putchar>
	for(cp = Thead; cp !=NULL; cp = cp->link){
     880:	c0 91 b4 02 	lds	r28, 0x02B4
     884:	d0 91 b5 02 	lds	r29, 0x02B5
	}
}
void tour_timer()
{
	struct timer *cp;
	int total = 0;
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
     88c:	80 e9       	ldi	r24, 0x90	; 144
     88e:	e8 2e       	mov	r14, r24
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     894:	20 c0       	rjmp	.+64     	; 0x8d6 <tour_timer+0x6a>
		total+= cp->time;
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	08 0f       	add	r16, r24
     89c:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <tour_timer+0x34>
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <tour_timer+0x36>
     8a2:	ed b7       	in	r30, 0x3d	; 61
     8a4:	fe b7       	in	r31, 0x3e	; 62
     8a6:	31 96       	adiw	r30, 0x01	; 1
     8a8:	ad b7       	in	r26, 0x3d	; 61
     8aa:	be b7       	in	r27, 0x3e	; 62
     8ac:	12 96       	adiw	r26, 0x02	; 2
     8ae:	fc 92       	st	X, r15
     8b0:	ee 92       	st	-X, r14
     8b2:	11 97       	sbiw	r26, 0x01	; 1
     8b4:	93 83       	std	Z+3, r25	; 0x03
     8b6:	82 83       	std	Z+2, r24	; 0x02
     8b8:	15 83       	std	Z+5, r17	; 0x05
     8ba:	04 83       	std	Z+4, r16	; 0x04
     8bc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     8c0:	0c 84       	ldd	r0, Y+12	; 0x0c
     8c2:	dd 85       	ldd	r29, Y+13	; 0x0d
     8c4:	c0 2d       	mov	r28, r0
     8c6:	8d b7       	in	r24, 0x3d	; 61
     8c8:	9e b7       	in	r25, 0x3e	; 62
     8ca:	06 96       	adiw	r24, 0x06	; 6
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	9e bf       	out	0x3e, r25	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	8d bf       	out	0x3d, r24	; 61
     8d6:	20 97       	sbiw	r28, 0x00	; 0
     8d8:	f1 f6       	brne	.-68     	; 0x896 <tour_timer+0x2a>
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 b1 07 	call	0xf62	; 0xf62 <putchar>
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	08 95       	ret

000008f0 <free_timer>:
void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL ;){
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8f2:	fc 01       	movw	r30, r24
     8f4:	24 85       	ldd	r18, Z+12	; 0x0c
     8f6:	35 85       	ldd	r19, Z+13	; 0x0d
     8f8:	30 93 b5 02 	sts	0x02B5, r19
     8fc:	20 93 b4 02 	sts	0x02B4, r18
		free(cp);
     900:	0e 94 77 06 	call	0xcee	; 0xcee <free>
}
void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL ;){
     904:	80 91 b4 02 	lds	r24, 0x02B4
     908:	90 91 b5 02 	lds	r25, 0x02B5
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	89 f7       	brne	.-30     	; 0x8f2 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     910:	08 95       	ret

00000912 <app_timer>:
void app_timer(char *ap)
{
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	62 97       	sbiw	r28, 0x12	; 18
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;
	while(1){
		printf(">> ");
     92a:	0b e9       	ldi	r16, 0x9B	; 155
     92c:	12 e0       	ldi	r17, 0x02	; 2
     92e:	0f 92       	push	r0
     930:	0f 92       	push	r0
     932:	ed b7       	in	r30, 0x3d	; 61
     934:	fe b7       	in	r31, 0x3e	; 62
     936:	12 83       	std	Z+2, r17	; 0x02
     938:	01 83       	std	Z+1, r16	; 0x01
     93a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	40 91 c8 04 	lds	r20, 0x04C8
     946:	50 91 c9 04 	lds	r21, 0x04C9
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	68 e0       	ldi	r22, 0x08	; 8
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 6b 07 	call	0xed6	; 0xed6 <fgets>
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	61 f0       	breq	.+24     	; 0x972 <app_timer+0x60>
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	0e 94 10 07 	call	0xe20	; 0xe20 <atoi>
     962:	bc 01       	movw	r22, r24
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	29 f0       	breq	.+10     	; 0x972 <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     968:	ce 01       	movw	r24, r28
     96a:	09 96       	adiw	r24, 0x09	; 9
     96c:	0e 94 c3 03 	call	0x786	; 0x786 <insert_timer>
	}
     970:	de cf       	rjmp	.-68     	; 0x92e <app_timer+0x1c>
	tour_timer();
     972:	0e 94 36 04 	call	0x86c	; 0x86c <tour_timer>
	free_timer();
     976:	0e 94 78 04 	call	0x8f0	; 0x8f0 <free_timer>
}
     97a:	62 96       	adiw	r28, 0x12	; 18
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	08 95       	ret

00000990 <app_time>:
void app_time(char *ap)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
	printf("%d : %d\n",Tcount/60,Tcount%60);
     994:	80 91 b9 02 	lds	r24, 0x02B9
     998:	90 91 ba 02 	lds	r25, 0x02BA
     99c:	e0 91 b9 02 	lds	r30, 0x02B9
     9a0:	f0 91 ba 02 	lds	r31, 0x02BA
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <app_time+0x16>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <app_time+0x18>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	21 96       	adiw	r28, 0x01	; 1
     9ae:	2f e9       	ldi	r18, 0x9F	; 159
     9b0:	32 e0       	ldi	r19, 0x02	; 2
     9b2:	ad b7       	in	r26, 0x3d	; 61
     9b4:	be b7       	in	r27, 0x3e	; 62
     9b6:	12 96       	adiw	r26, 0x02	; 2
     9b8:	3c 93       	st	X, r19
     9ba:	2e 93       	st	-X, r18
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	2c e3       	ldi	r18, 0x3C	; 60
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	b9 01       	movw	r22, r18
     9c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     9c8:	7b 83       	std	Y+3, r23	; 0x03
     9ca:	6a 83       	std	Y+2, r22	; 0x02
     9cc:	cf 01       	movw	r24, r30
     9ce:	b9 01       	movw	r22, r18
     9d0:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
     9d4:	9d 83       	std	Y+5, r25	; 0x05
     9d6:	8c 83       	std	Y+4, r24	; 0x04
     9d8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
     9dc:	8d b7       	in	r24, 0x3d	; 61
     9de:	9e b7       	in	r25, 0x3e	; 62
     9e0:	06 96       	adiw	r24, 0x06	; 6
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	9e bf       	out	0x3e, r25	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	8d bf       	out	0x3d, r24	; 61
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <timer_init>:
void timer_init(){
	TCNT2 = 0;
     9f2:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     9f6:	e6 eb       	ldi	r30, 0xB6	; 182
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	80 62       	ori	r24, 0x20	; 32
     9fe:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     a00:	e0 e7       	ldi	r30, 0x70	; 112
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     a0a:	e1 eb       	ldi	r30, 0xB1	; 177
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
}
     a1a:	08 95       	ret

00000a1c <led_init>:
#include<avr/io.h>
static uint8_t Leds;

void led_init(){
	DDRL = PORTL =0xff;
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	80 93 0b 01 	sts	0x010B, r24
     a22:	80 93 0a 01 	sts	0x010A, r24
}
     a26:	08 95       	ret

00000a28 <led_on_all>:
void led_on_all(){
	Leds = PORTL = 0x00;
     a28:	10 92 0b 01 	sts	0x010B, r1
     a2c:	10 92 b6 02 	sts	0x02B6, r1
}
     a30:	08 95       	ret

00000a32 <led_off_all>:
void led_off_all(){
	Leds = PORTL = 0xff;
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	80 93 0b 01 	sts	0x010B, r24
     a38:	80 93 b6 02 	sts	0x02B6, r24
}
     a3c:	08 95       	ret

00000a3e <led_on>:
void led_on(uint8_t led_no){
	Leds &= (1 << led_no);
     a3e:	21 e0       	ldi	r18, 0x01	; 1
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <led_on+0xa>
     a44:	22 0f       	add	r18, r18
     a46:	33 1f       	adc	r19, r19
     a48:	8a 95       	dec	r24
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <led_on+0x6>
     a4c:	80 91 b6 02 	lds	r24, 0x02B6
     a50:	82 23       	and	r24, r18
     a52:	80 93 b6 02 	sts	0x02B6, r24
	PORTL = Leds;
     a56:	80 93 0b 01 	sts	0x010B, r24
}
     a5a:	08 95       	ret

00000a5c <led_off>:
void led_off(uint8_t led_no){
	Leds |= (1 << led_no);
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <led_off+0xa>
     a62:	22 0f       	add	r18, r18
     a64:	33 1f       	adc	r19, r19
     a66:	8a 95       	dec	r24
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <led_off+0x6>
     a6a:	80 91 b6 02 	lds	r24, 0x02B6
     a6e:	82 2b       	or	r24, r18
     a70:	80 93 b6 02 	sts	0x02B6, r24
	PORTL = Leds;
     a74:	80 93 0b 01 	sts	0x010B, r24
}
     a78:	08 95       	ret

00000a7a <led_set>:
void led_set(uint8_t led_mask){
	Leds = ~led_mask;
     a7a:	80 95       	com	r24
     a7c:	80 93 b6 02 	sts	0x02B6, r24
	PORTL = Leds;
     a80:	80 93 0b 01 	sts	0x010B, r24
}
     a84:	08 95       	ret

00000a86 <main>:
#include"prime.h"
#include"time.h"
#include"led.h"

int main()
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	c0 58       	subi	r28, 0x80	; 128
     a90:	d0 40       	sbci	r29, 0x00	; 0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
	Tcount=0;
     a9c:	10 92 ba 02 	sts	0x02BA, r1
     aa0:	10 92 b9 02 	sts	0x02B9, r1
	char cmd[128], *cp, *ap;
	led_init();
     aa4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <led_init>
	timer_init();
     aa8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <timer_init>
	uart_init();
     aac:	0e 94 0f 02 	call	0x41e	; 0x41e <uart_init>
	sei();
     ab0:	78 94       	sei
	while(1){
		printf("$ ");
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	c8 2e       	mov	r12, r24
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	d8 2e       	mov	r13, r24
     aba:	0f 92       	push	r0
     abc:	0f 92       	push	r0
     abe:	ed b7       	in	r30, 0x3d	; 61
     ac0:	fe b7       	in	r31, 0x3e	; 62
     ac2:	d2 82       	std	Z+2, r13	; 0x02
     ac4:	c1 82       	std	Z+1, r12	; 0x01
     ac6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	40 91 c8 04 	lds	r20, 0x04C8
     ad2:	50 91 c9 04 	lds	r21, 0x04C9
     ad6:	ce 01       	movw	r24, r28
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	60 e8       	ldi	r22, 0x80	; 128
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	0e 94 6b 07 	call	0xed6	; 0xed6 <fgets>
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	09 f4       	brne	.+2      	; 0xae8 <main+0x62>
     ae6:	41 c0       	rjmp	.+130    	; 0xb6a <main+0xe4>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) ==NULL){
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	63 e0       	ldi	r22, 0x03	; 3
     aee:	72 e0       	ldi	r23, 0x02	; 2
     af0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <strtok>
     af4:	8c 01       	movw	r16, r24
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	01 f3       	breq	.-64     	; 0xaba <main+0x34>
			
			 continue;
		}
		ap = strtok(NULL, "\n\r\t ");
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	63 e0       	ldi	r22, 0x03	; 3
     b00:	72 e0       	ldi	r23, 0x02	; 2
     b02:	0e 94 2e 07 	call	0xe5c	; 0xe5c <strtok>
     b06:	7c 01       	movw	r14, r24
		if (!strcmp(cp, "prime" )) app_prime(ap);
     b08:	c8 01       	movw	r24, r16
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	72 e0       	ldi	r23, 0x02	; 2
     b0e:	0e 94 33 07 	call	0xe66	; 0xe66 <strcmp>
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	21 f4       	brne	.+8      	; 0xb1e <main+0x98>
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
     b1c:	ce cf       	rjmp	.-100    	; 0xaba <main+0x34>
		else if(!strcmp(cp, "list")) app_list(ap);
     b1e:	c8 01       	movw	r24, r16
     b20:	6e e0       	ldi	r22, 0x0E	; 14
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	0e 94 33 07 	call	0xe66	; 0xe66 <strcmp>
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	21 f4       	brne	.+8      	; 0xb34 <main+0xae>
     b2c:	c7 01       	movw	r24, r14
     b2e:	0e 94 01 01 	call	0x202	; 0x202 <app_list>
     b32:	c3 cf       	rjmp	.-122    	; 0xaba <main+0x34>
		else if(!strcmp(cp, "timer")) app_timer(ap);
     b34:	c8 01       	movw	r24, r16
     b36:	63 e1       	ldi	r22, 0x13	; 19
     b38:	72 e0       	ldi	r23, 0x02	; 2
     b3a:	0e 94 33 07 	call	0xe66	; 0xe66 <strcmp>
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	21 f4       	brne	.+8      	; 0xb4a <main+0xc4>
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 89 04 	call	0x912	; 0x912 <app_timer>
     b48:	b8 cf       	rjmp	.-144    	; 0xaba <main+0x34>
		else if(!strcmp(cp, "time")) app_time(ap);
     b4a:	c8 01       	movw	r24, r16
     b4c:	69 e1       	ldi	r22, 0x19	; 25
     b4e:	72 e0       	ldi	r23, 0x02	; 2
     b50:	0e 94 33 07 	call	0xe66	; 0xe66 <strcmp>
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	21 f4       	brne	.+8      	; 0xb60 <main+0xda>
     b58:	c7 01       	movw	r24, r14
     b5a:	0e 94 c8 04 	call	0x990	; 0x990 <app_time>
     b5e:	ad cf       	rjmp	.-166    	; 0xaba <main+0x34>
		else printf("Unknown command...\n");
     b60:	8e e1       	ldi	r24, 0x1E	; 30
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 b8 07 	call	0xf70	; 0xf70 <puts>
     b68:	a8 cf       	rjmp	.-176    	; 0xaba <main+0x34>
	}
	printf("logout, good bye !!!\n");
     b6a:	81 e3       	ldi	r24, 0x31	; 49
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 b8 07 	call	0xf70	; 0xf70 <puts>
     b72:	ff cf       	rjmp	.-2      	; 0xb72 <main+0xec>

00000b74 <__divmodhi4>:
     b74:	97 fb       	bst	r25, 7
     b76:	09 2e       	mov	r0, r25
     b78:	07 26       	eor	r0, r23
     b7a:	0a d0       	rcall	.+20     	; 0xb90 <__divmodhi4_neg1>
     b7c:	77 fd       	sbrc	r23, 7
     b7e:	04 d0       	rcall	.+8      	; 0xb88 <__divmodhi4_neg2>
     b80:	0c d0       	rcall	.+24     	; 0xb9a <__udivmodhi4>
     b82:	06 d0       	rcall	.+12     	; 0xb90 <__divmodhi4_neg1>
     b84:	00 20       	and	r0, r0
     b86:	1a f4       	brpl	.+6      	; 0xb8e <__divmodhi4_exit>

00000b88 <__divmodhi4_neg2>:
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b8e <__divmodhi4_exit>:
     b8e:	08 95       	ret

00000b90 <__divmodhi4_neg1>:
     b90:	f6 f7       	brtc	.-4      	; 0xb8e <__divmodhi4_exit>
     b92:	90 95       	com	r25
     b94:	81 95       	neg	r24
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	08 95       	ret

00000b9a <__udivmodhi4>:
     b9a:	aa 1b       	sub	r26, r26
     b9c:	bb 1b       	sub	r27, r27
     b9e:	51 e1       	ldi	r21, 0x11	; 17
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__udivmodhi4_ep>

00000ba2 <__udivmodhi4_loop>:
     ba2:	aa 1f       	adc	r26, r26
     ba4:	bb 1f       	adc	r27, r27
     ba6:	a6 17       	cp	r26, r22
     ba8:	b7 07       	cpc	r27, r23
     baa:	10 f0       	brcs	.+4      	; 0xbb0 <__udivmodhi4_ep>
     bac:	a6 1b       	sub	r26, r22
     bae:	b7 0b       	sbc	r27, r23

00000bb0 <__udivmodhi4_ep>:
     bb0:	88 1f       	adc	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	5a 95       	dec	r21
     bb6:	a9 f7       	brne	.-22     	; 0xba2 <__udivmodhi4_loop>
     bb8:	80 95       	com	r24
     bba:	90 95       	com	r25
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	08 95       	ret

00000bc2 <malloc>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ac 01       	movw	r20, r24
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	91 05       	cpc	r25, r1
     bcc:	10 f4       	brcc	.+4      	; 0xbd2 <malloc+0x10>
     bce:	42 e0       	ldi	r20, 0x02	; 2
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	e0 91 c6 04 	lds	r30, 0x04C6
     bd6:	f0 91 c7 04 	lds	r31, 0x04C7
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	24 c0       	rjmp	.+72     	; 0xc2c <malloc+0x6a>
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	84 17       	cp	r24, r20
     bea:	95 07       	cpc	r25, r21
     bec:	d0 f0       	brcs	.+52     	; 0xc22 <malloc+0x60>
     bee:	84 17       	cp	r24, r20
     bf0:	95 07       	cpc	r25, r21
     bf2:	71 f4       	brne	.+28     	; 0xc10 <malloc+0x4e>
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	10 97       	sbiw	r26, 0x00	; 0
     bfa:	29 f0       	breq	.+10     	; 0xc06 <malloc+0x44>
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	2c c0       	rjmp	.+88     	; 0xc5e <malloc+0x9c>
     c06:	90 93 c7 04 	sts	0x04C7, r25
     c0a:	80 93 c6 04 	sts	0x04C6, r24
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <malloc+0x9c>
     c10:	21 15       	cp	r18, r1
     c12:	31 05       	cpc	r19, r1
     c14:	19 f0       	breq	.+6      	; 0xc1c <malloc+0x5a>
     c16:	82 17       	cp	r24, r18
     c18:	93 07       	cpc	r25, r19
     c1a:	18 f4       	brcc	.+6      	; 0xc22 <malloc+0x60>
     c1c:	9c 01       	movw	r18, r24
     c1e:	bd 01       	movw	r22, r26
     c20:	ef 01       	movw	r28, r30
     c22:	92 81       	ldd	r25, Z+2	; 0x02
     c24:	83 81       	ldd	r24, Z+3	; 0x03
     c26:	df 01       	movw	r26, r30
     c28:	e9 2f       	mov	r30, r25
     c2a:	f8 2f       	mov	r31, r24
     c2c:	30 97       	sbiw	r30, 0x00	; 0
     c2e:	d1 f6       	brne	.-76     	; 0xbe4 <malloc+0x22>
     c30:	21 15       	cp	r18, r1
     c32:	31 05       	cpc	r19, r1
     c34:	f9 f0       	breq	.+62     	; 0xc74 <malloc+0xb2>
     c36:	c9 01       	movw	r24, r18
     c38:	84 1b       	sub	r24, r20
     c3a:	95 0b       	sbc	r25, r21
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	91 05       	cpc	r25, r1
     c40:	80 f4       	brcc	.+32     	; 0xc62 <malloc+0xa0>
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	9b 81       	ldd	r25, Y+3	; 0x03
     c46:	61 15       	cp	r22, r1
     c48:	71 05       	cpc	r23, r1
     c4a:	21 f0       	breq	.+8      	; 0xc54 <malloc+0x92>
     c4c:	fb 01       	movw	r30, r22
     c4e:	93 83       	std	Z+3, r25	; 0x03
     c50:	82 83       	std	Z+2, r24	; 0x02
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <malloc+0x9a>
     c54:	90 93 c7 04 	sts	0x04C7, r25
     c58:	80 93 c6 04 	sts	0x04C6, r24
     c5c:	fe 01       	movw	r30, r28
     c5e:	32 96       	adiw	r30, 0x02	; 2
     c60:	42 c0       	rjmp	.+132    	; 0xce6 <malloc+0x124>
     c62:	fe 01       	movw	r30, r28
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	41 93       	st	Z+, r20
     c6a:	51 93       	st	Z+, r21
     c6c:	02 97       	sbiw	r24, 0x02	; 2
     c6e:	99 83       	std	Y+1, r25	; 0x01
     c70:	88 83       	st	Y, r24
     c72:	39 c0       	rjmp	.+114    	; 0xce6 <malloc+0x124>
     c74:	80 91 c4 04 	lds	r24, 0x04C4
     c78:	90 91 c5 04 	lds	r25, 0x04C5
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	41 f4       	brne	.+16     	; 0xc90 <malloc+0xce>
     c80:	80 91 aa 02 	lds	r24, 0x02AA
     c84:	90 91 ab 02 	lds	r25, 0x02AB
     c88:	90 93 c5 04 	sts	0x04C5, r25
     c8c:	80 93 c4 04 	sts	0x04C4, r24
     c90:	20 91 a8 02 	lds	r18, 0x02A8
     c94:	30 91 a9 02 	lds	r19, 0x02A9
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	41 f4       	brne	.+16     	; 0xcae <malloc+0xec>
     c9e:	2d b7       	in	r18, 0x3d	; 61
     ca0:	3e b7       	in	r19, 0x3e	; 62
     ca2:	80 91 ac 02 	lds	r24, 0x02AC
     ca6:	90 91 ad 02 	lds	r25, 0x02AD
     caa:	28 1b       	sub	r18, r24
     cac:	39 0b       	sbc	r19, r25
     cae:	e0 91 c4 04 	lds	r30, 0x04C4
     cb2:	f0 91 c5 04 	lds	r31, 0x04C5
     cb6:	e2 17       	cp	r30, r18
     cb8:	f3 07       	cpc	r31, r19
     cba:	98 f4       	brcc	.+38     	; 0xce2 <malloc+0x120>
     cbc:	2e 1b       	sub	r18, r30
     cbe:	3f 0b       	sbc	r19, r31
     cc0:	24 17       	cp	r18, r20
     cc2:	35 07       	cpc	r19, r21
     cc4:	70 f0       	brcs	.+28     	; 0xce2 <malloc+0x120>
     cc6:	ca 01       	movw	r24, r20
     cc8:	02 96       	adiw	r24, 0x02	; 2
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	48 f0       	brcs	.+18     	; 0xce2 <malloc+0x120>
     cd0:	8e 0f       	add	r24, r30
     cd2:	9f 1f       	adc	r25, r31
     cd4:	90 93 c5 04 	sts	0x04C5, r25
     cd8:	80 93 c4 04 	sts	0x04C4, r24
     cdc:	41 93       	st	Z+, r20
     cde:	51 93       	st	Z+, r21
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <malloc+0x124>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	cf 01       	movw	r24, r30
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <free>:
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	9c 01       	movw	r18, r24
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	09 f4       	brne	.+2      	; 0xcfe <free+0x10>
     cfc:	8c c0       	rjmp	.+280    	; 0xe16 <free+0x128>
     cfe:	dc 01       	movw	r26, r24
     d00:	12 97       	sbiw	r26, 0x02	; 2
     d02:	13 96       	adiw	r26, 0x03	; 3
     d04:	1c 92       	st	X, r1
     d06:	1e 92       	st	-X, r1
     d08:	12 97       	sbiw	r26, 0x02	; 2
     d0a:	60 91 c6 04 	lds	r22, 0x04C6
     d0e:	70 91 c7 04 	lds	r23, 0x04C7
     d12:	61 15       	cp	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	89 f4       	brne	.+34     	; 0xd3a <free+0x4c>
     d18:	8d 91       	ld	r24, X+
     d1a:	9c 91       	ld	r25, X
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	20 91 c4 04 	lds	r18, 0x04C4
     d26:	30 91 c5 04 	lds	r19, 0x04C5
     d2a:	28 17       	cp	r18, r24
     d2c:	39 07       	cpc	r19, r25
     d2e:	69 f5       	brne	.+90     	; 0xd8a <free+0x9c>
     d30:	b0 93 c5 04 	sts	0x04C5, r27
     d34:	a0 93 c4 04 	sts	0x04C4, r26
     d38:	6e c0       	rjmp	.+220    	; 0xe16 <free+0x128>
     d3a:	fb 01       	movw	r30, r22
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <free+0x56>
     d42:	fc 01       	movw	r30, r24
     d44:	ea 17       	cp	r30, r26
     d46:	fb 07       	cpc	r31, r27
     d48:	30 f4       	brcc	.+12     	; 0xd56 <free+0x68>
     d4a:	82 81       	ldd	r24, Z+2	; 0x02
     d4c:	93 81       	ldd	r25, Z+3	; 0x03
     d4e:	af 01       	movw	r20, r30
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	b9 f7       	brne	.-18     	; 0xd42 <free+0x54>
     d54:	1f c0       	rjmp	.+62     	; 0xd94 <free+0xa6>
     d56:	e9 01       	movw	r28, r18
     d58:	22 97       	sbiw	r28, 0x02	; 2
     d5a:	fb 83       	std	Y+3, r31	; 0x03
     d5c:	ea 83       	std	Y+2, r30	; 0x02
     d5e:	08 81       	ld	r16, Y
     d60:	19 81       	ldd	r17, Y+1	; 0x01
     d62:	c9 01       	movw	r24, r18
     d64:	80 0f       	add	r24, r16
     d66:	91 1f       	adc	r25, r17
     d68:	8e 17       	cp	r24, r30
     d6a:	9f 07       	cpc	r25, r31
     d6c:	59 f4       	brne	.+22     	; 0xd84 <free+0x96>
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	80 0f       	add	r24, r16
     d74:	91 1f       	adc	r25, r17
     d76:	02 96       	adiw	r24, 0x02	; 2
     d78:	99 83       	std	Y+1, r25	; 0x01
     d7a:	88 83       	st	Y, r24
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	29 f4       	brne	.+10     	; 0xd94 <free+0xa6>
     d8a:	b0 93 c7 04 	sts	0x04C7, r27
     d8e:	a0 93 c6 04 	sts	0x04C6, r26
     d92:	41 c0       	rjmp	.+130    	; 0xe16 <free+0x128>
     d94:	fa 01       	movw	r30, r20
     d96:	b3 83       	std	Z+3, r27	; 0x03
     d98:	a2 83       	std	Z+2, r26	; 0x02
     d9a:	c1 91       	ld	r28, Z+
     d9c:	d1 91       	ld	r29, Z+
     d9e:	ec 0f       	add	r30, r28
     da0:	fd 1f       	adc	r31, r29
     da2:	ae 17       	cp	r26, r30
     da4:	bf 07       	cpc	r27, r31
     da6:	81 f4       	brne	.+32     	; 0xdc8 <free+0xda>
     da8:	f9 01       	movw	r30, r18
     daa:	92 91       	ld	r25, -Z
     dac:	82 91       	ld	r24, -Z
     dae:	8c 0f       	add	r24, r28
     db0:	9d 1f       	adc	r25, r29
     db2:	02 96       	adiw	r24, 0x02	; 2
     db4:	da 01       	movw	r26, r20
     db6:	11 96       	adiw	r26, 0x01	; 1
     db8:	9c 93       	st	X, r25
     dba:	8e 93       	st	-X, r24
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	e0 e0       	ldi	r30, 0x00	; 0
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <free+0xe4>
     dce:	fb 01       	movw	r30, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	db 01       	movw	r26, r22
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	8d 91       	ld	r24, X+
     dd8:	9c 91       	ld	r25, X
     dda:	13 97       	sbiw	r26, 0x03	; 3
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	b9 f7       	brne	.-18     	; 0xdce <free+0xe0>
     de0:	cb 01       	movw	r24, r22
     de2:	02 96       	adiw	r24, 0x02	; 2
     de4:	2d 91       	ld	r18, X+
     de6:	3c 91       	ld	r19, X
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	20 91 c4 04 	lds	r18, 0x04C4
     df2:	30 91 c5 04 	lds	r19, 0x04C5
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	69 f4       	brne	.+26     	; 0xe16 <free+0x128>
     dfc:	30 97       	sbiw	r30, 0x00	; 0
     dfe:	29 f4       	brne	.+10     	; 0xe0a <free+0x11c>
     e00:	10 92 c7 04 	sts	0x04C7, r1
     e04:	10 92 c6 04 	sts	0x04C6, r1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <free+0x120>
     e0a:	13 82       	std	Z+3, r1	; 0x03
     e0c:	12 82       	std	Z+2, r1	; 0x02
     e0e:	70 93 c5 04 	sts	0x04C5, r23
     e12:	60 93 c4 04 	sts	0x04C4, r22
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <atoi>:
     e20:	fc 01       	movw	r30, r24
     e22:	88 27       	eor	r24, r24
     e24:	99 27       	eor	r25, r25
     e26:	e8 94       	clt
     e28:	21 91       	ld	r18, Z+
     e2a:	20 32       	cpi	r18, 0x20	; 32
     e2c:	e9 f3       	breq	.-6      	; 0xe28 <atoi+0x8>
     e2e:	29 30       	cpi	r18, 0x09	; 9
     e30:	10 f0       	brcs	.+4      	; 0xe36 <atoi+0x16>
     e32:	2e 30       	cpi	r18, 0x0E	; 14
     e34:	c8 f3       	brcs	.-14     	; 0xe28 <atoi+0x8>
     e36:	2b 32       	cpi	r18, 0x2B	; 43
     e38:	41 f0       	breq	.+16     	; 0xe4a <atoi+0x2a>
     e3a:	2d 32       	cpi	r18, 0x2D	; 45
     e3c:	39 f4       	brne	.+14     	; 0xe4c <atoi+0x2c>
     e3e:	68 94       	set
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <atoi+0x2a>
     e42:	0e 94 63 07 	call	0xec6	; 0xec6 <__mulhi_const_10>
     e46:	82 0f       	add	r24, r18
     e48:	91 1d       	adc	r25, r1
     e4a:	21 91       	ld	r18, Z+
     e4c:	20 53       	subi	r18, 0x30	; 48
     e4e:	2a 30       	cpi	r18, 0x0A	; 10
     e50:	c0 f3       	brcs	.-16     	; 0xe42 <atoi+0x22>
     e52:	1e f4       	brtc	.+6      	; 0xe5a <atoi+0x3a>
     e54:	90 95       	com	r25
     e56:	81 95       	neg	r24
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	08 95       	ret

00000e5c <strtok>:
     e5c:	47 eb       	ldi	r20, 0xB7	; 183
     e5e:	52 e0       	ldi	r21, 0x02	; 2
     e60:	0e 94 3c 07 	call	0xe78	; 0xe78 <strtok_r>
     e64:	08 95       	ret

00000e66 <strcmp>:
     e66:	fb 01       	movw	r30, r22
     e68:	dc 01       	movw	r26, r24
     e6a:	8d 91       	ld	r24, X+
     e6c:	01 90       	ld	r0, Z+
     e6e:	80 19       	sub	r24, r0
     e70:	01 10       	cpse	r0, r1
     e72:	d9 f3       	breq	.-10     	; 0xe6a <strcmp+0x4>
     e74:	99 0b       	sbc	r25, r25
     e76:	08 95       	ret

00000e78 <strtok_r>:
     e78:	fa 01       	movw	r30, r20
     e7a:	a1 91       	ld	r26, Z+
     e7c:	b0 81       	ld	r27, Z
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	19 f4       	brne	.+6      	; 0xe88 <strtok_r+0x10>
     e82:	10 97       	sbiw	r26, 0x00	; 0
     e84:	e1 f0       	breq	.+56     	; 0xebe <strtok_r+0x46>
     e86:	cd 01       	movw	r24, r26
     e88:	dc 01       	movw	r26, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0d 90       	ld	r0, X+
     e8e:	00 20       	and	r0, r0
     e90:	11 f4       	brne	.+4      	; 0xe96 <strtok_r+0x1e>
     e92:	c0 01       	movw	r24, r0
     e94:	13 c0       	rjmp	.+38     	; 0xebc <strtok_r+0x44>
     e96:	fb 01       	movw	r30, r22
     e98:	21 91       	ld	r18, Z+
     e9a:	22 23       	and	r18, r18
     e9c:	19 f0       	breq	.+6      	; 0xea4 <strtok_r+0x2c>
     e9e:	20 15       	cp	r18, r0
     ea0:	d9 f7       	brne	.-10     	; 0xe98 <strtok_r+0x20>
     ea2:	f3 cf       	rjmp	.-26     	; 0xe8a <strtok_r+0x12>
     ea4:	fb 01       	movw	r30, r22
     ea6:	21 91       	ld	r18, Z+
     ea8:	20 15       	cp	r18, r0
     eaa:	19 f4       	brne	.+6      	; 0xeb2 <strtok_r+0x3a>
     eac:	1e 92       	st	-X, r1
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <strtok_r+0x46>
     eb2:	22 23       	and	r18, r18
     eb4:	c1 f7       	brne	.-16     	; 0xea6 <strtok_r+0x2e>
     eb6:	0d 90       	ld	r0, X+
     eb8:	00 20       	and	r0, r0
     eba:	a1 f7       	brne	.-24     	; 0xea4 <strtok_r+0x2c>
     ebc:	d0 01       	movw	r26, r0
     ebe:	fa 01       	movw	r30, r20
     ec0:	a1 93       	st	Z+, r26
     ec2:	b0 83       	st	Z, r27
     ec4:	08 95       	ret

00000ec6 <__mulhi_const_10>:
     ec6:	7a e0       	ldi	r23, 0x0A	; 10
     ec8:	97 9f       	mul	r25, r23
     eca:	90 2d       	mov	r25, r0
     ecc:	87 9f       	mul	r24, r23
     ece:	80 2d       	mov	r24, r0
     ed0:	91 0d       	add	r25, r1
     ed2:	11 24       	eor	r1, r1
     ed4:	08 95       	ret

00000ed6 <fgets>:
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	8c 01       	movw	r16, r24
     ee8:	6a 01       	movw	r12, r20
     eea:	fa 01       	movw	r30, r20
     eec:	83 81       	ldd	r24, Z+3	; 0x03
     eee:	80 ff       	sbrs	r24, 0
     ef0:	1a c0       	rjmp	.+52     	; 0xf26 <fgets+0x50>
     ef2:	16 16       	cp	r1, r22
     ef4:	17 06       	cpc	r1, r23
     ef6:	bc f4       	brge	.+46     	; 0xf26 <fgets+0x50>
     ef8:	7b 01       	movw	r14, r22
     efa:	e8 01       	movw	r28, r16
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <fgets+0x44>
     efe:	c6 01       	movw	r24, r12
     f00:	0e 94 03 0a 	call	0x1406	; 0x1406 <fgetc>
     f04:	ff ef       	ldi	r31, 0xFF	; 255
     f06:	8f 3f       	cpi	r24, 0xFF	; 255
     f08:	9f 07       	cpc	r25, r31
     f0a:	69 f0       	breq	.+26     	; 0xf26 <fgets+0x50>
     f0c:	89 93       	st	Y+, r24
     f0e:	08 94       	sec
     f10:	e1 08       	sbc	r14, r1
     f12:	f1 08       	sbc	r15, r1
     f14:	8a 30       	cpi	r24, 0x0A	; 10
     f16:	91 05       	cpc	r25, r1
     f18:	21 f0       	breq	.+8      	; 0xf22 <fgets+0x4c>
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	e2 16       	cp	r14, r18
     f1e:	f1 04       	cpc	r15, r1
     f20:	71 f7       	brne	.-36     	; 0xefe <fgets+0x28>
     f22:	18 82       	st	Y, r1
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <fgets+0x54>
     f26:	00 e0       	ldi	r16, 0x00	; 0
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	c8 01       	movw	r24, r16
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <printf>:
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	fe 01       	movw	r30, r28
     f48:	36 96       	adiw	r30, 0x06	; 6
     f4a:	61 91       	ld	r22, Z+
     f4c:	71 91       	ld	r23, Z+
     f4e:	80 91 ca 04 	lds	r24, 0x04CA
     f52:	90 91 cb 04 	lds	r25, 0x04CB
     f56:	af 01       	movw	r20, r30
     f58:	0e 94 e6 07 	call	0xfcc	; 0xfcc <vfprintf>
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <putchar>:
     f62:	60 91 ca 04 	lds	r22, 0x04CA
     f66:	70 91 cb 04 	lds	r23, 0x04CB
     f6a:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
     f6e:	08 95       	ret

00000f70 <puts>:
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	8c 01       	movw	r16, r24
     f7a:	e0 91 ca 04 	lds	r30, 0x04CA
     f7e:	f0 91 cb 04 	lds	r31, 0x04CB
     f82:	83 81       	ldd	r24, Z+3	; 0x03
     f84:	81 ff       	sbrs	r24, 1
     f86:	1a c0       	rjmp	.+52     	; 0xfbc <puts+0x4c>
     f88:	c0 e0       	ldi	r28, 0x00	; 0
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <puts+0x28>
     f8e:	19 95       	eicall
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	11 f0       	breq	.+4      	; 0xf98 <puts+0x28>
     f94:	cf ef       	ldi	r28, 0xFF	; 255
     f96:	df ef       	ldi	r29, 0xFF	; 255
     f98:	f8 01       	movw	r30, r16
     f9a:	81 91       	ld	r24, Z+
     f9c:	8f 01       	movw	r16, r30
     f9e:	60 91 ca 04 	lds	r22, 0x04CA
     fa2:	70 91 cb 04 	lds	r23, 0x04CB
     fa6:	db 01       	movw	r26, r22
     fa8:	18 96       	adiw	r26, 0x08	; 8
     faa:	ed 91       	ld	r30, X+
     fac:	fc 91       	ld	r31, X
     fae:	19 97       	sbiw	r26, 0x09	; 9
     fb0:	88 23       	and	r24, r24
     fb2:	69 f7       	brne	.-38     	; 0xf8e <puts+0x1e>
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	19 95       	eicall
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	11 f0       	breq	.+4      	; 0xfc0 <puts+0x50>
     fbc:	cf ef       	ldi	r28, 0xFF	; 255
     fbe:	df ef       	ldi	r29, 0xFF	; 255
     fc0:	ce 01       	movw	r24, r28
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <vfprintf>:
     fcc:	2f 92       	push	r2
     fce:	3f 92       	push	r3
     fd0:	4f 92       	push	r4
     fd2:	5f 92       	push	r5
     fd4:	6f 92       	push	r6
     fd6:	7f 92       	push	r7
     fd8:	8f 92       	push	r8
     fda:	9f 92       	push	r9
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	2d 97       	sbiw	r28, 0x0d	; 13
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	3c 01       	movw	r6, r24
    1002:	7d 87       	std	Y+13, r23	; 0x0d
    1004:	6c 87       	std	Y+12, r22	; 0x0c
    1006:	5a 01       	movw	r10, r20
    1008:	fc 01       	movw	r30, r24
    100a:	17 82       	std	Z+7, r1	; 0x07
    100c:	16 82       	std	Z+6, r1	; 0x06
    100e:	83 81       	ldd	r24, Z+3	; 0x03
    1010:	81 ff       	sbrs	r24, 1
    1012:	c8 c1       	rjmp	.+912    	; 0x13a4 <vfprintf+0x3d8>
    1014:	2e 01       	movw	r4, r28
    1016:	08 94       	sec
    1018:	41 1c       	adc	r4, r1
    101a:	51 1c       	adc	r5, r1
    101c:	f3 01       	movw	r30, r6
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	ec 85       	ldd	r30, Y+12	; 0x0c
    1022:	fd 85       	ldd	r31, Y+13	; 0x0d
    1024:	93 fd       	sbrc	r25, 3
    1026:	85 91       	lpm	r24, Z+
    1028:	93 ff       	sbrs	r25, 3
    102a:	81 91       	ld	r24, Z+
    102c:	fd 87       	std	Y+13, r31	; 0x0d
    102e:	ec 87       	std	Y+12, r30	; 0x0c
    1030:	88 23       	and	r24, r24
    1032:	09 f4       	brne	.+2      	; 0x1036 <vfprintf+0x6a>
    1034:	b3 c1       	rjmp	.+870    	; 0x139c <vfprintf+0x3d0>
    1036:	85 32       	cpi	r24, 0x25	; 37
    1038:	41 f4       	brne	.+16     	; 0x104a <vfprintf+0x7e>
    103a:	93 fd       	sbrc	r25, 3
    103c:	85 91       	lpm	r24, Z+
    103e:	93 ff       	sbrs	r25, 3
    1040:	81 91       	ld	r24, Z+
    1042:	fd 87       	std	Y+13, r31	; 0x0d
    1044:	ec 87       	std	Y+12, r30	; 0x0c
    1046:	85 32       	cpi	r24, 0x25	; 37
    1048:	29 f4       	brne	.+10     	; 0x1054 <vfprintf+0x88>
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	b3 01       	movw	r22, r6
    104e:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    1052:	e4 cf       	rjmp	.-56     	; 0x101c <vfprintf+0x50>
    1054:	ff 24       	eor	r15, r15
    1056:	ee 24       	eor	r14, r14
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	10 32       	cpi	r17, 0x20	; 32
    105c:	b0 f4       	brcc	.+44     	; 0x108a <vfprintf+0xbe>
    105e:	8b 32       	cpi	r24, 0x2B	; 43
    1060:	69 f0       	breq	.+26     	; 0x107c <vfprintf+0xb0>
    1062:	8c 32       	cpi	r24, 0x2C	; 44
    1064:	28 f4       	brcc	.+10     	; 0x1070 <vfprintf+0xa4>
    1066:	80 32       	cpi	r24, 0x20	; 32
    1068:	51 f0       	breq	.+20     	; 0x107e <vfprintf+0xb2>
    106a:	83 32       	cpi	r24, 0x23	; 35
    106c:	71 f4       	brne	.+28     	; 0x108a <vfprintf+0xbe>
    106e:	0b c0       	rjmp	.+22     	; 0x1086 <vfprintf+0xba>
    1070:	8d 32       	cpi	r24, 0x2D	; 45
    1072:	39 f0       	breq	.+14     	; 0x1082 <vfprintf+0xb6>
    1074:	80 33       	cpi	r24, 0x30	; 48
    1076:	49 f4       	brne	.+18     	; 0x108a <vfprintf+0xbe>
    1078:	11 60       	ori	r17, 0x01	; 1
    107a:	2c c0       	rjmp	.+88     	; 0x10d4 <vfprintf+0x108>
    107c:	12 60       	ori	r17, 0x02	; 2
    107e:	14 60       	ori	r17, 0x04	; 4
    1080:	29 c0       	rjmp	.+82     	; 0x10d4 <vfprintf+0x108>
    1082:	18 60       	ori	r17, 0x08	; 8
    1084:	27 c0       	rjmp	.+78     	; 0x10d4 <vfprintf+0x108>
    1086:	10 61       	ori	r17, 0x10	; 16
    1088:	25 c0       	rjmp	.+74     	; 0x10d4 <vfprintf+0x108>
    108a:	17 fd       	sbrc	r17, 7
    108c:	2e c0       	rjmp	.+92     	; 0x10ea <vfprintf+0x11e>
    108e:	28 2f       	mov	r18, r24
    1090:	20 53       	subi	r18, 0x30	; 48
    1092:	2a 30       	cpi	r18, 0x0A	; 10
    1094:	98 f4       	brcc	.+38     	; 0x10bc <vfprintf+0xf0>
    1096:	16 ff       	sbrs	r17, 6
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <vfprintf+0xde>
    109a:	8f 2d       	mov	r24, r15
    109c:	88 0f       	add	r24, r24
    109e:	f8 2e       	mov	r15, r24
    10a0:	ff 0c       	add	r15, r15
    10a2:	ff 0c       	add	r15, r15
    10a4:	f8 0e       	add	r15, r24
    10a6:	f2 0e       	add	r15, r18
    10a8:	15 c0       	rjmp	.+42     	; 0x10d4 <vfprintf+0x108>
    10aa:	8e 2d       	mov	r24, r14
    10ac:	88 0f       	add	r24, r24
    10ae:	e8 2e       	mov	r14, r24
    10b0:	ee 0c       	add	r14, r14
    10b2:	ee 0c       	add	r14, r14
    10b4:	e8 0e       	add	r14, r24
    10b6:	e2 0e       	add	r14, r18
    10b8:	10 62       	ori	r17, 0x20	; 32
    10ba:	0c c0       	rjmp	.+24     	; 0x10d4 <vfprintf+0x108>
    10bc:	8e 32       	cpi	r24, 0x2E	; 46
    10be:	21 f4       	brne	.+8      	; 0x10c8 <vfprintf+0xfc>
    10c0:	16 fd       	sbrc	r17, 6
    10c2:	6c c1       	rjmp	.+728    	; 0x139c <vfprintf+0x3d0>
    10c4:	10 64       	ori	r17, 0x40	; 64
    10c6:	06 c0       	rjmp	.+12     	; 0x10d4 <vfprintf+0x108>
    10c8:	8c 36       	cpi	r24, 0x6C	; 108
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <vfprintf+0x104>
    10cc:	10 68       	ori	r17, 0x80	; 128
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x108>
    10d0:	88 36       	cpi	r24, 0x68	; 104
    10d2:	59 f4       	brne	.+22     	; 0x10ea <vfprintf+0x11e>
    10d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    10d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    10d8:	93 fd       	sbrc	r25, 3
    10da:	85 91       	lpm	r24, Z+
    10dc:	93 ff       	sbrs	r25, 3
    10de:	81 91       	ld	r24, Z+
    10e0:	fd 87       	std	Y+13, r31	; 0x0d
    10e2:	ec 87       	std	Y+12, r30	; 0x0c
    10e4:	88 23       	and	r24, r24
    10e6:	09 f0       	breq	.+2      	; 0x10ea <vfprintf+0x11e>
    10e8:	b8 cf       	rjmp	.-144    	; 0x105a <vfprintf+0x8e>
    10ea:	98 2f       	mov	r25, r24
    10ec:	95 54       	subi	r25, 0x45	; 69
    10ee:	93 30       	cpi	r25, 0x03	; 3
    10f0:	18 f0       	brcs	.+6      	; 0x10f8 <vfprintf+0x12c>
    10f2:	90 52       	subi	r25, 0x20	; 32
    10f4:	93 30       	cpi	r25, 0x03	; 3
    10f6:	38 f4       	brcc	.+14     	; 0x1106 <vfprintf+0x13a>
    10f8:	24 e0       	ldi	r18, 0x04	; 4
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	a2 0e       	add	r10, r18
    10fe:	b3 1e       	adc	r11, r19
    1100:	3f e3       	ldi	r19, 0x3F	; 63
    1102:	39 83       	std	Y+1, r19	; 0x01
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <vfprintf+0x158>
    1106:	83 36       	cpi	r24, 0x63	; 99
    1108:	31 f0       	breq	.+12     	; 0x1116 <vfprintf+0x14a>
    110a:	83 37       	cpi	r24, 0x73	; 115
    110c:	81 f0       	breq	.+32     	; 0x112e <vfprintf+0x162>
    110e:	83 35       	cpi	r24, 0x53	; 83
    1110:	09 f0       	breq	.+2      	; 0x1114 <vfprintf+0x148>
    1112:	5a c0       	rjmp	.+180    	; 0x11c8 <vfprintf+0x1fc>
    1114:	22 c0       	rjmp	.+68     	; 0x115a <vfprintf+0x18e>
    1116:	f5 01       	movw	r30, r10
    1118:	80 81       	ld	r24, Z
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	22 e0       	ldi	r18, 0x02	; 2
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	a2 0e       	add	r10, r18
    1122:	b3 1e       	adc	r11, r19
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	c2 2e       	mov	r12, r18
    1128:	d1 2c       	mov	r13, r1
    112a:	42 01       	movw	r8, r4
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <vfprintf+0x18a>
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	29 2e       	mov	r2, r25
    1132:	31 2c       	mov	r3, r1
    1134:	2a 0c       	add	r2, r10
    1136:	3b 1c       	adc	r3, r11
    1138:	f5 01       	movw	r30, r10
    113a:	80 80       	ld	r8, Z
    113c:	91 80       	ldd	r9, Z+1	; 0x01
    113e:	16 ff       	sbrs	r17, 6
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <vfprintf+0x17c>
    1142:	6f 2d       	mov	r22, r15
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x180>
    1148:	6f ef       	ldi	r22, 0xFF	; 255
    114a:	7f ef       	ldi	r23, 0xFF	; 255
    114c:	c4 01       	movw	r24, r8
    114e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strnlen>
    1152:	6c 01       	movw	r12, r24
    1154:	51 01       	movw	r10, r2
    1156:	1f 77       	andi	r17, 0x7F	; 127
    1158:	15 c0       	rjmp	.+42     	; 0x1184 <vfprintf+0x1b8>
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	28 2e       	mov	r2, r24
    115e:	31 2c       	mov	r3, r1
    1160:	2a 0c       	add	r2, r10
    1162:	3b 1c       	adc	r3, r11
    1164:	f5 01       	movw	r30, r10
    1166:	80 80       	ld	r8, Z
    1168:	91 80       	ldd	r9, Z+1	; 0x01
    116a:	16 ff       	sbrs	r17, 6
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <vfprintf+0x1a8>
    116e:	6f 2d       	mov	r22, r15
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <vfprintf+0x1ac>
    1174:	6f ef       	ldi	r22, 0xFF	; 255
    1176:	7f ef       	ldi	r23, 0xFF	; 255
    1178:	c4 01       	movw	r24, r8
    117a:	0e 94 ed 09 	call	0x13da	; 0x13da <strnlen_P>
    117e:	6c 01       	movw	r12, r24
    1180:	10 68       	ori	r17, 0x80	; 128
    1182:	51 01       	movw	r10, r2
    1184:	13 fd       	sbrc	r17, 3
    1186:	1c c0       	rjmp	.+56     	; 0x11c0 <vfprintf+0x1f4>
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x1ca>
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	b3 01       	movw	r22, r6
    1190:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    1194:	ea 94       	dec	r14
    1196:	8e 2d       	mov	r24, r14
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	c8 16       	cp	r12, r24
    119c:	d9 06       	cpc	r13, r25
    119e:	a8 f3       	brcs	.-22     	; 0x118a <vfprintf+0x1be>
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <vfprintf+0x1f4>
    11a2:	f4 01       	movw	r30, r8
    11a4:	17 fd       	sbrc	r17, 7
    11a6:	85 91       	lpm	r24, Z+
    11a8:	17 ff       	sbrs	r17, 7
    11aa:	81 91       	ld	r24, Z+
    11ac:	4f 01       	movw	r8, r30
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b3 01       	movw	r22, r6
    11b2:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    11b6:	e1 10       	cpse	r14, r1
    11b8:	ea 94       	dec	r14
    11ba:	08 94       	sec
    11bc:	c1 08       	sbc	r12, r1
    11be:	d1 08       	sbc	r13, r1
    11c0:	c1 14       	cp	r12, r1
    11c2:	d1 04       	cpc	r13, r1
    11c4:	71 f7       	brne	.-36     	; 0x11a2 <vfprintf+0x1d6>
    11c6:	e7 c0       	rjmp	.+462    	; 0x1396 <vfprintf+0x3ca>
    11c8:	84 36       	cpi	r24, 0x64	; 100
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <vfprintf+0x204>
    11cc:	89 36       	cpi	r24, 0x69	; 105
    11ce:	51 f5       	brne	.+84     	; 0x1224 <vfprintf+0x258>
    11d0:	f5 01       	movw	r30, r10
    11d2:	17 ff       	sbrs	r17, 7
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <vfprintf+0x218>
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	a2 81       	ldd	r26, Z+2	; 0x02
    11dc:	b3 81       	ldd	r27, Z+3	; 0x03
    11de:	24 e0       	ldi	r18, 0x04	; 4
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <vfprintf+0x228>
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	aa 27       	eor	r26, r26
    11ea:	97 fd       	sbrc	r25, 7
    11ec:	a0 95       	com	r26
    11ee:	ba 2f       	mov	r27, r26
    11f0:	22 e0       	ldi	r18, 0x02	; 2
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	a2 0e       	add	r10, r18
    11f6:	b3 1e       	adc	r11, r19
    11f8:	01 2f       	mov	r16, r17
    11fa:	0f 76       	andi	r16, 0x6F	; 111
    11fc:	b7 ff       	sbrs	r27, 7
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <vfprintf+0x244>
    1200:	b0 95       	com	r27
    1202:	a0 95       	com	r26
    1204:	90 95       	com	r25
    1206:	81 95       	neg	r24
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	af 4f       	sbci	r26, 0xFF	; 255
    120c:	bf 4f       	sbci	r27, 0xFF	; 255
    120e:	00 68       	ori	r16, 0x80	; 128
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	a2 01       	movw	r20, r4
    1216:	2a e0       	ldi	r18, 0x0A	; 10
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	0e 94 6f 0a 	call	0x14de	; 0x14de <__ultoa_invert>
    121e:	d8 2e       	mov	r13, r24
    1220:	d4 18       	sub	r13, r4
    1222:	3f c0       	rjmp	.+126    	; 0x12a2 <vfprintf+0x2d6>
    1224:	85 37       	cpi	r24, 0x75	; 117
    1226:	21 f4       	brne	.+8      	; 0x1230 <vfprintf+0x264>
    1228:	1f 7e       	andi	r17, 0xEF	; 239
    122a:	2a e0       	ldi	r18, 0x0A	; 10
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	20 c0       	rjmp	.+64     	; 0x1270 <vfprintf+0x2a4>
    1230:	19 7f       	andi	r17, 0xF9	; 249
    1232:	8f 36       	cpi	r24, 0x6F	; 111
    1234:	a9 f0       	breq	.+42     	; 0x1260 <vfprintf+0x294>
    1236:	80 37       	cpi	r24, 0x70	; 112
    1238:	20 f4       	brcc	.+8      	; 0x1242 <vfprintf+0x276>
    123a:	88 35       	cpi	r24, 0x58	; 88
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x274>
    123e:	ae c0       	rjmp	.+348    	; 0x139c <vfprintf+0x3d0>
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <vfprintf+0x28c>
    1242:	80 37       	cpi	r24, 0x70	; 112
    1244:	21 f0       	breq	.+8      	; 0x124e <vfprintf+0x282>
    1246:	88 37       	cpi	r24, 0x78	; 120
    1248:	09 f0       	breq	.+2      	; 0x124c <vfprintf+0x280>
    124a:	a8 c0       	rjmp	.+336    	; 0x139c <vfprintf+0x3d0>
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <vfprintf+0x284>
    124e:	10 61       	ori	r17, 0x10	; 16
    1250:	14 ff       	sbrs	r17, 4
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <vfprintf+0x29a>
    1254:	14 60       	ori	r17, 0x04	; 4
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <vfprintf+0x29a>
    1258:	14 ff       	sbrs	r17, 4
    125a:	08 c0       	rjmp	.+16     	; 0x126c <vfprintf+0x2a0>
    125c:	16 60       	ori	r17, 0x06	; 6
    125e:	06 c0       	rjmp	.+12     	; 0x126c <vfprintf+0x2a0>
    1260:	28 e0       	ldi	r18, 0x08	; 8
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <vfprintf+0x2a4>
    1266:	20 e1       	ldi	r18, 0x10	; 16
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x2a4>
    126c:	20 e1       	ldi	r18, 0x10	; 16
    126e:	32 e0       	ldi	r19, 0x02	; 2
    1270:	f5 01       	movw	r30, r10
    1272:	17 ff       	sbrs	r17, 7
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <vfprintf+0x2b8>
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	44 e0       	ldi	r20, 0x04	; 4
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <vfprintf+0x2c4>
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	42 e0       	ldi	r20, 0x02	; 2
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	a4 0e       	add	r10, r20
    1292:	b5 1e       	adc	r11, r21
    1294:	a2 01       	movw	r20, r4
    1296:	0e 94 6f 0a 	call	0x14de	; 0x14de <__ultoa_invert>
    129a:	d8 2e       	mov	r13, r24
    129c:	d4 18       	sub	r13, r4
    129e:	01 2f       	mov	r16, r17
    12a0:	0f 77       	andi	r16, 0x7F	; 127
    12a2:	06 ff       	sbrs	r16, 6
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <vfprintf+0x2ec>
    12a6:	0e 7f       	andi	r16, 0xFE	; 254
    12a8:	df 14       	cp	r13, r15
    12aa:	30 f4       	brcc	.+12     	; 0x12b8 <vfprintf+0x2ec>
    12ac:	04 ff       	sbrs	r16, 4
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <vfprintf+0x2f0>
    12b0:	02 fd       	sbrc	r16, 2
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <vfprintf+0x2f0>
    12b4:	0f 7e       	andi	r16, 0xEF	; 239
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x2f0>
    12b8:	1d 2d       	mov	r17, r13
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <vfprintf+0x2f2>
    12bc:	1f 2d       	mov	r17, r15
    12be:	80 2f       	mov	r24, r16
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	04 ff       	sbrs	r16, 4
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <vfprintf+0x312>
    12c6:	fe 01       	movw	r30, r28
    12c8:	ed 0d       	add	r30, r13
    12ca:	f1 1d       	adc	r31, r1
    12cc:	20 81       	ld	r18, Z
    12ce:	20 33       	cpi	r18, 0x30	; 48
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <vfprintf+0x30a>
    12d2:	09 7e       	andi	r16, 0xE9	; 233
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <vfprintf+0x31c>
    12d6:	02 ff       	sbrs	r16, 2
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <vfprintf+0x31a>
    12da:	1e 5f       	subi	r17, 0xFE	; 254
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <vfprintf+0x31c>
    12de:	86 78       	andi	r24, 0x86	; 134
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <vfprintf+0x31c>
    12e6:	1f 5f       	subi	r17, 0xFF	; 255
    12e8:	80 2e       	mov	r8, r16
    12ea:	99 24       	eor	r9, r9
    12ec:	03 fd       	sbrc	r16, 3
    12ee:	12 c0       	rjmp	.+36     	; 0x1314 <vfprintf+0x348>
    12f0:	00 ff       	sbrs	r16, 0
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <vfprintf+0x342>
    12f4:	fd 2c       	mov	r15, r13
    12f6:	1e 15       	cp	r17, r14
    12f8:	50 f4       	brcc	.+20     	; 0x130e <vfprintf+0x342>
    12fa:	fe 0c       	add	r15, r14
    12fc:	f1 1a       	sub	r15, r17
    12fe:	1e 2d       	mov	r17, r14
    1300:	06 c0       	rjmp	.+12     	; 0x130e <vfprintf+0x342>
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	b3 01       	movw	r22, r6
    1308:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    130c:	1f 5f       	subi	r17, 0xFF	; 255
    130e:	1e 15       	cp	r17, r14
    1310:	c0 f3       	brcs	.-16     	; 0x1302 <vfprintf+0x336>
    1312:	04 c0       	rjmp	.+8      	; 0x131c <vfprintf+0x350>
    1314:	1e 15       	cp	r17, r14
    1316:	10 f4       	brcc	.+4      	; 0x131c <vfprintf+0x350>
    1318:	e1 1a       	sub	r14, r17
    131a:	01 c0       	rjmp	.+2      	; 0x131e <vfprintf+0x352>
    131c:	ee 24       	eor	r14, r14
    131e:	84 fe       	sbrs	r8, 4
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <vfprintf+0x374>
    1322:	80 e3       	ldi	r24, 0x30	; 48
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	b3 01       	movw	r22, r6
    1328:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    132c:	82 fe       	sbrs	r8, 2
    132e:	1f c0       	rjmp	.+62     	; 0x136e <vfprintf+0x3a2>
    1330:	81 fe       	sbrs	r8, 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <vfprintf+0x36e>
    1334:	88 e5       	ldi	r24, 0x58	; 88
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	10 c0       	rjmp	.+32     	; 0x135a <vfprintf+0x38e>
    133a:	88 e7       	ldi	r24, 0x78	; 120
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0d c0       	rjmp	.+26     	; 0x135a <vfprintf+0x38e>
    1340:	c4 01       	movw	r24, r8
    1342:	86 78       	andi	r24, 0x86	; 134
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	91 f0       	breq	.+36     	; 0x136e <vfprintf+0x3a2>
    134a:	81 fc       	sbrc	r8, 1
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0x386>
    134e:	80 e2       	ldi	r24, 0x20	; 32
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <vfprintf+0x388>
    1352:	8b e2       	ldi	r24, 0x2B	; 43
    1354:	07 fd       	sbrc	r16, 7
    1356:	8d e2       	ldi	r24, 0x2D	; 45
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	b3 01       	movw	r22, r6
    135c:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x3a2>
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	b3 01       	movw	r22, r6
    1368:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    136c:	fa 94       	dec	r15
    136e:	df 14       	cp	r13, r15
    1370:	c0 f3       	brcs	.-16     	; 0x1362 <vfprintf+0x396>
    1372:	da 94       	dec	r13
    1374:	f2 01       	movw	r30, r4
    1376:	ed 0d       	add	r30, r13
    1378:	f1 1d       	adc	r31, r1
    137a:	80 81       	ld	r24, Z
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	b3 01       	movw	r22, r6
    1380:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    1384:	dd 20       	and	r13, r13
    1386:	a9 f7       	brne	.-22     	; 0x1372 <vfprintf+0x3a6>
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <vfprintf+0x3ca>
    138a:	80 e2       	ldi	r24, 0x20	; 32
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	b3 01       	movw	r22, r6
    1390:	0e 94 43 0a 	call	0x1486	; 0x1486 <fputc>
    1394:	ea 94       	dec	r14
    1396:	ee 20       	and	r14, r14
    1398:	c1 f7       	brne	.-16     	; 0x138a <vfprintf+0x3be>
    139a:	40 ce       	rjmp	.-896    	; 0x101c <vfprintf+0x50>
    139c:	f3 01       	movw	r30, r6
    139e:	86 81       	ldd	r24, Z+6	; 0x06
    13a0:	97 81       	ldd	r25, Z+7	; 0x07
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfprintf+0x3dc>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	2d 96       	adiw	r28, 0x0d	; 13
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	7f 90       	pop	r7
    13ce:	6f 90       	pop	r6
    13d0:	5f 90       	pop	r5
    13d2:	4f 90       	pop	r4
    13d4:	3f 90       	pop	r3
    13d6:	2f 90       	pop	r2
    13d8:	08 95       	ret

000013da <strnlen_P>:
    13da:	fc 01       	movw	r30, r24
    13dc:	05 90       	lpm	r0, Z+
    13de:	61 50       	subi	r22, 0x01	; 1
    13e0:	70 40       	sbci	r23, 0x00	; 0
    13e2:	01 10       	cpse	r0, r1
    13e4:	d8 f7       	brcc	.-10     	; 0x13dc <strnlen_P+0x2>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	8e 0f       	add	r24, r30
    13ec:	9f 1f       	adc	r25, r31
    13ee:	08 95       	ret

000013f0 <strnlen>:
    13f0:	fc 01       	movw	r30, r24
    13f2:	61 50       	subi	r22, 0x01	; 1
    13f4:	70 40       	sbci	r23, 0x00	; 0
    13f6:	01 90       	ld	r0, Z+
    13f8:	01 10       	cpse	r0, r1
    13fa:	d8 f7       	brcc	.-10     	; 0x13f2 <strnlen+0x2>
    13fc:	80 95       	com	r24
    13fe:	90 95       	com	r25
    1400:	8e 0f       	add	r24, r30
    1402:	9f 1f       	adc	r25, r31
    1404:	08 95       	ret

00001406 <fgetc>:
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	20 ff       	sbrs	r18, 0
    1410:	35 c0       	rjmp	.+106    	; 0x147c <fgetc+0x76>
    1412:	26 ff       	sbrs	r18, 6
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <fgetc+0x22>
    1416:	2f 7b       	andi	r18, 0xBF	; 191
    1418:	2b 83       	std	Y+3, r18	; 0x03
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	9f 81       	ldd	r25, Y+7	; 0x07
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	9f 83       	std	Y+7, r25	; 0x07
    1422:	8e 83       	std	Y+6, r24	; 0x06
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 c0       	rjmp	.+80     	; 0x1478 <fgetc+0x72>
    1428:	22 ff       	sbrs	r18, 2
    142a:	0f c0       	rjmp	.+30     	; 0x144a <fgetc+0x44>
    142c:	e8 81       	ld	r30, Y
    142e:	f9 81       	ldd	r31, Y+1	; 0x01
    1430:	80 81       	ld	r24, Z
    1432:	99 27       	eor	r25, r25
    1434:	87 fd       	sbrc	r24, 7
    1436:	90 95       	com	r25
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	19 f4       	brne	.+6      	; 0x1442 <fgetc+0x3c>
    143c:	20 62       	ori	r18, 0x20	; 32
    143e:	2b 83       	std	Y+3, r18	; 0x03
    1440:	1d c0       	rjmp	.+58     	; 0x147c <fgetc+0x76>
    1442:	31 96       	adiw	r30, 0x01	; 1
    1444:	f9 83       	std	Y+1, r31	; 0x01
    1446:	e8 83       	st	Y, r30
    1448:	11 c0       	rjmp	.+34     	; 0x146c <fgetc+0x66>
    144a:	ea 85       	ldd	r30, Y+10	; 0x0a
    144c:	fb 85       	ldd	r31, Y+11	; 0x0b
    144e:	ce 01       	movw	r24, r28
    1450:	19 95       	eicall
    1452:	97 ff       	sbrs	r25, 7
    1454:	0b c0       	rjmp	.+22     	; 0x146c <fgetc+0x66>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	93 07       	cpc	r25, r19
    145e:	11 f4       	brne	.+4      	; 0x1464 <fgetc+0x5e>
    1460:	80 e1       	ldi	r24, 0x10	; 16
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <fgetc+0x60>
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	82 2b       	or	r24, r18
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	08 c0       	rjmp	.+16     	; 0x147c <fgetc+0x76>
    146c:	2e 81       	ldd	r18, Y+6	; 0x06
    146e:	3f 81       	ldd	r19, Y+7	; 0x07
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	3f 83       	std	Y+7, r19	; 0x07
    1476:	2e 83       	std	Y+6, r18	; 0x06
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <fgetc+0x7a>
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <fputc>:
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	8c 01       	movw	r16, r24
    1490:	eb 01       	movw	r28, r22
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	81 ff       	sbrs	r24, 1
    1496:	1b c0       	rjmp	.+54     	; 0x14ce <fputc+0x48>
    1498:	82 ff       	sbrs	r24, 2
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <fputc+0x30>
    149c:	2e 81       	ldd	r18, Y+6	; 0x06
    149e:	3f 81       	ldd	r19, Y+7	; 0x07
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	28 17       	cp	r18, r24
    14a6:	39 07       	cpc	r19, r25
    14a8:	64 f4       	brge	.+24     	; 0x14c2 <fputc+0x3c>
    14aa:	e8 81       	ld	r30, Y
    14ac:	f9 81       	ldd	r31, Y+1	; 0x01
    14ae:	01 93       	st	Z+, r16
    14b0:	f9 83       	std	Y+1, r31	; 0x01
    14b2:	e8 83       	st	Y, r30
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <fputc+0x3c>
    14b6:	e8 85       	ldd	r30, Y+8	; 0x08
    14b8:	f9 85       	ldd	r31, Y+9	; 0x09
    14ba:	80 2f       	mov	r24, r16
    14bc:	19 95       	eicall
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	31 f4       	brne	.+12     	; 0x14ce <fputc+0x48>
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	9f 81       	ldd	r25, Y+7	; 0x07
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	9f 83       	std	Y+7, r25	; 0x07
    14ca:	8e 83       	std	Y+6, r24	; 0x06
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <fputc+0x4c>
    14ce:	0f ef       	ldi	r16, 0xFF	; 255
    14d0:	1f ef       	ldi	r17, 0xFF	; 255
    14d2:	c8 01       	movw	r24, r16
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <__ultoa_invert>:
    14de:	fa 01       	movw	r30, r20
    14e0:	aa 27       	eor	r26, r26
    14e2:	28 30       	cpi	r18, 0x08	; 8
    14e4:	51 f1       	breq	.+84     	; 0x153a <__ultoa_invert+0x5c>
    14e6:	20 31       	cpi	r18, 0x10	; 16
    14e8:	81 f1       	breq	.+96     	; 0x154a <__ultoa_invert+0x6c>
    14ea:	e8 94       	clt
    14ec:	6f 93       	push	r22
    14ee:	6e 7f       	andi	r22, 0xFE	; 254
    14f0:	6e 5f       	subi	r22, 0xFE	; 254
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	8f 4f       	sbci	r24, 0xFF	; 255
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	af 4f       	sbci	r26, 0xFF	; 255
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	3e d0       	rcall	.+124    	; 0x157a <__ultoa_invert+0x9c>
    14fe:	b4 e0       	ldi	r27, 0x04	; 4
    1500:	3c d0       	rcall	.+120    	; 0x157a <__ultoa_invert+0x9c>
    1502:	67 0f       	add	r22, r23
    1504:	78 1f       	adc	r23, r24
    1506:	89 1f       	adc	r24, r25
    1508:	9a 1f       	adc	r25, r26
    150a:	a1 1d       	adc	r26, r1
    150c:	68 0f       	add	r22, r24
    150e:	79 1f       	adc	r23, r25
    1510:	8a 1f       	adc	r24, r26
    1512:	91 1d       	adc	r25, r1
    1514:	a1 1d       	adc	r26, r1
    1516:	6a 0f       	add	r22, r26
    1518:	71 1d       	adc	r23, r1
    151a:	81 1d       	adc	r24, r1
    151c:	91 1d       	adc	r25, r1
    151e:	a1 1d       	adc	r26, r1
    1520:	20 d0       	rcall	.+64     	; 0x1562 <__ultoa_invert+0x84>
    1522:	09 f4       	brne	.+2      	; 0x1526 <__ultoa_invert+0x48>
    1524:	68 94       	set
    1526:	3f 91       	pop	r19
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	26 9f       	mul	r18, r22
    152c:	11 24       	eor	r1, r1
    152e:	30 19       	sub	r19, r0
    1530:	30 5d       	subi	r19, 0xD0	; 208
    1532:	31 93       	st	Z+, r19
    1534:	de f6       	brtc	.-74     	; 0x14ec <__ultoa_invert+0xe>
    1536:	cf 01       	movw	r24, r30
    1538:	08 95       	ret
    153a:	46 2f       	mov	r20, r22
    153c:	47 70       	andi	r20, 0x07	; 7
    153e:	40 5d       	subi	r20, 0xD0	; 208
    1540:	41 93       	st	Z+, r20
    1542:	b3 e0       	ldi	r27, 0x03	; 3
    1544:	0f d0       	rcall	.+30     	; 0x1564 <__ultoa_invert+0x86>
    1546:	c9 f7       	brne	.-14     	; 0x153a <__ultoa_invert+0x5c>
    1548:	f6 cf       	rjmp	.-20     	; 0x1536 <__ultoa_invert+0x58>
    154a:	46 2f       	mov	r20, r22
    154c:	4f 70       	andi	r20, 0x0F	; 15
    154e:	40 5d       	subi	r20, 0xD0	; 208
    1550:	4a 33       	cpi	r20, 0x3A	; 58
    1552:	18 f0       	brcs	.+6      	; 0x155a <__ultoa_invert+0x7c>
    1554:	49 5d       	subi	r20, 0xD9	; 217
    1556:	31 fd       	sbrc	r19, 1
    1558:	40 52       	subi	r20, 0x20	; 32
    155a:	41 93       	st	Z+, r20
    155c:	02 d0       	rcall	.+4      	; 0x1562 <__ultoa_invert+0x84>
    155e:	a9 f7       	brne	.-22     	; 0x154a <__ultoa_invert+0x6c>
    1560:	ea cf       	rjmp	.-44     	; 0x1536 <__ultoa_invert+0x58>
    1562:	b4 e0       	ldi	r27, 0x04	; 4
    1564:	a6 95       	lsr	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	ba 95       	dec	r27
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__ultoa_invert+0x86>
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	61 05       	cpc	r22, r1
    1576:	71 05       	cpc	r23, r1
    1578:	08 95       	ret
    157a:	9b 01       	movw	r18, r22
    157c:	ac 01       	movw	r20, r24
    157e:	0a 2e       	mov	r0, r26
    1580:	06 94       	lsr	r0
    1582:	57 95       	ror	r21
    1584:	47 95       	ror	r20
    1586:	37 95       	ror	r19
    1588:	27 95       	ror	r18
    158a:	ba 95       	dec	r27
    158c:	c9 f7       	brne	.-14     	; 0x1580 <__ultoa_invert+0xa2>
    158e:	62 0f       	add	r22, r18
    1590:	73 1f       	adc	r23, r19
    1592:	84 1f       	adc	r24, r20
    1594:	95 1f       	adc	r25, r21
    1596:	a0 1d       	adc	r26, r0
    1598:	08 95       	ret

0000159a <_exit>:
    159a:	f8 94       	cli

0000159c <__stop_program>:
    159c:	ff cf       	rjmp	.-2      	; 0x159c <__stop_program>
