
pjt_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00001964  000019f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001964  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c1  008002bc  008002bc  00001ab4  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000308  00000000  00000000  00002fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c02  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001561  00000000  00000000  00005eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000170f  00000000  00000000  0000743b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  00008b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000864  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f30  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e6       	ldi	r30, 0x64	; 100
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 3b       	cpi	r26, 0xBC	; 188
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	ac eb       	ldi	r26, 0xBC	; 188
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 37       	cpi	r26, 0x7D	; 125
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 15 07 	call	0xe2a	; 0xe2a <main>
     124:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include<stdio.h>
#include<stdlib.h>
#include"link.h"

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i<=n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n%i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include"link.h"

int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for(i = 2; i<=n/2; i++)
		if((n%i) == 0)
			return 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:
void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 97 08 	call	0x112e	; 0x112e <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
			return 0;
	return 1;
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     190:	c2 e0       	ldi	r28, 0x02	; 2
     192:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if(is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
}
void app_prime(char *ap)
{
	int t=2000, n,count = 0;
	if(ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8d e1       	ldi	r24, 0x1D	; 29
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:
void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
	}
	printf("count=%d\n", count);
}
void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1){
		printf("> ");
     228:	27 e2       	ldi	r18, 0x27	; 39
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 77 05 	lds	r20, 0x0577
     248:	50 91 78 05 	lds	r21, 0x0578
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
			break;
		np = get_node();
     25c:	0e 94 c4 03 	call	0x788	; 0x788 <get_node>
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how){
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h' :insert_node_head(np); break;
     272:	0e 94 20 03 	call	0x640	; 0x640 <insert_node_head>
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't' :insert_node_tail(np); break;
     278:	0e 94 35 03 	call	0x66a	; 0x66a <insert_node_tail>
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default :insert_node_ascn(np);
     27e:	0e 94 4c 03 	call	0x698	; 0x698 <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
		}
	}
	tour_list();
     284:	0e 94 86 03 	call	0x70c	; 0x70c <tour_list>
	free_list();
     288:	0e 94 b3 03 	call	0x766	; 0x766 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <task_prime>:
void task_prime(char *ap)
{
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
     2b4:	00 97       	sbiw	r24, 0x00	; 0
     2b6:	41 f0       	breq	.+16     	; 0x2c8 <task_prime+0x24>
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 81       	ld	r18, Z
     2bc:	22 23       	and	r18, r18
     2be:	21 f0       	breq	.+8      	; 0x2c8 <task_prime+0x24>
     2c0:	0e 94 97 08 	call	0x112e	; 0x112e <atoi>
     2c4:	8c 01       	movw	r16, r24
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <task_prime+0x28>
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     2c8:	00 ed       	ldi	r16, 0xD0	; 208
     2ca:	17 e0       	ldi	r17, 0x07	; 7
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     2cc:	c2 e0       	ldi	r28, 0x02	; 2
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
	tour_list();
	free_list();
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
     2d0:	ee 24       	eor	r14, r14
     2d2:	ff 24       	eor	r15, r15
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
     2d4:	3a e2       	ldi	r19, 0x2A	; 42
     2d6:	c3 2e       	mov	r12, r19
     2d8:	32 e0       	ldi	r19, 0x02	; 2
     2da:	d3 2e       	mov	r13, r19
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     2dc:	17 c0       	rjmp	.+46     	; 0x30c <task_prime+0x68>
		if(is_prime(n)) {
     2de:	ce 01       	movw	r24, r28
     2e0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	89 f0       	breq	.+34     	; 0x30a <task_prime+0x66>
			count++;
     2e8:	08 94       	sec
     2ea:	e1 1c       	adc	r14, r1
     2ec:	f1 1c       	adc	r15, r1
			printf("%d is prime number !!!\n", n);
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <task_prime+0x4c>
     2f0:	0f 92       	push	r0
     2f2:	ed b7       	in	r30, 0x3d	; 61
     2f4:	fe b7       	in	r31, 0x3e	; 62
     2f6:	d2 82       	std	Z+2, r13	; 0x02
     2f8:	c1 82       	std	Z+1, r12	; 0x01
     2fa:	d4 83       	std	Z+4, r29	; 0x04
     2fc:	c3 83       	std	Z+3, r28	; 0x03
     2fe:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
}
void task_prime(char *ap)
{
	int t = 2000, count = 0,n;
	if (ap && *ap) t = atoi(ap);
	for(n = 2; n<= t; n++){
     30a:	21 96       	adiw	r28, 0x01	; 1
     30c:	0c 17       	cp	r16, r28
     30e:	1d 07       	cpc	r17, r29
     310:	34 f7       	brge	.-52     	; 0x2de <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is prime number !!!\n", n);
		}
	}
	printf("count=%d\n",count);
     312:	00 d0       	rcall	.+0      	; 0x314 <task_prime+0x70>
     314:	0f 92       	push	r0
     316:	8d e1       	ldi	r24, 0x1D	; 29
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	ed b7       	in	r30, 0x3d	; 61
     31c:	fe b7       	in	r31, 0x3e	; 62
     31e:	92 83       	std	Z+2, r25	; 0x02
     320:	81 83       	std	Z+1, r24	; 0x01
     322:	f4 82       	std	Z+4, r15	; 0x04
     324:	e3 82       	std	Z+3, r14	; 0x03
     326:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	08 95       	ret

00000344 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     344:	f8 94       	cli
		ch = qi_delete();
     346:	0e 94 c4 02 	call	0x588	; 0x588 <qi_delete>
		sei();
     34a:	78 94       	sei
	}while(ch == 0);
     34c:	88 23       	and	r24, r24
     34e:	d1 f3       	breq	.-12     	; 0x344 <uart_getchar>

	if (ch == ETX) return -1;
     350:	84 30       	cpi	r24, 0x04	; 4
     352:	11 f0       	breq	.+4      	; 0x358 <uart_getchar+0x14>
	else		   return ch;
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	}while(ch == 0);

	if (ch == ETX) return -1;
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	9f ef       	ldi	r25, 0xFF	; 255
	else		   return ch;
}
     35c:	08 95       	ret

0000035e <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}
int uart_putchar(char ch, FILE *stream)
{
     35e:	cf 93       	push	r28
     360:	c8 2f       	mov	r28, r24
	if(ch == '\n')
     362:	8a 30       	cpi	r24, 0x0A	; 10
     364:	19 f4       	brne	.+6      	; 0x36c <uart_putchar+0xe>
		uart_putchar('\r', stream);
     366:	8d e0       	ldi	r24, 0x0D	; 13
     368:	0e 94 af 01 	call	0x35e	; 0x35e <uart_putchar>
	cli();
     36c:	f8 94       	cli
	if(!uart_busy){
     36e:	80 91 c6 02 	lds	r24, 0x02C6
     372:	88 23       	and	r24, r24
     374:	59 f4       	brne	.+22     	; 0x38c <uart_putchar+0x2e>
		UDR0 = ch;
     376:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 c6 02 	sts	0x02C6, r24
     380:	0a c0       	rjmp	.+20     	; 0x396 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0){
			sei();
     382:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     384:	86 ef       	ldi	r24, 0xF6	; 246
     386:	8a 95       	dec	r24
     388:	f1 f7       	brne	.-4      	; 0x386 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     38a:	f8 94       	cli
	if(!uart_busy){
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0){
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <qo_insert>
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	b1 f3       	breq	.-20     	; 0x382 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     396:	78 94       	sei
	return 1;
}
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <uart_init>:

char volatile uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     3a0:	83 e4       	ldi	r24, 0x43	; 67
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	90 93 78 05 	sts	0x0578, r25
     3a8:	80 93 77 05 	sts	0x0577, r24
	stdout = &Mystdout;
     3ac:	81 e5       	ldi	r24, 0x51	; 81
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	90 93 7a 05 	sts	0x057A, r25
     3b4:	80 93 79 05 	sts	0x0579, r24
	uart_busy = 0;
     3b8:	10 92 c6 02 	sts	0x02C6, r1
	q_init();
     3bc:	0e 94 91 02 	call	0x522	; 0x522 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     3c0:	10 92 c5 00 	sts	0x00C5, r1
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     3ca:	e0 ec       	ldi	r30, 0xC0	; 192
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     3d4:	e1 ec       	ldi	r30, 0xC1	; 193
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	88 60       	ori	r24, 0x08	; 8
     3dc:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     3de:	80 81       	ld	r24, Z
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     3e4:	80 81       	ld	r24, Z
     3e6:	80 61       	ori	r24, 0x10	; 16
     3e8:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     3ea:	80 81       	ld	r24, Z
     3ec:	80 68       	ori	r24, 0x80	; 128
     3ee:	80 83       	st	Z, r24
}
     3f0:	08 95       	ret

000003f2 <uart_echo>:

	if (ch == ETX) return -1;
	else		   return ch;
}
void uart_echo(char ch)
{
     3f2:	cf 93       	push	r28
     3f4:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     3f6:	8a 30       	cpi	r24, 0x0A	; 10
     3f8:	19 f4       	brne	.+6      	; 0x400 <uart_echo+0xe>
     3fa:	8d e0       	ldi	r24, 0x0D	; 13
     3fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <uart_echo>
	if(!uart_busy){
     400:	80 91 c6 02 	lds	r24, 0x02C6
     404:	88 23       	and	r24, r24
     406:	31 f4       	brne	.+12     	; 0x414 <uart_echo+0x22>
		UDR0 = ch;
     408:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 c6 02 	sts	0x02C6, r24
     412:	03 c0       	rjmp	.+6      	; 0x41a <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <qo_insert>
}
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <__vector_25>:
ISR(USART0_RX_vect)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	0b b6       	in	r0, 0x3b	; 59
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	1f 93       	push	r17
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	2a 97       	sbiw	r28, 0x0a	; 10
     450:	de bf       	out	0x3e, r29	; 62
     452:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     454:	10 91 c6 00 	lds	r17, 0x00C6
	if(ch != ETX) {
     458:	14 30       	cpi	r17, 0x04	; 4
     45a:	31 f0       	breq	.+12     	; 0x468 <__vector_25+0x4a>
		if(ch == '\r')
     45c:	1d 30       	cpi	r17, 0x0D	; 13
     45e:	09 f4       	brne	.+2      	; 0x462 <__vector_25+0x44>
			ch = '\n';
     460:	1a e0       	ldi	r17, 0x0A	; 10
		uart_echo(ch);
     462:	81 2f       	mov	r24, r17
     464:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <uart_echo>
	}
	qi_insert(ch);
     468:	81 2f       	mov	r24, r17
     46a:	0e 94 a2 02 	call	0x544	; 0x544 <qi_insert>
	if(ch == ETX || ch == '\n'){
     46e:	14 30       	cpi	r17, 0x04	; 4
     470:	11 f0       	breq	.+4      	; 0x476 <__vector_25+0x58>
     472:	1a 30       	cpi	r17, 0x0A	; 10
     474:	71 f4       	brne	.+28     	; 0x492 <__vector_25+0x74>
		task.fun = task_cmd;
     476:	85 e7       	ldi	r24, 0x75	; 117
     478:	96 e0       	ldi	r25, 0x06	; 6
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     47e:	ce 01       	movw	r24, r28
     480:	03 96       	adiw	r24, 0x03	; 3
     482:	62 e4       	ldi	r22, 0x42	; 66
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	0e 94 c3 08 	call	0x1186	; 0x1186 <strcpy>
		task_insert(&task);
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 03 06 	call	0xc06	; 0xc06 <task_insert>
	}
}
     492:	2a 96       	adiw	r28, 0x0a	; 10
     494:	de bf       	out	0x3e, r29	; 62
     496:	cd bf       	out	0x3d, r28	; 61
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	1f 91       	pop	r17
     4b6:	0f 90       	pop	r0
     4b8:	0b be       	out	0x3b, r0	; 59
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_27>:
ISR(USART0_TX_vect)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	0b b6       	in	r0, 0x3b	; 59
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	2f 93       	push	r18
     4d4:	3f 93       	push	r19
     4d6:	4f 93       	push	r20
     4d8:	5f 93       	push	r21
     4da:	6f 93       	push	r22
     4dc:	7f 93       	push	r23
     4de:	8f 93       	push	r24
     4e0:	9f 93       	push	r25
     4e2:	af 93       	push	r26
     4e4:	bf 93       	push	r27
     4e6:	ef 93       	push	r30
     4e8:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     4ea:	0e 94 03 03 	call	0x606	; 0x606 <qo_delete>
     4ee:	88 23       	and	r24, r24
     4f0:	19 f4       	brne	.+6      	; 0x4f8 <__vector_27+0x34>
		uart_busy = 0;
     4f2:	10 92 c6 02 	sts	0x02C6, r1
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__vector_27+0x38>
	else
		UDR0 = ch;
     4f8:	80 93 c6 00 	sts	0x00C6, r24
}
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0b be       	out	0x3b, r0	; 59
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <q_init>:

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     522:	10 92 cc 03 	sts	0x03CC, r1
     526:	10 92 cb 03 	sts	0x03CB, r1
     52a:	10 92 ca 03 	sts	0x03CA, r1
     52e:	10 92 c9 03 	sts	0x03C9, r1
     532:	10 92 ce 03 	sts	0x03CE, r1
     536:	10 92 cd 03 	sts	0x03CD, r1
     53a:	10 92 c8 02 	sts	0x02C8, r1
     53e:	10 92 c7 02 	sts	0x02C7, r1
}
     542:	08 95       	ret

00000544 <qi_insert>:
int qi_insert(char ch)
{
     544:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     546:	20 91 cd 03 	lds	r18, 0x03CD
     54a:	30 91 ce 03 	lds	r19, 0x03CE
     54e:	2f 5f       	subi	r18, 0xFF	; 255
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	c9 01       	movw	r24, r18
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     55c:	9c 01       	movw	r18, r24
     55e:	80 91 c7 02 	lds	r24, 0x02C7
     562:	90 91 c8 02 	lds	r25, 0x02C8
     566:	28 17       	cp	r18, r24
     568:	39 07       	cpc	r19, r25
     56a:	59 f0       	breq	.+22     	; 0x582 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     56c:	30 93 ce 03 	sts	0x03CE, r19
     570:	20 93 cd 03 	sts	0x03CD, r18
	qi[ri] = ch;
     574:	21 53       	subi	r18, 0x31	; 49
     576:	3c 4f       	sbci	r19, 0xFC	; 252
     578:	f9 01       	movw	r30, r18
     57a:	40 83       	st	Z, r20
	return 1;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return 0;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     586:	08 95       	ret

00000588 <qi_delete>:
int qi_delete()
{
	if (ri == fi)
     588:	80 91 c7 02 	lds	r24, 0x02C7
     58c:	90 91 c8 02 	lds	r25, 0x02C8
     590:	20 91 cd 03 	lds	r18, 0x03CD
     594:	30 91 ce 03 	lds	r19, 0x03CE
     598:	28 17       	cp	r18, r24
     59a:	39 07       	cpc	r19, r25
     59c:	79 f0       	breq	.+30     	; 0x5bc <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     5a8:	90 93 c8 02 	sts	0x02C8, r25
     5ac:	80 93 c7 02 	sts	0x02C7, r24
	return qi[fi];
     5b0:	81 53       	subi	r24, 0x31	; 49
     5b2:	9c 4f       	sbci	r25, 0xFC	; 252
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	08 95       	ret
	return 1;
}
int qi_delete()
{
	if (ri == fi)
		return 0;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     5c0:	08 95       	ret

000005c2 <qo_insert>:
int qo_insert(char ch)
{
     5c2:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     5c4:	20 91 cb 03 	lds	r18, 0x03CB
     5c8:	30 91 cc 03 	lds	r19, 0x03CC
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	c9 01       	movw	r24, r18
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     5da:	9c 01       	movw	r18, r24
     5dc:	80 91 c9 03 	lds	r24, 0x03C9
     5e0:	90 91 ca 03 	lds	r25, 0x03CA
     5e4:	28 17       	cp	r18, r24
     5e6:	39 07       	cpc	r19, r25
     5e8:	59 f0       	breq	.+22     	; 0x600 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     5ea:	30 93 cc 03 	sts	0x03CC, r19
     5ee:	20 93 cb 03 	sts	0x03CB, r18
	qo[ro] = ch;
     5f2:	27 53       	subi	r18, 0x37	; 55
     5f4:	3d 4f       	sbci	r19, 0xFD	; 253
     5f6:	f9 01       	movw	r30, r18
     5f8:	40 83       	st	Z, r20
	return 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	08 95       	ret
	return qi[fi];
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     604:	08 95       	ret

00000606 <qo_delete>:
int qo_delete()
{
	if( ro == fo)
     606:	80 91 c9 03 	lds	r24, 0x03C9
     60a:	90 91 ca 03 	lds	r25, 0x03CA
     60e:	20 91 cb 03 	lds	r18, 0x03CB
     612:	30 91 cc 03 	lds	r19, 0x03CC
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	79 f0       	breq	.+30     	; 0x63a <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     626:	90 93 ca 03 	sts	0x03CA, r25
     62a:	80 93 c9 03 	sts	0x03C9, r24
	return qo[fo];
     62e:	87 53       	subi	r24, 0x37	; 55
     630:	9d 4f       	sbci	r25, 0xFD	; 253
     632:	fc 01       	movw	r30, r24
     634:	80 81       	ld	r24, Z
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret
	return 1;
}
int qo_delete()
{
	if( ro == fo)
		return 0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     63e:	08 95       	ret

00000640 <insert_node_head>:
#include<stdlib.h>
#include<stdio.h>
#include"link.h"
NODE *Head = NULL;
void insert_node_head(NODE *np)
{
     640:	fc 01       	movw	r30, r24
	if(!Head){
     642:	80 91 bc 02 	lds	r24, 0x02BC
     646:	90 91 bd 02 	lds	r25, 0x02BD
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	39 f4       	brne	.+14     	; 0x65c <insert_node_head+0x1c>
		Head = np;
     64e:	f0 93 bd 02 	sts	0x02BD, r31
     652:	e0 93 bc 02 	sts	0x02BC, r30
		np->link = NULL;
     656:	13 82       	std	Z+3, r1	; 0x03
     658:	12 82       	std	Z+2, r1	; 0x02
     65a:	08 95       	ret
	}else {
		np->link = Head;
     65c:	93 83       	std	Z+3, r25	; 0x03
     65e:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     660:	f0 93 bd 02 	sts	0x02BD, r31
     664:	e0 93 bc 02 	sts	0x02BC, r30
     668:	08 95       	ret

0000066a <insert_node_tail>:


void insert_node_tail(NODE *np)
{
	NODE *cp;
	if(!Head)
     66a:	e0 91 bc 02 	lds	r30, 0x02BC
     66e:	f0 91 bd 02 	lds	r31, 0x02BD
     672:	30 97       	sbiw	r30, 0x00	; 0
     674:	31 f4       	brne	.+12     	; 0x682 <insert_node_tail+0x18>
		Head = np;
     676:	90 93 bd 02 	sts	0x02BD, r25
     67a:	80 93 bc 02 	sts	0x02BC, r24
     67e:	08 c0       	rjmp	.+16     	; 0x690 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     680:	f9 01       	movw	r30, r18
     682:	22 81       	ldd	r18, Z+2	; 0x02
     684:	33 81       	ldd	r19, Z+3	; 0x03
     686:	21 15       	cp	r18, r1
     688:	31 05       	cpc	r19, r1
     68a:	d1 f7       	brne	.-12     	; 0x680 <insert_node_tail+0x16>
			;
		cp->link = np;
     68c:	93 83       	std	Z+3, r25	; 0x03
     68e:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     690:	fc 01       	movw	r30, r24
     692:	13 82       	std	Z+3, r1	; 0x03
     694:	12 82       	std	Z+2, r1	; 0x02
}
     696:	08 95       	ret

00000698 <insert_node_ascn>:

void insert_node_ascn(NODE *np)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	fc 01       	movw	r30, r24
	NODE *cp, *pp;
	if(!Head){
     69e:	20 91 bc 02 	lds	r18, 0x02BC
     6a2:	30 91 bd 02 	lds	r19, 0x02BD
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     6ac:	40 81       	ld	r20, Z
     6ae:	51 81       	ldd	r21, Z+1	; 0x01
     6b0:	d9 01       	movw	r26, r18
     6b2:	c0 e0       	ldi	r28, 0x00	; 0
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <insert_node_ascn+0x3e>

void insert_node_ascn(NODE *np)
{
	NODE *cp, *pp;
	if(!Head){
		Head = np;
     6b8:	90 93 bd 02 	sts	0x02BD, r25
     6bc:	80 93 bc 02 	sts	0x02BC, r24
		np->link = NULL;
     6c0:	13 82       	std	Z+3, r1	; 0x03
     6c2:	12 82       	std	Z+2, r1	; 0x02
     6c4:	1d c0       	rjmp	.+58     	; 0x700 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL; cp!= NULL && cp->data < np->data; pp = cp, cp = cp->link)
     6c6:	12 96       	adiw	r26, 0x02	; 2
     6c8:	8d 91       	ld	r24, X+
     6ca:	9c 91       	ld	r25, X
     6cc:	13 97       	sbiw	r26, 0x03	; 3
     6ce:	ed 01       	movw	r28, r26
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	39 f0       	breq	.+14     	; 0x6e2 <insert_node_ascn+0x4a>
     6d4:	dc 01       	movw	r26, r24
     6d6:	8d 91       	ld	r24, X+
     6d8:	9c 91       	ld	r25, X
     6da:	11 97       	sbiw	r26, 0x01	; 1
     6dc:	84 17       	cp	r24, r20
     6de:	95 07       	cpc	r25, r21
     6e0:	94 f3       	brlt	.-28     	; 0x6c6 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     6e2:	20 97       	sbiw	r28, 0x00	; 0
     6e4:	39 f4       	brne	.+14     	; 0x6f4 <insert_node_ascn+0x5c>
			np->link = Head;
     6e6:	33 83       	std	Z+3, r19	; 0x03
     6e8:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     6ea:	f0 93 bd 02 	sts	0x02BD, r31
     6ee:	e0 93 bc 02 	sts	0x02BC, r30
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <insert_node_ascn+0x68>
		}else{
			np->link = pp->link;
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	9b 81       	ldd	r25, Y+3	; 0x03
     6f8:	93 83       	std	Z+3, r25	; 0x03
     6fa:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     6fc:	fb 83       	std	Y+3, r31	; 0x03
     6fe:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <free_node>:
void free_node(NODE *np)
{
	free(np);
     706:	0e 94 fe 07 	call	0xffc	; 0xffc <free>
}
     70a:	08 95       	ret

0000070c <tour_list>:
void tour_list()
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
	NODE *cp;
	printf("\n");
     714:	8a e0       	ldi	r24, 0x0A	; 10
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 65 09 	call	0x12ca	; 0x12ca <putchar>
	for(cp = Head; cp!= NULL; cp = cp->link)
     71c:	c0 91 bc 02 	lds	r28, 0x02BC
     720:	d0 91 bd 02 	lds	r29, 0x02BD
		printf("-->%c ", cp->data);
     724:	0f e5       	ldi	r16, 0x5F	; 95
     726:	12 e0       	ldi	r17, 0x02	; 2
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     728:	13 c0       	rjmp	.+38     	; 0x750 <tour_list+0x44>
		printf("-->%c ", cp->data);
     72a:	00 d0       	rcall	.+0      	; 0x72c <tour_list+0x20>
     72c:	0f 92       	push	r0
     72e:	ed b7       	in	r30, 0x3d	; 61
     730:	fe b7       	in	r31, 0x3e	; 62
     732:	12 83       	std	Z+2, r17	; 0x02
     734:	01 83       	std	Z+1, r16	; 0x01
     736:	88 81       	ld	r24, Y
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	94 83       	std	Z+4, r25	; 0x04
     73c:	83 83       	std	Z+3, r24	; 0x03
     73e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
}
void tour_list()
{
	NODE *cp;
	printf("\n");
	for(cp = Head; cp!= NULL; cp = cp->link)
     742:	0a 80       	ldd	r0, Y+2	; 0x02
     744:	db 81       	ldd	r29, Y+3	; 0x03
     746:	c0 2d       	mov	r28, r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	20 97       	sbiw	r28, 0x00	; 0
     752:	59 f7       	brne	.-42     	; 0x72a <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     754:	8a e0       	ldi	r24, 0x0A	; 10
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 65 09 	call	0x12ca	; 0x12ca <putchar>
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	08 95       	ret

00000766 <free_list>:
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     766:	09 c0       	rjmp	.+18     	; 0x77a <free_list+0x14>
		cp = Head;
		Head = cp->link;
     768:	fc 01       	movw	r30, r24
     76a:	22 81       	ldd	r18, Z+2	; 0x02
     76c:	33 81       	ldd	r19, Z+3	; 0x03
     76e:	30 93 bd 02 	sts	0x02BD, r19
     772:	20 93 bc 02 	sts	0x02BC, r18
		}
	}
}
void free_node(NODE *np)
{
	free(np);
     776:	0e 94 fe 07 	call	0xffc	; 0xffc <free>
	printf("\n");
}
void free_list()
{
	NODE *cp;
	for( ; Head != NULL; ) {
     77a:	80 91 bc 02 	lds	r24, 0x02BC
     77e:	90 91 bd 02 	lds	r25, 0x02BD
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	89 f7       	brne	.-30     	; 0x768 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     786:	08 95       	ret

00000788 <get_node>:
NODE *get_node()
{
	NODE *cp;
	cp = (NODE*)malloc(sizeof(NODE));
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 68 07 	call	0xed0	; 0xed0 <malloc>
	return cp;
}
     790:	08 95       	ret

00000792 <led_init>:
#include<avr/io.h>
static uint8_t Leds;

void led_init(){
	DDRL = PORTL =0xff;
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	80 93 0b 01 	sts	0x010B, r24
     798:	80 93 0a 01 	sts	0x010A, r24
}
     79c:	08 95       	ret

0000079e <led_on_all>:
void led_on_all(){
	Leds = PORTL = 0x00;
     79e:	10 92 0b 01 	sts	0x010B, r1
     7a2:	10 92 be 02 	sts	0x02BE, r1
}
     7a6:	08 95       	ret

000007a8 <led_off_all>:
void led_off_all(){
	Leds = PORTL = 0xff;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	80 93 0b 01 	sts	0x010B, r24
     7ae:	80 93 be 02 	sts	0x02BE, r24
}
     7b2:	08 95       	ret

000007b4 <led_on>:
void led_on(uint8_t led_no){
	Leds &= (1 << led_no);
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <led_on+0xa>
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	8a 95       	dec	r24
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <led_on+0x6>
     7c2:	80 91 be 02 	lds	r24, 0x02BE
     7c6:	82 23       	and	r24, r18
     7c8:	80 93 be 02 	sts	0x02BE, r24
	PORTL = Leds;
     7cc:	80 93 0b 01 	sts	0x010B, r24
}
     7d0:	08 95       	ret

000007d2 <led_off>:
void led_off(uint8_t led_no){
	Leds |= (1 << led_no);
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <led_off+0xa>
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	8a 95       	dec	r24
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <led_off+0x6>
     7e0:	80 91 be 02 	lds	r24, 0x02BE
     7e4:	82 2b       	or	r24, r18
     7e6:	80 93 be 02 	sts	0x02BE, r24
	PORTL = Leds;
     7ea:	80 93 0b 01 	sts	0x010B, r24
}
     7ee:	08 95       	ret

000007f0 <led_set>:
void led_set(uint8_t led_mask){
	Leds = ~led_mask;
     7f0:	80 95       	com	r24
     7f2:	80 93 be 02 	sts	0x02BE, r24
	PORTL = Leds;
     7f6:	80 93 0b 01 	sts	0x010B, r24
}
     7fa:	08 95       	ret

000007fc <get_timer>:
struct timer *Thead=NULL;
struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     7fc:	8e e0       	ldi	r24, 0x0E	; 14
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 68 07 	call	0xed0	; 0xed0 <malloc>
	return(tp);
}
     804:	08 95       	ret

00000806 <insert_timer>:
		task_insert(&tp->task);
		free_timer(tp);
	}
}
void insert_timer(struct task *tskp, int ms)
{
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	f8 2e       	mov	r15, r24
     814:	e9 2e       	mov	r14, r25
     816:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     818:	0e 94 fe 03 	call	0x7fc	; 0x7fc <get_timer>
     81c:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     81e:	dc 01       	movw	r26, r24
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	ef 2d       	mov	r30, r15
     824:	fe 2d       	mov	r31, r14
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	81 50       	subi	r24, 0x01	; 1
     82e:	e1 f7       	brne	.-8      	; 0x828 <insert_timer+0x22>
	tp->time = ms;
     830:	19 83       	std	Y+1, r17	; 0x01
     832:	08 83       	st	Y, r16
	if(Thead == NULL){
     834:	e0 91 bf 02 	lds	r30, 0x02BF
     838:	f0 91 c0 02 	lds	r31, 0x02C0
     83c:	30 97       	sbiw	r30, 0x00	; 0
     83e:	29 f4       	brne	.+10     	; 0x84a <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     840:	d0 93 c0 02 	sts	0x02C0, r29
     844:	c0 93 bf 02 	sts	0x02BF, r28
     848:	2f c0       	rjmp	.+94     	; 0x8a8 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;
	if(Thead == NULL){
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	01 c0       	rjmp	.+2      	; 0x856 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     854:	fd 01       	movw	r30, r26
		total += cp->time;
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	28 0f       	add	r18, r24
     85c:	39 1f       	adc	r19, r25
		if(total >=ms)
     85e:	20 17       	cp	r18, r16
     860:	31 07       	cpc	r19, r17
     862:	34 f4       	brge	.+12     	; 0x870 <insert_timer+0x6a>
	if(Thead == NULL){
		Thead = tp, tp->link =NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp=cp->link){
     864:	a4 85       	ldd	r26, Z+12	; 0x0c
     866:	b5 85       	ldd	r27, Z+13	; 0x0d
     868:	af 01       	movw	r20, r30
     86a:	10 97       	sbiw	r26, 0x00	; 0
     86c:	99 f7       	brne	.-26     	; 0x854 <insert_timer+0x4e>
     86e:	01 c0       	rjmp	.+2      	; 0x872 <insert_timer+0x6c>
		total += cp->time;
		if(total >=ms)
     870:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp ==NULL){
     872:	41 15       	cp	r20, r1
     874:	51 05       	cpc	r21, r1
     876:	79 f4       	brne	.+30     	; 0x896 <insert_timer+0x90>
		cp->time -= tp->time;
     878:	8d 91       	ld	r24, X+
     87a:	9c 91       	ld	r25, X
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	80 1b       	sub	r24, r16
     880:	91 0b       	sbc	r25, r17
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     888:	bd 87       	std	Y+13, r27	; 0x0d
     88a:	ac 87       	std	Y+12, r26	; 0x0c
     88c:	d0 93 c0 02 	sts	0x02C0, r29
     890:	c0 93 bf 02 	sts	0x02BF, r28
     894:	24 c0       	rjmp	.+72     	; 0x8de <insert_timer+0xd8>
	}
	else if(cp==NULL){
     896:	10 97       	sbiw	r26, 0x00	; 0
     898:	51 f4       	brne	.+20     	; 0x8ae <insert_timer+0xa8>
		tp->time -= total;
     89a:	02 1b       	sub	r16, r18
     89c:	13 0b       	sbc	r17, r19
     89e:	19 83       	std	Y+1, r17	; 0x01
     8a0:	08 83       	st	Y, r16
		pp->link = tp;
     8a2:	fa 01       	movw	r30, r20
     8a4:	d5 87       	std	Z+13, r29	; 0x0d
     8a6:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     8a8:	1d 86       	std	Y+13, r1	; 0x0d
     8aa:	1c 86       	std	Y+12, r1	; 0x0c
     8ac:	18 c0       	rjmp	.+48     	; 0x8de <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     8ae:	8d 91       	ld	r24, X+
     8b0:	9c 91       	ld	r25, X
     8b2:	11 97       	sbiw	r26, 0x01	; 1
     8b4:	b9 01       	movw	r22, r18
     8b6:	68 1b       	sub	r22, r24
     8b8:	79 0b       	sbc	r23, r25
		tp->time -= total;
     8ba:	98 01       	movw	r18, r16
     8bc:	26 1b       	sub	r18, r22
     8be:	37 0b       	sbc	r19, r23
     8c0:	39 83       	std	Y+1, r19	; 0x01
     8c2:	28 83       	st	Y, r18
		cp->time -= tp->time;
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	82 1b       	sub	r24, r18
     8cc:	93 0b       	sbc	r25, r19
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	9c 93       	st	X, r25
     8d2:	8e 93       	st	-X, r24
		pp->link = tp;
     8d4:	fa 01       	movw	r30, r20
     8d6:	d5 87       	std	Z+13, r29	; 0x0d
     8d8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     8da:	bd 87       	std	Y+13, r27	; 0x0d
     8dc:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <tour_timer>:
void tour_timer()
{
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     8f8:	8a e0       	ldi	r24, 0x0A	; 10
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 65 09 	call	0x12ca	; 0x12ca <putchar>
	for(cp = Thead; cp !=NULL; cp = cp->link){
     900:	c0 91 bf 02 	lds	r28, 0x02BF
     904:	d0 91 c0 02 	lds	r29, 0x02C0
	}
}
void tour_timer()
{
	struct timer *cp;
	int total = 0;
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
     90c:	86 e6       	ldi	r24, 0x66	; 102
     90e:	e8 2e       	mov	r14, r24
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     914:	20 c0       	rjmp	.+64     	; 0x956 <tour_timer+0x6a>
		total+= cp->time;
     916:	88 81       	ld	r24, Y
     918:	99 81       	ldd	r25, Y+1	; 0x01
     91a:	08 0f       	add	r16, r24
     91c:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     91e:	00 d0       	rcall	.+0      	; 0x920 <tour_timer+0x34>
     920:	00 d0       	rcall	.+0      	; 0x922 <tour_timer+0x36>
     922:	ed b7       	in	r30, 0x3d	; 61
     924:	fe b7       	in	r31, 0x3e	; 62
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	ad b7       	in	r26, 0x3d	; 61
     92a:	be b7       	in	r27, 0x3e	; 62
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	fc 92       	st	X, r15
     930:	ee 92       	st	-X, r14
     932:	11 97       	sbiw	r26, 0x01	; 1
     934:	93 83       	std	Z+3, r25	; 0x03
     936:	82 83       	std	Z+2, r24	; 0x02
     938:	15 83       	std	Z+5, r17	; 0x05
     93a:	04 83       	std	Z+4, r16	; 0x04
     93c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead; cp !=NULL; cp = cp->link){
     940:	0c 84       	ldd	r0, Y+12	; 0x0c
     942:	dd 85       	ldd	r29, Y+13	; 0x0d
     944:	c0 2d       	mov	r28, r0
     946:	8d b7       	in	r24, 0x3d	; 61
     948:	9e b7       	in	r25, 0x3e	; 62
     94a:	06 96       	adiw	r24, 0x06	; 6
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	9e bf       	out	0x3e, r25	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	8d bf       	out	0x3d, r24	; 61
     956:	20 97       	sbiw	r28, 0x00	; 0
     958:	f1 f6       	brne	.-68     	; 0x916 <tour_timer+0x2a>
		total+= cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     95a:	8a e0       	ldi	r24, 0x0A	; 10
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 65 09 	call	0x12ca	; 0x12ca <putchar>
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <free_timer>:
void free_timer()
{
	struct timer *cp;

	if(Thead!=NULL){
     970:	80 91 bf 02 	lds	r24, 0x02BF
     974:	90 91 c0 02 	lds	r25, 0x02C0
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	49 f0       	breq	.+18     	; 0x98e <free_timer+0x1e>
		cp = Thead;
		Thead = cp->link;
     97c:	fc 01       	movw	r30, r24
     97e:	24 85       	ldd	r18, Z+12	; 0x0c
     980:	35 85       	ldd	r19, Z+13	; 0x0d
     982:	30 93 c0 02 	sts	0x02C0, r19
     986:	20 93 bf 02 	sts	0x02BF, r18
		free(cp);
     98a:	0e 94 fe 07 	call	0xffc	; 0xffc <free>
     98e:	08 95       	ret

00000990 <timer_expire>:
	tp = (struct timer *)malloc(sizeof(*tp));
	return(tp);
}

void timer_expire(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     994:	0d c0       	rjmp	.+26     	; 0x9b0 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     996:	8c 85       	ldd	r24, Y+12	; 0x0c
     998:	9d 85       	ldd	r25, Y+13	; 0x0d
     99a:	90 93 c0 02 	sts	0x02C0, r25
     99e:	80 93 bf 02 	sts	0x02BF, r24

		task_insert(&tp->task);
     9a2:	ce 01       	movw	r24, r28
     9a4:	02 96       	adiw	r24, 0x02	; 2
     9a6:	0e 94 03 06 	call	0xc06	; 0xc06 <task_insert>
		free_timer(tp);
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 94 b8 04 	call	0x970	; 0x970 <free_timer>

void timer_expire(void)
{
	struct timer *tp;

	for(;Thead != NULL && !Thead->time;){
     9b0:	c0 91 bf 02 	lds	r28, 0x02BF
     9b4:	d0 91 c0 02 	lds	r29, 0x02C0
     9b8:	20 97       	sbiw	r28, 0x00	; 0
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <timer_expire+0x34>
     9bc:	88 81       	ld	r24, Y
     9be:	99 81       	ldd	r25, Y+1	; 0x01
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	49 f3       	breq	.-46     	; 0x996 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free_timer(tp);
	}
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <app_timer>:
		Thead = cp->link;
		free(cp);
	}
}
void app_timer(char *ap)
{
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	62 97       	sbiw	r28, 0x12	; 18
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;
	while(1){
		printf(">> ");
     9e2:	01 e7       	ldi	r16, 0x71	; 113
     9e4:	12 e0       	ldi	r17, 0x02	; 2
     9e6:	0f 92       	push	r0
     9e8:	0f 92       	push	r0
     9ea:	ed b7       	in	r30, 0x3d	; 61
     9ec:	fe b7       	in	r31, 0x3e	; 62
     9ee:	12 83       	std	Z+2, r17	; 0x02
     9f0:	01 83       	std	Z+1, r16	; 0x01
     9f2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	40 91 77 05 	lds	r20, 0x0577
     9fe:	50 91 78 05 	lds	r21, 0x0578
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	68 e0       	ldi	r22, 0x08	; 8
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <fgets>
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	61 f0       	breq	.+24     	; 0xa2a <app_timer+0x60>
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 97 08 	call	0x112e	; 0x112e <atoi>
     a1a:	bc 01       	movw	r22, r24
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	29 f0       	breq	.+10     	; 0xa2a <app_timer+0x60>
			break;
		insert_timer(&tsk, ms);
     a20:	ce 01       	movw	r24, r28
     a22:	09 96       	adiw	r24, 0x09	; 9
     a24:	0e 94 03 04 	call	0x806	; 0x806 <insert_timer>
	}
     a28:	de cf       	rjmp	.-68     	; 0x9e6 <app_timer+0x1c>
	tour_timer();
     a2a:	0e 94 76 04 	call	0x8ec	; 0x8ec <tour_timer>
	free_timer();
     a2e:	0e 94 b8 04 	call	0x970	; 0x970 <free_timer>
}
     a32:	62 96       	adiw	r28, 0x12	; 18
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <app_time>:
void app_time(char *ap)
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	printf("%d : %d\n",Tcount/60,Tcount%60);
     a4c:	80 91 c4 02 	lds	r24, 0x02C4
     a50:	90 91 c5 02 	lds	r25, 0x02C5
     a54:	e0 91 c4 02 	lds	r30, 0x02C4
     a58:	f0 91 c5 02 	lds	r31, 0x02C5
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <app_time+0x16>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <app_time+0x18>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	25 e7       	ldi	r18, 0x75	; 117
     a68:	32 e0       	ldi	r19, 0x02	; 2
     a6a:	ad b7       	in	r26, 0x3d	; 61
     a6c:	be b7       	in	r27, 0x3e	; 62
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	11 97       	sbiw	r26, 0x01	; 1
     a76:	2c e3       	ldi	r18, 0x3C	; 60
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	b9 01       	movw	r22, r18
     a7c:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     a80:	7b 83       	std	Y+3, r23	; 0x03
     a82:	6a 83       	std	Y+2, r22	; 0x02
     a84:	cf 01       	movw	r24, r30
     a86:	b9 01       	movw	r22, r18
     a88:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     a8c:	9d 83       	std	Y+5, r25	; 0x05
     a8e:	8c 83       	std	Y+4, r24	; 0x04
     a90:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     a94:	8d b7       	in	r24, 0x3d	; 61
     a96:	9e b7       	in	r25, 0x3e	; 62
     a98:	06 96       	adiw	r24, 0x06	; 6
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	9e bf       	out	0x3e, r25	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	8d bf       	out	0x3d, r24	; 61
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <timer_init>:
void timer_init(){
	TCNT2 = 0;
     aaa:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     aae:	e6 eb       	ldi	r30, 0xB6	; 182
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	80 62       	ori	r24, 0x20	; 32
     ab6:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     ab8:	e0 e7       	ldi	r30, 0x70	; 112
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);
     ac2:	e1 eb       	ldi	r30, 0xB1	; 177
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     acc:	80 81       	ld	r24, Z
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
}
     ad2:	08 95       	ret

00000ad4 <__vector_15>:
ISR(TIMER2_OVF_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	0b b6       	in	r0, 0x3b	; 59
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
	if(!Thead)
     afa:	e0 91 bf 02 	lds	r30, 0x02BF
     afe:	f0 91 c0 02 	lds	r31, 0x02C0
     b02:	30 97       	sbiw	r30, 0x00	; 0
     b04:	49 f0       	breq	.+18     	; 0xb18 <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	80 83       	st	Z, r24
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	11 f4       	brne	.+4      	; 0xb18 <__vector_15+0x44>
		timer_expire();
     b14:	0e 94 c8 04 	call	0x990	; 0x990 <timer_expire>
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0b be       	out	0x3b, r0	; 59
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <task_led>:
		
	}
	printf("$ ");

}
void task_led(char *ap){
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	2a 97       	sbiw	r28, 0x0a	; 10
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static char tag;

	int ms=1024*5;

	if(ap&&*ap) ms = atoi(ap);
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	41 f0       	breq	.+16     	; 0xb6a <task_led+0x2c>
     b5a:	dc 01       	movw	r26, r24
     b5c:	2c 91       	ld	r18, X
     b5e:	22 23       	and	r18, r18
     b60:	21 f0       	breq	.+8      	; 0xb6a <task_led+0x2c>
     b62:	0e 94 97 08 	call	0x112e	; 0x112e <atoi>
     b66:	8c 01       	movw	r16, r24
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <task_led+0x30>
}
void task_led(char *ap){
	struct task task;
	static char tag;

	int ms=1024*5;
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	14 e1       	ldi	r17, 0x14	; 20

	if(ap&&*ap) ms = atoi(ap);
	if(!tag){led_on_all();tag=1;}
     b6e:	80 91 c1 02 	lds	r24, 0x02C1
     b72:	88 23       	and	r24, r24
     b74:	31 f4       	brne	.+12     	; 0xb82 <task_led+0x44>
     b76:	0e 94 cf 03 	call	0x79e	; 0x79e <led_on_all>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 c1 02 	sts	0x02C1, r24
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <task_led+0x4c>
	else {led_off_all();tag=0;}
     b82:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <led_off_all>
     b86:	10 92 c1 02 	sts	0x02C1, r1

	task.fun=(void (*)(void *))task_led;
     b8a:	8f e9       	ldi	r24, 0x9F	; 159
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     b92:	00 d0       	rcall	.+0      	; 0xb94 <task_led+0x56>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <task_led+0x58>
     b96:	ed b7       	in	r30, 0x3d	; 61
     b98:	fe b7       	in	r31, 0x3e	; 62
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	ce 01       	movw	r24, r28
     b9e:	03 96       	adiw	r24, 0x03	; 3
     ba0:	ad b7       	in	r26, 0x3d	; 61
     ba2:	be b7       	in	r27, 0x3e	; 62
     ba4:	12 96       	adiw	r26, 0x02	; 2
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	8e e7       	ldi	r24, 0x7E	; 126
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	93 83       	std	Z+3, r25	; 0x03
     bb2:	82 83       	std	Z+2, r24	; 0x02
     bb4:	15 83       	std	Z+5, r17	; 0x05
     bb6:	04 83       	std	Z+4, r16	; 0x04
     bb8:	0e 94 9a 09 	call	0x1334	; 0x1334 <sprintf>
	insert_timer(&task,ms/256);
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	36 96       	adiw	r30, 0x06	; 6
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	fe bf       	out	0x3e, r31	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	ed bf       	out	0x3d, r30	; 61
     bcc:	c8 01       	movw	r24, r16
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	0e 94 03 04 	call	0x806	; 0x806 <insert_timer>
}
     bde:	2a 96       	adiw	r28, 0x0a	; 10
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <task_init>:
#define ETX 0x04
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     bf4:	10 92 d0 04 	sts	0x04D0, r1
     bf8:	10 92 cf 04 	sts	0x04CF, r1
     bfc:	10 92 72 05 	sts	0x0572, r1
     c00:	10 92 71 05 	sts	0x0571, r1
}
     c04:	08 95       	ret

00000c06 <task_insert>:
int task_insert(struct task *tskp){
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	48 2f       	mov	r20, r24
     c0c:	e9 2f       	mov	r30, r25
	if((Task_r + 1)% MAX_TASK == Task_f)
     c0e:	80 91 cf 04 	lds	r24, 0x04CF
     c12:	90 91 d0 04 	lds	r25, 0x04D0
     c16:	c0 91 71 05 	lds	r28, 0x0571
     c1a:	d0 91 72 05 	lds	r29, 0x0572
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	20 e1       	ldi	r18, 0x10	; 16
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	b9 01       	movw	r22, r18
     c26:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     c2a:	8c 17       	cp	r24, r28
     c2c:	9d 07       	cpc	r25, r29
     c2e:	19 f1       	breq	.+70     	; 0xc76 <task_insert+0x70>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     c30:	80 91 cf 04 	lds	r24, 0x04CF
     c34:	90 91 d0 04 	lds	r25, 0x04D0
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	b9 01       	movw	r22, r18
     c3c:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     c40:	90 93 d0 04 	sts	0x04D0, r25
     c44:	80 93 cf 04 	sts	0x04CF, r24
	Task_q[Task_r] = *tskp;
     c48:	80 91 cf 04 	lds	r24, 0x04CF
     c4c:	90 91 d0 04 	lds	r25, 0x04D0
     c50:	dc 01       	movw	r26, r24
     c52:	aa 0f       	add	r26, r26
     c54:	bb 1f       	adc	r27, r27
     c56:	63 e0       	ldi	r22, 0x03	; 3
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	6a 95       	dec	r22
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <task_insert+0x52>
     c60:	a8 0f       	add	r26, r24
     c62:	b9 1f       	adc	r27, r25
     c64:	af 52       	subi	r26, 0x2F	; 47
     c66:	bb 4f       	sbci	r27, 0xFB	; 251
     c68:	c4 2f       	mov	r28, r20
     c6a:	de 2f       	mov	r29, r30
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	09 90       	ld	r0, Y+
     c70:	0d 92       	st	X+, r0
     c72:	81 50       	subi	r24, 0x01	; 1
     c74:	e1 f7       	brne	.-8      	; 0xc6e <task_insert+0x68>
	return 0;
}
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <task_delete>:
int task_delete(struct task *tskp){
     c80:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     c82:	40 91 cf 04 	lds	r20, 0x04CF
     c86:	50 91 d0 04 	lds	r21, 0x04D0
     c8a:	80 91 71 05 	lds	r24, 0x0571
     c8e:	90 91 72 05 	lds	r25, 0x0572
     c92:	48 17       	cp	r20, r24
     c94:	59 07       	cpc	r21, r25
     c96:	31 f1       	breq	.+76     	; 0xce4 <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     c98:	80 91 71 05 	lds	r24, 0x0571
     c9c:	90 91 72 05 	lds	r25, 0x0572
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	60 e1       	ldi	r22, 0x10	; 16
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
     caa:	90 93 72 05 	sts	0x0572, r25
     cae:	80 93 71 05 	sts	0x0571, r24
	*tskp = Task_q[Task_f];
     cb2:	80 91 71 05 	lds	r24, 0x0571
     cb6:	90 91 72 05 	lds	r25, 0x0572
     cba:	fc 01       	movw	r30, r24
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	a3 e0       	ldi	r26, 0x03	; 3
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	aa 95       	dec	r26
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <task_delete+0x42>
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	d9 01       	movw	r26, r18
     cd0:	ef 52       	subi	r30, 0x2F	; 47
     cd2:	fb 4f       	sbci	r31, 0xFB	; 251
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	01 90       	ld	r0, Z+
     cd8:	0d 92       	st	X+, r0
     cda:	81 50       	subi	r24, 0x01	; 1
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <task_delete+0x56>
	return 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	08 95       	ret
	Task_q[Task_r] = *tskp;
	return 0;
}
int task_delete(struct task *tskp){
	if(Task_r == Task_f)
		return 0;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     ce8:	08 95       	ret

00000cea <task_cmd>:
void task_cmd(void *arg){
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	ca 54       	subi	r28, 0x4A	; 74
     d04:	d0 40       	sbci	r29, 0x00	; 0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(gets(buf) == NULL)
     d10:	ce 01       	movw	r24, r28
     d12:	0b 96       	adiw	r24, 0x0b	; 11
     d14:	0e 94 2d 09 	call	0x125a	; 0x125a <gets>
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f4       	brne	.+2      	; 0xd1e <task_cmd+0x34>
     d1c:	68 c0       	rjmp	.+208    	; 0xdee <task_cmd+0x104>
	{	printf("$ "); return ;}

	cp0 = strtok(buf, " \t\n\r");
     d1e:	ce 01       	movw	r24, r28
     d20:	0b 96       	adiw	r24, 0x0b	; 11
     d22:	64 e8       	ldi	r22, 0x84	; 132
     d24:	72 e0       	ldi	r23, 0x02	; 2
     d26:	0e 94 b5 08 	call	0x116a	; 0x116a <strtok>
     d2a:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	64 e8       	ldi	r22, 0x84	; 132
     d32:	72 e0       	ldi	r23, 0x02	; 2
     d34:	0e 94 b5 08 	call	0x116a	; 0x116a <strtok>
     d38:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	64 e8       	ldi	r22, 0x84	; 132
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	0e 94 b5 08 	call	0x116a	; 0x116a <strtok>
     d46:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	64 e8       	ldi	r22, 0x84	; 132
     d4e:	72 e0       	ldi	r23, 0x02	; 2
     d50:	0e 94 b5 08 	call	0x116a	; 0x116a <strtok>
     d54:	6c 01       	movw	r12, r24

	if(cp0==NULL){
     d56:	01 15       	cp	r16, r1
     d58:	11 05       	cpc	r17, r1
     d5a:	19 f4       	brne	.+6      	; 0xd62 <task_cmd+0x78>
		printf("!!!-111\n");
     d5c:	89 e8       	ldi	r24, 0x89	; 137
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	44 c0       	rjmp	.+136    	; 0xdea <task_cmd+0x100>
		printf("$ "); return ;
	}
	if(!strcmp(cp0, "prime")){
     d62:	c8 01       	movw	r24, r16
     d64:	61 e9       	ldi	r22, 0x91	; 145
     d66:	72 e0       	ldi	r23, 0x02	; 2
     d68:	0e 94 ba 08 	call	0x1174	; 0x1174 <strcmp>
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	39 f4       	brne	.+14     	; 0xd7e <task_cmd+0x94>
		task_prime(cp1);
     d70:	c7 01       	movw	r24, r14
     d72:	0e 94 52 01 	call	0x2a4	; 0x2a4 <task_prime>
		task_led(cp1);
     d76:	c7 01       	movw	r24, r14
     d78:	0e 94 9f 05 	call	0xb3e	; 0xb3e <task_led>
     d7c:	38 c0       	rjmp	.+112    	; 0xdee <task_cmd+0x104>
	}
	else if(!strcmp(cp0, "timer")) {
     d7e:	c8 01       	movw	r24, r16
     d80:	67 e9       	ldi	r22, 0x97	; 151
     d82:	72 e0       	ldi	r23, 0x02	; 2
     d84:	0e 94 ba 08 	call	0x1174	; 0x1174 <strcmp>
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	69 f5       	brne	.+90     	; 0xde6 <task_cmd+0xfc>
		if(cp1 == NULL){
     d8c:	e1 14       	cp	r14, r1
     d8e:	f1 04       	cpc	r15, r1
     d90:	19 f4       	brne	.+6      	; 0xd98 <task_cmd+0xae>
			printf("!!!-222\n");
     d92:	8d e9       	ldi	r24, 0x9D	; 157
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	29 c0       	rjmp	.+82     	; 0xdea <task_cmd+0x100>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     d98:	c7 01       	movw	r24, r14
     d9a:	0e 94 97 08 	call	0x112e	; 0x112e <atoi>
     d9e:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")){
     da0:	c5 01       	movw	r24, r10
     da2:	61 e9       	ldi	r22, 0x91	; 145
     da4:	72 e0       	ldi	r23, 0x02	; 2
     da6:	0e 94 ba 08 	call	0x1174	; 0x1174 <strcmp>
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	c9 f4       	brne	.+50     	; 0xde0 <task_cmd+0xf6>
			task.fun = (void (*)(void *))task_prime;
     dae:	82 e5       	ldi	r24, 0x52	; 82
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
			//task_led(cp3);
			if(cp3) strcpy(task.arg, cp3);
     db6:	ce 01       	movw	r24, r28
     db8:	03 96       	adiw	r24, 0x03	; 3
     dba:	c1 14       	cp	r12, r1
     dbc:	d1 04       	cpc	r13, r1
     dbe:	11 f0       	breq	.+4      	; 0xdc4 <task_cmd+0xda>
     dc0:	b6 01       	movw	r22, r12
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <task_cmd+0xde>
			else strcpy(task.arg, "");
     dc4:	65 ea       	ldi	r22, 0xA5	; 165
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	0e 94 c3 08 	call	0x1186	; 0x1186 <strcpy>
		if(cp1 == NULL){
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     dcc:	c8 01       	movw	r24, r16
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	0e 94 41 07 	call	0xe82	; 0xe82 <__divmodhi4>
		if(!strcmp(cp2, "prime")){
			task.fun = (void (*)(void *))task_prime;
			//task_led(cp3);
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			insert_timer(&task,ms);
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 03 04 	call	0x806	; 0x806 <insert_timer>
     dde:	07 c0       	rjmp	.+14     	; 0xdee <task_cmd+0x104>
		}
		else printf("!!!-333\n");	
     de0:	86 ea       	ldi	r24, 0xA6	; 166
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	02 c0       	rjmp	.+4      	; 0xdea <task_cmd+0x100>
	}
	else{
	 	printf("!!!-444\n");
     de6:	8e ea       	ldi	r24, 0xAE	; 174
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <puts>
		
	}
	printf("$ ");
     dee:	0f 92       	push	r0
     df0:	0f 92       	push	r0
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	ed b7       	in	r30, 0x3d	; 61
     df8:	fe b7       	in	r31, 0x3e	; 62
     dfa:	92 83       	std	Z+2, r25	; 0x02
     dfc:	81 83       	std	Z+1, r24	; 0x01
     dfe:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0

}
     e06:	c6 5b       	subi	r28, 0xB6	; 182
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	08 95       	ret

00000e2a <main>:
#include"task.h"
#include"uart.h"
#include"led.h"

int main()
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	2a 97       	sbiw	r28, 0x0a	; 10
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	uart_init();
     e3e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <uart_init>
	task_init();
     e42:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <task_init>
	timer_init();
     e46:	0e 94 55 05 	call	0xaaa	; 0xaaa <timer_init>
	led_init();
     e4a:	0e 94 c9 03 	call	0x792	; 0x792 <led_init>

	printf("$ ");
     e4e:	0f 92       	push	r0
     e50:	0f 92       	push	r0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	ed b7       	in	r30, 0x3d	; 61
     e58:	fe b7       	in	r31, 0x3e	; 62
     e5a:	92 83       	std	Z+2, r25	; 0x02
     e5c:	81 83       	std	Z+1, r24	; 0x01
     e5e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <printf>
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0

	while(1) {
		cli();
     e66:	f8 94       	cli
		tag = task_delete(&task);
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	0e 94 40 06 	call	0xc80	; 0xc80 <task_delete>
		sei();
     e70:	78 94       	sei
		if(tag)
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	c1 f3       	breq	.-16     	; 0xe66 <main+0x3c>
			(*(task.fun))(task.arg);
     e76:	e9 81       	ldd	r30, Y+1	; 0x01
     e78:	fa 81       	ldd	r31, Y+2	; 0x02
     e7a:	ce 01       	movw	r24, r28
     e7c:	03 96       	adiw	r24, 0x03	; 3
     e7e:	19 95       	eicall
     e80:	f2 cf       	rjmp	.-28     	; 0xe66 <main+0x3c>

00000e82 <__divmodhi4>:
     e82:	97 fb       	bst	r25, 7
     e84:	09 2e       	mov	r0, r25
     e86:	07 26       	eor	r0, r23
     e88:	0a d0       	rcall	.+20     	; 0xe9e <__divmodhi4_neg1>
     e8a:	77 fd       	sbrc	r23, 7
     e8c:	04 d0       	rcall	.+8      	; 0xe96 <__divmodhi4_neg2>
     e8e:	0c d0       	rcall	.+24     	; 0xea8 <__udivmodhi4>
     e90:	06 d0       	rcall	.+12     	; 0xe9e <__divmodhi4_neg1>
     e92:	00 20       	and	r0, r0
     e94:	1a f4       	brpl	.+6      	; 0xe9c <__divmodhi4_exit>

00000e96 <__divmodhi4_neg2>:
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e9c <__divmodhi4_exit>:
     e9c:	08 95       	ret

00000e9e <__divmodhi4_neg1>:
     e9e:	f6 f7       	brtc	.-4      	; 0xe9c <__divmodhi4_exit>
     ea0:	90 95       	com	r25
     ea2:	81 95       	neg	r24
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	08 95       	ret

00000ea8 <__udivmodhi4>:
     ea8:	aa 1b       	sub	r26, r26
     eaa:	bb 1b       	sub	r27, r27
     eac:	51 e1       	ldi	r21, 0x11	; 17
     eae:	07 c0       	rjmp	.+14     	; 0xebe <__udivmodhi4_ep>

00000eb0 <__udivmodhi4_loop>:
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	a6 17       	cp	r26, r22
     eb6:	b7 07       	cpc	r27, r23
     eb8:	10 f0       	brcs	.+4      	; 0xebe <__udivmodhi4_ep>
     eba:	a6 1b       	sub	r26, r22
     ebc:	b7 0b       	sbc	r27, r23

00000ebe <__udivmodhi4_ep>:
     ebe:	88 1f       	adc	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	5a 95       	dec	r21
     ec4:	a9 f7       	brne	.-22     	; 0xeb0 <__udivmodhi4_loop>
     ec6:	80 95       	com	r24
     ec8:	90 95       	com	r25
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	08 95       	ret

00000ed0 <malloc>:
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ac 01       	movw	r20, r24
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	10 f4       	brcc	.+4      	; 0xee0 <malloc+0x10>
     edc:	42 e0       	ldi	r20, 0x02	; 2
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	e0 91 75 05 	lds	r30, 0x0575
     ee4:	f0 91 76 05 	lds	r31, 0x0576
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	24 c0       	rjmp	.+72     	; 0xf3a <malloc+0x6a>
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	84 17       	cp	r24, r20
     ef8:	95 07       	cpc	r25, r21
     efa:	d0 f0       	brcs	.+52     	; 0xf30 <malloc+0x60>
     efc:	84 17       	cp	r24, r20
     efe:	95 07       	cpc	r25, r21
     f00:	71 f4       	brne	.+28     	; 0xf1e <malloc+0x4e>
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	10 97       	sbiw	r26, 0x00	; 0
     f08:	29 f0       	breq	.+10     	; 0xf14 <malloc+0x44>
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	9c 93       	st	X, r25
     f0e:	8e 93       	st	-X, r24
     f10:	12 97       	sbiw	r26, 0x02	; 2
     f12:	2c c0       	rjmp	.+88     	; 0xf6c <malloc+0x9c>
     f14:	90 93 76 05 	sts	0x0576, r25
     f18:	80 93 75 05 	sts	0x0575, r24
     f1c:	27 c0       	rjmp	.+78     	; 0xf6c <malloc+0x9c>
     f1e:	21 15       	cp	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	19 f0       	breq	.+6      	; 0xf2a <malloc+0x5a>
     f24:	82 17       	cp	r24, r18
     f26:	93 07       	cpc	r25, r19
     f28:	18 f4       	brcc	.+6      	; 0xf30 <malloc+0x60>
     f2a:	9c 01       	movw	r18, r24
     f2c:	bd 01       	movw	r22, r26
     f2e:	ef 01       	movw	r28, r30
     f30:	92 81       	ldd	r25, Z+2	; 0x02
     f32:	83 81       	ldd	r24, Z+3	; 0x03
     f34:	df 01       	movw	r26, r30
     f36:	e9 2f       	mov	r30, r25
     f38:	f8 2f       	mov	r31, r24
     f3a:	30 97       	sbiw	r30, 0x00	; 0
     f3c:	d1 f6       	brne	.-76     	; 0xef2 <malloc+0x22>
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	f9 f0       	breq	.+62     	; 0xf82 <malloc+0xb2>
     f44:	c9 01       	movw	r24, r18
     f46:	84 1b       	sub	r24, r20
     f48:	95 0b       	sbc	r25, r21
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	91 05       	cpc	r25, r1
     f4e:	80 f4       	brcc	.+32     	; 0xf70 <malloc+0xa0>
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	9b 81       	ldd	r25, Y+3	; 0x03
     f54:	61 15       	cp	r22, r1
     f56:	71 05       	cpc	r23, r1
     f58:	21 f0       	breq	.+8      	; 0xf62 <malloc+0x92>
     f5a:	fb 01       	movw	r30, r22
     f5c:	93 83       	std	Z+3, r25	; 0x03
     f5e:	82 83       	std	Z+2, r24	; 0x02
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <malloc+0x9a>
     f62:	90 93 76 05 	sts	0x0576, r25
     f66:	80 93 75 05 	sts	0x0575, r24
     f6a:	fe 01       	movw	r30, r28
     f6c:	32 96       	adiw	r30, 0x02	; 2
     f6e:	42 c0       	rjmp	.+132    	; 0xff4 <malloc+0x124>
     f70:	fe 01       	movw	r30, r28
     f72:	e8 0f       	add	r30, r24
     f74:	f9 1f       	adc	r31, r25
     f76:	41 93       	st	Z+, r20
     f78:	51 93       	st	Z+, r21
     f7a:	02 97       	sbiw	r24, 0x02	; 2
     f7c:	99 83       	std	Y+1, r25	; 0x01
     f7e:	88 83       	st	Y, r24
     f80:	39 c0       	rjmp	.+114    	; 0xff4 <malloc+0x124>
     f82:	80 91 73 05 	lds	r24, 0x0573
     f86:	90 91 74 05 	lds	r25, 0x0574
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	41 f4       	brne	.+16     	; 0xf9e <malloc+0xce>
     f8e:	80 91 b8 02 	lds	r24, 0x02B8
     f92:	90 91 b9 02 	lds	r25, 0x02B9
     f96:	90 93 74 05 	sts	0x0574, r25
     f9a:	80 93 73 05 	sts	0x0573, r24
     f9e:	20 91 b6 02 	lds	r18, 0x02B6
     fa2:	30 91 b7 02 	lds	r19, 0x02B7
     fa6:	21 15       	cp	r18, r1
     fa8:	31 05       	cpc	r19, r1
     faa:	41 f4       	brne	.+16     	; 0xfbc <malloc+0xec>
     fac:	2d b7       	in	r18, 0x3d	; 61
     fae:	3e b7       	in	r19, 0x3e	; 62
     fb0:	80 91 ba 02 	lds	r24, 0x02BA
     fb4:	90 91 bb 02 	lds	r25, 0x02BB
     fb8:	28 1b       	sub	r18, r24
     fba:	39 0b       	sbc	r19, r25
     fbc:	e0 91 73 05 	lds	r30, 0x0573
     fc0:	f0 91 74 05 	lds	r31, 0x0574
     fc4:	e2 17       	cp	r30, r18
     fc6:	f3 07       	cpc	r31, r19
     fc8:	98 f4       	brcc	.+38     	; 0xff0 <malloc+0x120>
     fca:	2e 1b       	sub	r18, r30
     fcc:	3f 0b       	sbc	r19, r31
     fce:	24 17       	cp	r18, r20
     fd0:	35 07       	cpc	r19, r21
     fd2:	70 f0       	brcs	.+28     	; 0xff0 <malloc+0x120>
     fd4:	ca 01       	movw	r24, r20
     fd6:	02 96       	adiw	r24, 0x02	; 2
     fd8:	28 17       	cp	r18, r24
     fda:	39 07       	cpc	r19, r25
     fdc:	48 f0       	brcs	.+18     	; 0xff0 <malloc+0x120>
     fde:	8e 0f       	add	r24, r30
     fe0:	9f 1f       	adc	r25, r31
     fe2:	90 93 74 05 	sts	0x0574, r25
     fe6:	80 93 73 05 	sts	0x0573, r24
     fea:	41 93       	st	Z+, r20
     fec:	51 93       	st	Z+, r21
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <malloc+0x124>
     ff0:	e0 e0       	ldi	r30, 0x00	; 0
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	cf 01       	movw	r24, r30
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <free>:
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	9c 01       	movw	r18, r24
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f4       	brne	.+2      	; 0x100c <free+0x10>
    100a:	8c c0       	rjmp	.+280    	; 0x1124 <free+0x128>
    100c:	dc 01       	movw	r26, r24
    100e:	12 97       	sbiw	r26, 0x02	; 2
    1010:	13 96       	adiw	r26, 0x03	; 3
    1012:	1c 92       	st	X, r1
    1014:	1e 92       	st	-X, r1
    1016:	12 97       	sbiw	r26, 0x02	; 2
    1018:	60 91 75 05 	lds	r22, 0x0575
    101c:	70 91 76 05 	lds	r23, 0x0576
    1020:	61 15       	cp	r22, r1
    1022:	71 05       	cpc	r23, r1
    1024:	89 f4       	brne	.+34     	; 0x1048 <free+0x4c>
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	20 91 73 05 	lds	r18, 0x0573
    1034:	30 91 74 05 	lds	r19, 0x0574
    1038:	28 17       	cp	r18, r24
    103a:	39 07       	cpc	r19, r25
    103c:	69 f5       	brne	.+90     	; 0x1098 <free+0x9c>
    103e:	b0 93 74 05 	sts	0x0574, r27
    1042:	a0 93 73 05 	sts	0x0573, r26
    1046:	6e c0       	rjmp	.+220    	; 0x1124 <free+0x128>
    1048:	fb 01       	movw	r30, r22
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <free+0x56>
    1050:	fc 01       	movw	r30, r24
    1052:	ea 17       	cp	r30, r26
    1054:	fb 07       	cpc	r31, r27
    1056:	30 f4       	brcc	.+12     	; 0x1064 <free+0x68>
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	af 01       	movw	r20, r30
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	b9 f7       	brne	.-18     	; 0x1050 <free+0x54>
    1062:	1f c0       	rjmp	.+62     	; 0x10a2 <free+0xa6>
    1064:	e9 01       	movw	r28, r18
    1066:	22 97       	sbiw	r28, 0x02	; 2
    1068:	fb 83       	std	Y+3, r31	; 0x03
    106a:	ea 83       	std	Y+2, r30	; 0x02
    106c:	08 81       	ld	r16, Y
    106e:	19 81       	ldd	r17, Y+1	; 0x01
    1070:	c9 01       	movw	r24, r18
    1072:	80 0f       	add	r24, r16
    1074:	91 1f       	adc	r25, r17
    1076:	8e 17       	cp	r24, r30
    1078:	9f 07       	cpc	r25, r31
    107a:	59 f4       	brne	.+22     	; 0x1092 <free+0x96>
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	80 0f       	add	r24, r16
    1082:	91 1f       	adc	r25, r17
    1084:	02 96       	adiw	r24, 0x02	; 2
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	88 83       	st	Y, r24
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	41 15       	cp	r20, r1
    1094:	51 05       	cpc	r21, r1
    1096:	29 f4       	brne	.+10     	; 0x10a2 <free+0xa6>
    1098:	b0 93 76 05 	sts	0x0576, r27
    109c:	a0 93 75 05 	sts	0x0575, r26
    10a0:	41 c0       	rjmp	.+130    	; 0x1124 <free+0x128>
    10a2:	fa 01       	movw	r30, r20
    10a4:	b3 83       	std	Z+3, r27	; 0x03
    10a6:	a2 83       	std	Z+2, r26	; 0x02
    10a8:	c1 91       	ld	r28, Z+
    10aa:	d1 91       	ld	r29, Z+
    10ac:	ec 0f       	add	r30, r28
    10ae:	fd 1f       	adc	r31, r29
    10b0:	ae 17       	cp	r26, r30
    10b2:	bf 07       	cpc	r27, r31
    10b4:	81 f4       	brne	.+32     	; 0x10d6 <free+0xda>
    10b6:	f9 01       	movw	r30, r18
    10b8:	92 91       	ld	r25, -Z
    10ba:	82 91       	ld	r24, -Z
    10bc:	8c 0f       	add	r24, r28
    10be:	9d 1f       	adc	r25, r29
    10c0:	02 96       	adiw	r24, 0x02	; 2
    10c2:	da 01       	movw	r26, r20
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	13 96       	adiw	r26, 0x03	; 3
    10d0:	9c 93       	st	X, r25
    10d2:	8e 93       	st	-X, r24
    10d4:	12 97       	sbiw	r26, 0x02	; 2
    10d6:	e0 e0       	ldi	r30, 0x00	; 0
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <free+0xe4>
    10dc:	fb 01       	movw	r30, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	db 01       	movw	r26, r22
    10e2:	12 96       	adiw	r26, 0x02	; 2
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	13 97       	sbiw	r26, 0x03	; 3
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	b9 f7       	brne	.-18     	; 0x10dc <free+0xe0>
    10ee:	cb 01       	movw	r24, r22
    10f0:	02 96       	adiw	r24, 0x02	; 2
    10f2:	2d 91       	ld	r18, X+
    10f4:	3c 91       	ld	r19, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	20 91 73 05 	lds	r18, 0x0573
    1100:	30 91 74 05 	lds	r19, 0x0574
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	69 f4       	brne	.+26     	; 0x1124 <free+0x128>
    110a:	30 97       	sbiw	r30, 0x00	; 0
    110c:	29 f4       	brne	.+10     	; 0x1118 <free+0x11c>
    110e:	10 92 76 05 	sts	0x0576, r1
    1112:	10 92 75 05 	sts	0x0575, r1
    1116:	02 c0       	rjmp	.+4      	; 0x111c <free+0x120>
    1118:	13 82       	std	Z+3, r1	; 0x03
    111a:	12 82       	std	Z+2, r1	; 0x02
    111c:	70 93 74 05 	sts	0x0574, r23
    1120:	60 93 73 05 	sts	0x0573, r22
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <atoi>:
    112e:	fc 01       	movw	r30, r24
    1130:	88 27       	eor	r24, r24
    1132:	99 27       	eor	r25, r25
    1134:	e8 94       	clt
    1136:	21 91       	ld	r18, Z+
    1138:	20 32       	cpi	r18, 0x20	; 32
    113a:	e9 f3       	breq	.-6      	; 0x1136 <atoi+0x8>
    113c:	29 30       	cpi	r18, 0x09	; 9
    113e:	10 f0       	brcs	.+4      	; 0x1144 <atoi+0x16>
    1140:	2e 30       	cpi	r18, 0x0E	; 14
    1142:	c8 f3       	brcs	.-14     	; 0x1136 <atoi+0x8>
    1144:	2b 32       	cpi	r18, 0x2B	; 43
    1146:	41 f0       	breq	.+16     	; 0x1158 <atoi+0x2a>
    1148:	2d 32       	cpi	r18, 0x2D	; 45
    114a:	39 f4       	brne	.+14     	; 0x115a <atoi+0x2c>
    114c:	68 94       	set
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <atoi+0x2a>
    1150:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__mulhi_const_10>
    1154:	82 0f       	add	r24, r18
    1156:	91 1d       	adc	r25, r1
    1158:	21 91       	ld	r18, Z+
    115a:	20 53       	subi	r18, 0x30	; 48
    115c:	2a 30       	cpi	r18, 0x0A	; 10
    115e:	c0 f3       	brcs	.-16     	; 0x1150 <atoi+0x22>
    1160:	1e f4       	brtc	.+6      	; 0x1168 <atoi+0x3a>
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <strtok>:
    116a:	42 ec       	ldi	r20, 0xC2	; 194
    116c:	52 e0       	ldi	r21, 0x02	; 2
    116e:	0e 94 ca 08 	call	0x1194	; 0x1194 <strtok_r>
    1172:	08 95       	ret

00001174 <strcmp>:
    1174:	fb 01       	movw	r30, r22
    1176:	dc 01       	movw	r26, r24
    1178:	8d 91       	ld	r24, X+
    117a:	01 90       	ld	r0, Z+
    117c:	80 19       	sub	r24, r0
    117e:	01 10       	cpse	r0, r1
    1180:	d9 f3       	breq	.-10     	; 0x1178 <strcmp+0x4>
    1182:	99 0b       	sbc	r25, r25
    1184:	08 95       	ret

00001186 <strcpy>:
    1186:	fb 01       	movw	r30, r22
    1188:	dc 01       	movw	r26, r24
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	00 20       	and	r0, r0
    1190:	e1 f7       	brne	.-8      	; 0x118a <strcpy+0x4>
    1192:	08 95       	ret

00001194 <strtok_r>:
    1194:	fa 01       	movw	r30, r20
    1196:	a1 91       	ld	r26, Z+
    1198:	b0 81       	ld	r27, Z
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	19 f4       	brne	.+6      	; 0x11a4 <strtok_r+0x10>
    119e:	10 97       	sbiw	r26, 0x00	; 0
    11a0:	e1 f0       	breq	.+56     	; 0x11da <strtok_r+0x46>
    11a2:	cd 01       	movw	r24, r26
    11a4:	dc 01       	movw	r26, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0d 90       	ld	r0, X+
    11aa:	00 20       	and	r0, r0
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <strtok_r+0x1e>
    11ae:	c0 01       	movw	r24, r0
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <strtok_r+0x44>
    11b2:	fb 01       	movw	r30, r22
    11b4:	21 91       	ld	r18, Z+
    11b6:	22 23       	and	r18, r18
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <strtok_r+0x2c>
    11ba:	20 15       	cp	r18, r0
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <strtok_r+0x20>
    11be:	f3 cf       	rjmp	.-26     	; 0x11a6 <strtok_r+0x12>
    11c0:	fb 01       	movw	r30, r22
    11c2:	21 91       	ld	r18, Z+
    11c4:	20 15       	cp	r18, r0
    11c6:	19 f4       	brne	.+6      	; 0x11ce <strtok_r+0x3a>
    11c8:	1e 92       	st	-X, r1
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <strtok_r+0x46>
    11ce:	22 23       	and	r18, r18
    11d0:	c1 f7       	brne	.-16     	; 0x11c2 <strtok_r+0x2e>
    11d2:	0d 90       	ld	r0, X+
    11d4:	00 20       	and	r0, r0
    11d6:	a1 f7       	brne	.-24     	; 0x11c0 <strtok_r+0x2c>
    11d8:	d0 01       	movw	r26, r0
    11da:	fa 01       	movw	r30, r20
    11dc:	a1 93       	st	Z+, r26
    11de:	b0 83       	st	Z, r27
    11e0:	08 95       	ret

000011e2 <__mulhi_const_10>:
    11e2:	7a e0       	ldi	r23, 0x0A	; 10
    11e4:	97 9f       	mul	r25, r23
    11e6:	90 2d       	mov	r25, r0
    11e8:	87 9f       	mul	r24, r23
    11ea:	80 2d       	mov	r24, r0
    11ec:	91 0d       	add	r25, r1
    11ee:	11 24       	eor	r1, r1
    11f0:	08 95       	ret

000011f2 <fgets>:
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	8c 01       	movw	r16, r24
    1204:	6a 01       	movw	r12, r20
    1206:	fa 01       	movw	r30, r20
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	80 ff       	sbrs	r24, 0
    120c:	1a c0       	rjmp	.+52     	; 0x1242 <fgets+0x50>
    120e:	16 16       	cp	r1, r22
    1210:	17 06       	cpc	r1, r23
    1212:	bc f4       	brge	.+46     	; 0x1242 <fgets+0x50>
    1214:	7b 01       	movw	r14, r22
    1216:	e8 01       	movw	r28, r16
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <fgets+0x44>
    121a:	c6 01       	movw	r24, r12
    121c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <fgetc>
    1220:	ff ef       	ldi	r31, 0xFF	; 255
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	9f 07       	cpc	r25, r31
    1226:	69 f0       	breq	.+26     	; 0x1242 <fgets+0x50>
    1228:	89 93       	st	Y+, r24
    122a:	08 94       	sec
    122c:	e1 08       	sbc	r14, r1
    122e:	f1 08       	sbc	r15, r1
    1230:	8a 30       	cpi	r24, 0x0A	; 10
    1232:	91 05       	cpc	r25, r1
    1234:	21 f0       	breq	.+8      	; 0x123e <fgets+0x4c>
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	e2 16       	cp	r14, r18
    123a:	f1 04       	cpc	r15, r1
    123c:	71 f7       	brne	.-36     	; 0x121a <fgets+0x28>
    123e:	18 82       	st	Y, r1
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <fgets+0x54>
    1242:	00 e0       	ldi	r16, 0x00	; 0
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	c8 01       	movw	r24, r16
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	08 95       	ret

0000125a <gets>:
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	8c 01       	movw	r16, r24
    1264:	e0 91 77 05 	lds	r30, 0x0577
    1268:	f0 91 78 05 	lds	r31, 0x0578
    126c:	83 81       	ldd	r24, Z+3	; 0x03
    126e:	80 ff       	sbrs	r24, 0
    1270:	12 c0       	rjmp	.+36     	; 0x1296 <gets+0x3c>
    1272:	e8 01       	movw	r28, r16
    1274:	80 91 77 05 	lds	r24, 0x0577
    1278:	90 91 78 05 	lds	r25, 0x0578
    127c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <fgetc>
    1280:	2f ef       	ldi	r18, 0xFF	; 255
    1282:	8f 3f       	cpi	r24, 0xFF	; 255
    1284:	92 07       	cpc	r25, r18
    1286:	39 f0       	breq	.+14     	; 0x1296 <gets+0x3c>
    1288:	89 93       	st	Y+, r24
    128a:	8a 30       	cpi	r24, 0x0A	; 10
    128c:	91 05       	cpc	r25, r1
    128e:	91 f7       	brne	.-28     	; 0x1274 <gets+0x1a>
    1290:	21 97       	sbiw	r28, 0x01	; 1
    1292:	18 82       	st	Y, r1
    1294:	02 c0       	rjmp	.+4      	; 0x129a <gets+0x40>
    1296:	00 e0       	ldi	r16, 0x00	; 0
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	c8 01       	movw	r24, r16
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <printf>:
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	fe 01       	movw	r30, r28
    12b0:	36 96       	adiw	r30, 0x06	; 6
    12b2:	61 91       	ld	r22, Z+
    12b4:	71 91       	ld	r23, Z+
    12b6:	80 91 79 05 	lds	r24, 0x0579
    12ba:	90 91 7a 05 	lds	r25, 0x057A
    12be:	af 01       	movw	r20, r30
    12c0:	0e 94 c9 09 	call	0x1392	; 0x1392 <vfprintf>
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <putchar>:
    12ca:	60 91 79 05 	lds	r22, 0x0579
    12ce:	70 91 7a 05 	lds	r23, 0x057A
    12d2:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    12d6:	08 95       	ret

000012d8 <puts>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	8c 01       	movw	r16, r24
    12e2:	e0 91 79 05 	lds	r30, 0x0579
    12e6:	f0 91 7a 05 	lds	r31, 0x057A
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 ff       	sbrs	r24, 1
    12ee:	1a c0       	rjmp	.+52     	; 0x1324 <puts+0x4c>
    12f0:	c0 e0       	ldi	r28, 0x00	; 0
    12f2:	d0 e0       	ldi	r29, 0x00	; 0
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <puts+0x28>
    12f6:	19 95       	eicall
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	11 f0       	breq	.+4      	; 0x1300 <puts+0x28>
    12fc:	cf ef       	ldi	r28, 0xFF	; 255
    12fe:	df ef       	ldi	r29, 0xFF	; 255
    1300:	f8 01       	movw	r30, r16
    1302:	81 91       	ld	r24, Z+
    1304:	8f 01       	movw	r16, r30
    1306:	60 91 79 05 	lds	r22, 0x0579
    130a:	70 91 7a 05 	lds	r23, 0x057A
    130e:	db 01       	movw	r26, r22
    1310:	18 96       	adiw	r26, 0x08	; 8
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	19 97       	sbiw	r26, 0x09	; 9
    1318:	88 23       	and	r24, r24
    131a:	69 f7       	brne	.-38     	; 0x12f6 <puts+0x1e>
    131c:	8a e0       	ldi	r24, 0x0A	; 10
    131e:	19 95       	eicall
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	11 f0       	breq	.+4      	; 0x1328 <puts+0x50>
    1324:	cf ef       	ldi	r28, 0xFF	; 255
    1326:	df ef       	ldi	r29, 0xFF	; 255
    1328:	ce 01       	movw	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <sprintf>:
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2e 97       	sbiw	r28, 0x0e	; 14
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	0e 89       	ldd	r16, Y+22	; 0x16
    134e:	1f 89       	ldd	r17, Y+23	; 0x17
    1350:	86 e0       	ldi	r24, 0x06	; 6
    1352:	8c 83       	std	Y+4, r24	; 0x04
    1354:	1a 83       	std	Y+2, r17	; 0x02
    1356:	09 83       	std	Y+1, r16	; 0x01
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	9f e7       	ldi	r25, 0x7F	; 127
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	ae 01       	movw	r20, r28
    1362:	46 5e       	subi	r20, 0xE6	; 230
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	68 8d       	ldd	r22, Y+24	; 0x18
    136c:	79 8d       	ldd	r23, Y+25	; 0x19
    136e:	0e 94 c9 09 	call	0x1392	; 0x1392 <vfprintf>
    1372:	ef 81       	ldd	r30, Y+7	; 0x07
    1374:	f8 85       	ldd	r31, Y+8	; 0x08
    1376:	e0 0f       	add	r30, r16
    1378:	f1 1f       	adc	r31, r17
    137a:	10 82       	st	Z, r1
    137c:	2e 96       	adiw	r28, 0x0e	; 14
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <vfprintf>:
    1392:	2f 92       	push	r2
    1394:	3f 92       	push	r3
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2d 97       	sbiw	r28, 0x0d	; 13
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	3c 01       	movw	r6, r24
    13c8:	7d 87       	std	Y+13, r23	; 0x0d
    13ca:	6c 87       	std	Y+12, r22	; 0x0c
    13cc:	5a 01       	movw	r10, r20
    13ce:	fc 01       	movw	r30, r24
    13d0:	17 82       	std	Z+7, r1	; 0x07
    13d2:	16 82       	std	Z+6, r1	; 0x06
    13d4:	83 81       	ldd	r24, Z+3	; 0x03
    13d6:	81 ff       	sbrs	r24, 1
    13d8:	c8 c1       	rjmp	.+912    	; 0x176a <vfprintf+0x3d8>
    13da:	2e 01       	movw	r4, r28
    13dc:	08 94       	sec
    13de:	41 1c       	adc	r4, r1
    13e0:	51 1c       	adc	r5, r1
    13e2:	f3 01       	movw	r30, r6
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    13e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    13ea:	93 fd       	sbrc	r25, 3
    13ec:	85 91       	lpm	r24, Z+
    13ee:	93 ff       	sbrs	r25, 3
    13f0:	81 91       	ld	r24, Z+
    13f2:	fd 87       	std	Y+13, r31	; 0x0d
    13f4:	ec 87       	std	Y+12, r30	; 0x0c
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <vfprintf+0x6a>
    13fa:	b3 c1       	rjmp	.+870    	; 0x1762 <vfprintf+0x3d0>
    13fc:	85 32       	cpi	r24, 0x25	; 37
    13fe:	41 f4       	brne	.+16     	; 0x1410 <vfprintf+0x7e>
    1400:	93 fd       	sbrc	r25, 3
    1402:	85 91       	lpm	r24, Z+
    1404:	93 ff       	sbrs	r25, 3
    1406:	81 91       	ld	r24, Z+
    1408:	fd 87       	std	Y+13, r31	; 0x0d
    140a:	ec 87       	std	Y+12, r30	; 0x0c
    140c:	85 32       	cpi	r24, 0x25	; 37
    140e:	29 f4       	brne	.+10     	; 0x141a <vfprintf+0x88>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	b3 01       	movw	r22, r6
    1414:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    1418:	e4 cf       	rjmp	.-56     	; 0x13e2 <vfprintf+0x50>
    141a:	ff 24       	eor	r15, r15
    141c:	ee 24       	eor	r14, r14
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	10 32       	cpi	r17, 0x20	; 32
    1422:	b0 f4       	brcc	.+44     	; 0x1450 <vfprintf+0xbe>
    1424:	8b 32       	cpi	r24, 0x2B	; 43
    1426:	69 f0       	breq	.+26     	; 0x1442 <vfprintf+0xb0>
    1428:	8c 32       	cpi	r24, 0x2C	; 44
    142a:	28 f4       	brcc	.+10     	; 0x1436 <vfprintf+0xa4>
    142c:	80 32       	cpi	r24, 0x20	; 32
    142e:	51 f0       	breq	.+20     	; 0x1444 <vfprintf+0xb2>
    1430:	83 32       	cpi	r24, 0x23	; 35
    1432:	71 f4       	brne	.+28     	; 0x1450 <vfprintf+0xbe>
    1434:	0b c0       	rjmp	.+22     	; 0x144c <vfprintf+0xba>
    1436:	8d 32       	cpi	r24, 0x2D	; 45
    1438:	39 f0       	breq	.+14     	; 0x1448 <vfprintf+0xb6>
    143a:	80 33       	cpi	r24, 0x30	; 48
    143c:	49 f4       	brne	.+18     	; 0x1450 <vfprintf+0xbe>
    143e:	11 60       	ori	r17, 0x01	; 1
    1440:	2c c0       	rjmp	.+88     	; 0x149a <vfprintf+0x108>
    1442:	12 60       	ori	r17, 0x02	; 2
    1444:	14 60       	ori	r17, 0x04	; 4
    1446:	29 c0       	rjmp	.+82     	; 0x149a <vfprintf+0x108>
    1448:	18 60       	ori	r17, 0x08	; 8
    144a:	27 c0       	rjmp	.+78     	; 0x149a <vfprintf+0x108>
    144c:	10 61       	ori	r17, 0x10	; 16
    144e:	25 c0       	rjmp	.+74     	; 0x149a <vfprintf+0x108>
    1450:	17 fd       	sbrc	r17, 7
    1452:	2e c0       	rjmp	.+92     	; 0x14b0 <vfprintf+0x11e>
    1454:	28 2f       	mov	r18, r24
    1456:	20 53       	subi	r18, 0x30	; 48
    1458:	2a 30       	cpi	r18, 0x0A	; 10
    145a:	98 f4       	brcc	.+38     	; 0x1482 <vfprintf+0xf0>
    145c:	16 ff       	sbrs	r17, 6
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <vfprintf+0xde>
    1460:	8f 2d       	mov	r24, r15
    1462:	88 0f       	add	r24, r24
    1464:	f8 2e       	mov	r15, r24
    1466:	ff 0c       	add	r15, r15
    1468:	ff 0c       	add	r15, r15
    146a:	f8 0e       	add	r15, r24
    146c:	f2 0e       	add	r15, r18
    146e:	15 c0       	rjmp	.+42     	; 0x149a <vfprintf+0x108>
    1470:	8e 2d       	mov	r24, r14
    1472:	88 0f       	add	r24, r24
    1474:	e8 2e       	mov	r14, r24
    1476:	ee 0c       	add	r14, r14
    1478:	ee 0c       	add	r14, r14
    147a:	e8 0e       	add	r14, r24
    147c:	e2 0e       	add	r14, r18
    147e:	10 62       	ori	r17, 0x20	; 32
    1480:	0c c0       	rjmp	.+24     	; 0x149a <vfprintf+0x108>
    1482:	8e 32       	cpi	r24, 0x2E	; 46
    1484:	21 f4       	brne	.+8      	; 0x148e <vfprintf+0xfc>
    1486:	16 fd       	sbrc	r17, 6
    1488:	6c c1       	rjmp	.+728    	; 0x1762 <vfprintf+0x3d0>
    148a:	10 64       	ori	r17, 0x40	; 64
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x108>
    148e:	8c 36       	cpi	r24, 0x6C	; 108
    1490:	11 f4       	brne	.+4      	; 0x1496 <vfprintf+0x104>
    1492:	10 68       	ori	r17, 0x80	; 128
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x108>
    1496:	88 36       	cpi	r24, 0x68	; 104
    1498:	59 f4       	brne	.+22     	; 0x14b0 <vfprintf+0x11e>
    149a:	ec 85       	ldd	r30, Y+12	; 0x0c
    149c:	fd 85       	ldd	r31, Y+13	; 0x0d
    149e:	93 fd       	sbrc	r25, 3
    14a0:	85 91       	lpm	r24, Z+
    14a2:	93 ff       	sbrs	r25, 3
    14a4:	81 91       	ld	r24, Z+
    14a6:	fd 87       	std	Y+13, r31	; 0x0d
    14a8:	ec 87       	std	Y+12, r30	; 0x0c
    14aa:	88 23       	and	r24, r24
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <vfprintf+0x11e>
    14ae:	b8 cf       	rjmp	.-144    	; 0x1420 <vfprintf+0x8e>
    14b0:	98 2f       	mov	r25, r24
    14b2:	95 54       	subi	r25, 0x45	; 69
    14b4:	93 30       	cpi	r25, 0x03	; 3
    14b6:	18 f0       	brcs	.+6      	; 0x14be <vfprintf+0x12c>
    14b8:	90 52       	subi	r25, 0x20	; 32
    14ba:	93 30       	cpi	r25, 0x03	; 3
    14bc:	38 f4       	brcc	.+14     	; 0x14cc <vfprintf+0x13a>
    14be:	24 e0       	ldi	r18, 0x04	; 4
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	a2 0e       	add	r10, r18
    14c4:	b3 1e       	adc	r11, r19
    14c6:	3f e3       	ldi	r19, 0x3F	; 63
    14c8:	39 83       	std	Y+1, r19	; 0x01
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <vfprintf+0x158>
    14cc:	83 36       	cpi	r24, 0x63	; 99
    14ce:	31 f0       	breq	.+12     	; 0x14dc <vfprintf+0x14a>
    14d0:	83 37       	cpi	r24, 0x73	; 115
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <vfprintf+0x162>
    14d4:	83 35       	cpi	r24, 0x53	; 83
    14d6:	09 f0       	breq	.+2      	; 0x14da <vfprintf+0x148>
    14d8:	5a c0       	rjmp	.+180    	; 0x158e <vfprintf+0x1fc>
    14da:	22 c0       	rjmp	.+68     	; 0x1520 <vfprintf+0x18e>
    14dc:	f5 01       	movw	r30, r10
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	22 e0       	ldi	r18, 0x02	; 2
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a2 0e       	add	r10, r18
    14e8:	b3 1e       	adc	r11, r19
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	c2 2e       	mov	r12, r18
    14ee:	d1 2c       	mov	r13, r1
    14f0:	42 01       	movw	r8, r4
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <vfprintf+0x18a>
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	29 2e       	mov	r2, r25
    14f8:	31 2c       	mov	r3, r1
    14fa:	2a 0c       	add	r2, r10
    14fc:	3b 1c       	adc	r3, r11
    14fe:	f5 01       	movw	r30, r10
    1500:	80 80       	ld	r8, Z
    1502:	91 80       	ldd	r9, Z+1	; 0x01
    1504:	16 ff       	sbrs	r17, 6
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfprintf+0x17c>
    1508:	6f 2d       	mov	r22, r15
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <vfprintf+0x180>
    150e:	6f ef       	ldi	r22, 0xFF	; 255
    1510:	7f ef       	ldi	r23, 0xFF	; 255
    1512:	c4 01       	movw	r24, r8
    1514:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <strnlen>
    1518:	6c 01       	movw	r12, r24
    151a:	51 01       	movw	r10, r2
    151c:	1f 77       	andi	r17, 0x7F	; 127
    151e:	15 c0       	rjmp	.+42     	; 0x154a <vfprintf+0x1b8>
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	28 2e       	mov	r2, r24
    1524:	31 2c       	mov	r3, r1
    1526:	2a 0c       	add	r2, r10
    1528:	3b 1c       	adc	r3, r11
    152a:	f5 01       	movw	r30, r10
    152c:	80 80       	ld	r8, Z
    152e:	91 80       	ldd	r9, Z+1	; 0x01
    1530:	16 ff       	sbrs	r17, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x1a8>
    1534:	6f 2d       	mov	r22, r15
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x1ac>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c4 01       	movw	r24, r8
    1540:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <strnlen_P>
    1544:	6c 01       	movw	r12, r24
    1546:	10 68       	ori	r17, 0x80	; 128
    1548:	51 01       	movw	r10, r2
    154a:	13 fd       	sbrc	r17, 3
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <vfprintf+0x1f4>
    154e:	06 c0       	rjmp	.+12     	; 0x155c <vfprintf+0x1ca>
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    155a:	ea 94       	dec	r14
    155c:	8e 2d       	mov	r24, r14
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	c8 16       	cp	r12, r24
    1562:	d9 06       	cpc	r13, r25
    1564:	a8 f3       	brcs	.-22     	; 0x1550 <vfprintf+0x1be>
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <vfprintf+0x1f4>
    1568:	f4 01       	movw	r30, r8
    156a:	17 fd       	sbrc	r17, 7
    156c:	85 91       	lpm	r24, Z+
    156e:	17 ff       	sbrs	r17, 7
    1570:	81 91       	ld	r24, Z+
    1572:	4f 01       	movw	r8, r30
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	b3 01       	movw	r22, r6
    1578:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    157c:	e1 10       	cpse	r14, r1
    157e:	ea 94       	dec	r14
    1580:	08 94       	sec
    1582:	c1 08       	sbc	r12, r1
    1584:	d1 08       	sbc	r13, r1
    1586:	c1 14       	cp	r12, r1
    1588:	d1 04       	cpc	r13, r1
    158a:	71 f7       	brne	.-36     	; 0x1568 <vfprintf+0x1d6>
    158c:	e7 c0       	rjmp	.+462    	; 0x175c <vfprintf+0x3ca>
    158e:	84 36       	cpi	r24, 0x64	; 100
    1590:	11 f0       	breq	.+4      	; 0x1596 <vfprintf+0x204>
    1592:	89 36       	cpi	r24, 0x69	; 105
    1594:	51 f5       	brne	.+84     	; 0x15ea <vfprintf+0x258>
    1596:	f5 01       	movw	r30, r10
    1598:	17 ff       	sbrs	r17, 7
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <vfprintf+0x218>
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	a2 81       	ldd	r26, Z+2	; 0x02
    15a2:	b3 81       	ldd	r27, Z+3	; 0x03
    15a4:	24 e0       	ldi	r18, 0x04	; 4
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <vfprintf+0x228>
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	aa 27       	eor	r26, r26
    15b0:	97 fd       	sbrc	r25, 7
    15b2:	a0 95       	com	r26
    15b4:	ba 2f       	mov	r27, r26
    15b6:	22 e0       	ldi	r18, 0x02	; 2
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	a2 0e       	add	r10, r18
    15bc:	b3 1e       	adc	r11, r19
    15be:	01 2f       	mov	r16, r17
    15c0:	0f 76       	andi	r16, 0x6F	; 111
    15c2:	b7 ff       	sbrs	r27, 7
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <vfprintf+0x244>
    15c6:	b0 95       	com	r27
    15c8:	a0 95       	com	r26
    15ca:	90 95       	com	r25
    15cc:	81 95       	neg	r24
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	af 4f       	sbci	r26, 0xFF	; 255
    15d2:	bf 4f       	sbci	r27, 0xFF	; 255
    15d4:	00 68       	ori	r16, 0x80	; 128
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	a2 01       	movw	r20, r4
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__ultoa_invert>
    15e4:	d8 2e       	mov	r13, r24
    15e6:	d4 18       	sub	r13, r4
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <vfprintf+0x2d6>
    15ea:	85 37       	cpi	r24, 0x75	; 117
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <vfprintf+0x264>
    15ee:	1f 7e       	andi	r17, 0xEF	; 239
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	20 c0       	rjmp	.+64     	; 0x1636 <vfprintf+0x2a4>
    15f6:	19 7f       	andi	r17, 0xF9	; 249
    15f8:	8f 36       	cpi	r24, 0x6F	; 111
    15fa:	a9 f0       	breq	.+42     	; 0x1626 <vfprintf+0x294>
    15fc:	80 37       	cpi	r24, 0x70	; 112
    15fe:	20 f4       	brcc	.+8      	; 0x1608 <vfprintf+0x276>
    1600:	88 35       	cpi	r24, 0x58	; 88
    1602:	09 f0       	breq	.+2      	; 0x1606 <vfprintf+0x274>
    1604:	ae c0       	rjmp	.+348    	; 0x1762 <vfprintf+0x3d0>
    1606:	0b c0       	rjmp	.+22     	; 0x161e <vfprintf+0x28c>
    1608:	80 37       	cpi	r24, 0x70	; 112
    160a:	21 f0       	breq	.+8      	; 0x1614 <vfprintf+0x282>
    160c:	88 37       	cpi	r24, 0x78	; 120
    160e:	09 f0       	breq	.+2      	; 0x1612 <vfprintf+0x280>
    1610:	a8 c0       	rjmp	.+336    	; 0x1762 <vfprintf+0x3d0>
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <vfprintf+0x284>
    1614:	10 61       	ori	r17, 0x10	; 16
    1616:	14 ff       	sbrs	r17, 4
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x29a>
    161a:	14 60       	ori	r17, 0x04	; 4
    161c:	07 c0       	rjmp	.+14     	; 0x162c <vfprintf+0x29a>
    161e:	14 ff       	sbrs	r17, 4
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <vfprintf+0x2a0>
    1622:	16 60       	ori	r17, 0x06	; 6
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x2a0>
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <vfprintf+0x2a4>
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x2a4>
    1632:	20 e1       	ldi	r18, 0x10	; 16
    1634:	32 e0       	ldi	r19, 0x02	; 2
    1636:	f5 01       	movw	r30, r10
    1638:	17 ff       	sbrs	r17, 7
    163a:	07 c0       	rjmp	.+14     	; 0x164a <vfprintf+0x2b8>
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	44 e0       	ldi	r20, 0x04	; 4
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x2c4>
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	42 e0       	ldi	r20, 0x02	; 2
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	a4 0e       	add	r10, r20
    1658:	b5 1e       	adc	r11, r21
    165a:	a2 01       	movw	r20, r4
    165c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__ultoa_invert>
    1660:	d8 2e       	mov	r13, r24
    1662:	d4 18       	sub	r13, r4
    1664:	01 2f       	mov	r16, r17
    1666:	0f 77       	andi	r16, 0x7F	; 127
    1668:	06 ff       	sbrs	r16, 6
    166a:	09 c0       	rjmp	.+18     	; 0x167e <vfprintf+0x2ec>
    166c:	0e 7f       	andi	r16, 0xFE	; 254
    166e:	df 14       	cp	r13, r15
    1670:	30 f4       	brcc	.+12     	; 0x167e <vfprintf+0x2ec>
    1672:	04 ff       	sbrs	r16, 4
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfprintf+0x2f0>
    1676:	02 fd       	sbrc	r16, 2
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <vfprintf+0x2f0>
    167a:	0f 7e       	andi	r16, 0xEF	; 239
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x2f0>
    167e:	1d 2d       	mov	r17, r13
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <vfprintf+0x2f2>
    1682:	1f 2d       	mov	r17, r15
    1684:	80 2f       	mov	r24, r16
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	04 ff       	sbrs	r16, 4
    168a:	0c c0       	rjmp	.+24     	; 0x16a4 <vfprintf+0x312>
    168c:	fe 01       	movw	r30, r28
    168e:	ed 0d       	add	r30, r13
    1690:	f1 1d       	adc	r31, r1
    1692:	20 81       	ld	r18, Z
    1694:	20 33       	cpi	r18, 0x30	; 48
    1696:	11 f4       	brne	.+4      	; 0x169c <vfprintf+0x30a>
    1698:	09 7e       	andi	r16, 0xE9	; 233
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <vfprintf+0x31c>
    169c:	02 ff       	sbrs	r16, 2
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x31a>
    16a0:	1e 5f       	subi	r17, 0xFE	; 254
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <vfprintf+0x31c>
    16a4:	86 78       	andi	r24, 0x86	; 134
    16a6:	90 70       	andi	r25, 0x00	; 0
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x31c>
    16ac:	1f 5f       	subi	r17, 0xFF	; 255
    16ae:	80 2e       	mov	r8, r16
    16b0:	99 24       	eor	r9, r9
    16b2:	03 fd       	sbrc	r16, 3
    16b4:	12 c0       	rjmp	.+36     	; 0x16da <vfprintf+0x348>
    16b6:	00 ff       	sbrs	r16, 0
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <vfprintf+0x342>
    16ba:	fd 2c       	mov	r15, r13
    16bc:	1e 15       	cp	r17, r14
    16be:	50 f4       	brcc	.+20     	; 0x16d4 <vfprintf+0x342>
    16c0:	fe 0c       	add	r15, r14
    16c2:	f1 1a       	sub	r15, r17
    16c4:	1e 2d       	mov	r17, r14
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0x342>
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    16d2:	1f 5f       	subi	r17, 0xFF	; 255
    16d4:	1e 15       	cp	r17, r14
    16d6:	c0 f3       	brcs	.-16     	; 0x16c8 <vfprintf+0x336>
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <vfprintf+0x350>
    16da:	1e 15       	cp	r17, r14
    16dc:	10 f4       	brcc	.+4      	; 0x16e2 <vfprintf+0x350>
    16de:	e1 1a       	sub	r14, r17
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <vfprintf+0x352>
    16e2:	ee 24       	eor	r14, r14
    16e4:	84 fe       	sbrs	r8, 4
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <vfprintf+0x374>
    16e8:	80 e3       	ldi	r24, 0x30	; 48
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b3 01       	movw	r22, r6
    16ee:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    16f2:	82 fe       	sbrs	r8, 2
    16f4:	1f c0       	rjmp	.+62     	; 0x1734 <vfprintf+0x3a2>
    16f6:	81 fe       	sbrs	r8, 1
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x36e>
    16fa:	88 e5       	ldi	r24, 0x58	; 88
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	10 c0       	rjmp	.+32     	; 0x1720 <vfprintf+0x38e>
    1700:	88 e7       	ldi	r24, 0x78	; 120
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <vfprintf+0x38e>
    1706:	c4 01       	movw	r24, r8
    1708:	86 78       	andi	r24, 0x86	; 134
    170a:	90 70       	andi	r25, 0x00	; 0
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	91 f0       	breq	.+36     	; 0x1734 <vfprintf+0x3a2>
    1710:	81 fc       	sbrc	r8, 1
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x386>
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	01 c0       	rjmp	.+2      	; 0x171a <vfprintf+0x388>
    1718:	8b e2       	ldi	r24, 0x2B	; 43
    171a:	07 fd       	sbrc	r16, 7
    171c:	8d e2       	ldi	r24, 0x2D	; 45
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	b3 01       	movw	r22, r6
    1722:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <vfprintf+0x3a2>
    1728:	80 e3       	ldi	r24, 0x30	; 48
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	b3 01       	movw	r22, r6
    172e:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    1732:	fa 94       	dec	r15
    1734:	df 14       	cp	r13, r15
    1736:	c0 f3       	brcs	.-16     	; 0x1728 <vfprintf+0x396>
    1738:	da 94       	dec	r13
    173a:	f2 01       	movw	r30, r4
    173c:	ed 0d       	add	r30, r13
    173e:	f1 1d       	adc	r31, r1
    1740:	80 81       	ld	r24, Z
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	b3 01       	movw	r22, r6
    1746:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    174a:	dd 20       	and	r13, r13
    174c:	a9 f7       	brne	.-22     	; 0x1738 <vfprintf+0x3a6>
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x3ca>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	b3 01       	movw	r22, r6
    1756:	0e 94 26 0c 	call	0x184c	; 0x184c <fputc>
    175a:	ea 94       	dec	r14
    175c:	ee 20       	and	r14, r14
    175e:	c1 f7       	brne	.-16     	; 0x1750 <vfprintf+0x3be>
    1760:	40 ce       	rjmp	.-896    	; 0x13e2 <vfprintf+0x50>
    1762:	f3 01       	movw	r30, r6
    1764:	86 81       	ldd	r24, Z+6	; 0x06
    1766:	97 81       	ldd	r25, Z+7	; 0x07
    1768:	02 c0       	rjmp	.+4      	; 0x176e <vfprintf+0x3dc>
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	2d 96       	adiw	r28, 0x0d	; 13
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	df 90       	pop	r13
    1788:	cf 90       	pop	r12
    178a:	bf 90       	pop	r11
    178c:	af 90       	pop	r10
    178e:	9f 90       	pop	r9
    1790:	8f 90       	pop	r8
    1792:	7f 90       	pop	r7
    1794:	6f 90       	pop	r6
    1796:	5f 90       	pop	r5
    1798:	4f 90       	pop	r4
    179a:	3f 90       	pop	r3
    179c:	2f 90       	pop	r2
    179e:	08 95       	ret

000017a0 <strnlen_P>:
    17a0:	fc 01       	movw	r30, r24
    17a2:	05 90       	lpm	r0, Z+
    17a4:	61 50       	subi	r22, 0x01	; 1
    17a6:	70 40       	sbci	r23, 0x00	; 0
    17a8:	01 10       	cpse	r0, r1
    17aa:	d8 f7       	brcc	.-10     	; 0x17a2 <strnlen_P+0x2>
    17ac:	80 95       	com	r24
    17ae:	90 95       	com	r25
    17b0:	8e 0f       	add	r24, r30
    17b2:	9f 1f       	adc	r25, r31
    17b4:	08 95       	ret

000017b6 <strnlen>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	61 50       	subi	r22, 0x01	; 1
    17ba:	70 40       	sbci	r23, 0x00	; 0
    17bc:	01 90       	ld	r0, Z+
    17be:	01 10       	cpse	r0, r1
    17c0:	d8 f7       	brcc	.-10     	; 0x17b8 <strnlen+0x2>
    17c2:	80 95       	com	r24
    17c4:	90 95       	com	r25
    17c6:	8e 0f       	add	r24, r30
    17c8:	9f 1f       	adc	r25, r31
    17ca:	08 95       	ret

000017cc <fgetc>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	ec 01       	movw	r28, r24
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	20 ff       	sbrs	r18, 0
    17d6:	35 c0       	rjmp	.+106    	; 0x1842 <fgetc+0x76>
    17d8:	26 ff       	sbrs	r18, 6
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <fgetc+0x22>
    17dc:	2f 7b       	andi	r18, 0xBF	; 191
    17de:	2b 83       	std	Y+3, r18	; 0x03
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 c0       	rjmp	.+80     	; 0x183e <fgetc+0x72>
    17ee:	22 ff       	sbrs	r18, 2
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <fgetc+0x44>
    17f2:	e8 81       	ld	r30, Y
    17f4:	f9 81       	ldd	r31, Y+1	; 0x01
    17f6:	80 81       	ld	r24, Z
    17f8:	99 27       	eor	r25, r25
    17fa:	87 fd       	sbrc	r24, 7
    17fc:	90 95       	com	r25
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	19 f4       	brne	.+6      	; 0x1808 <fgetc+0x3c>
    1802:	20 62       	ori	r18, 0x20	; 32
    1804:	2b 83       	std	Y+3, r18	; 0x03
    1806:	1d c0       	rjmp	.+58     	; 0x1842 <fgetc+0x76>
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	f9 83       	std	Y+1, r31	; 0x01
    180c:	e8 83       	st	Y, r30
    180e:	11 c0       	rjmp	.+34     	; 0x1832 <fgetc+0x66>
    1810:	ea 85       	ldd	r30, Y+10	; 0x0a
    1812:	fb 85       	ldd	r31, Y+11	; 0x0b
    1814:	ce 01       	movw	r24, r28
    1816:	19 95       	eicall
    1818:	97 ff       	sbrs	r25, 7
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <fgetc+0x66>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	8f 3f       	cpi	r24, 0xFF	; 255
    1822:	93 07       	cpc	r25, r19
    1824:	11 f4       	brne	.+4      	; 0x182a <fgetc+0x5e>
    1826:	80 e1       	ldi	r24, 0x10	; 16
    1828:	01 c0       	rjmp	.+2      	; 0x182c <fgetc+0x60>
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	82 2b       	or	r24, r18
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <fgetc+0x76>
    1832:	2e 81       	ldd	r18, Y+6	; 0x06
    1834:	3f 81       	ldd	r19, Y+7	; 0x07
    1836:	2f 5f       	subi	r18, 0xFF	; 255
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	3f 83       	std	Y+7, r19	; 0x07
    183c:	2e 83       	std	Y+6, r18	; 0x06
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <fgetc+0x7a>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <fputc>:
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	8c 01       	movw	r16, r24
    1856:	eb 01       	movw	r28, r22
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 ff       	sbrs	r24, 1
    185c:	1b c0       	rjmp	.+54     	; 0x1894 <fputc+0x48>
    185e:	82 ff       	sbrs	r24, 2
    1860:	0d c0       	rjmp	.+26     	; 0x187c <fputc+0x30>
    1862:	2e 81       	ldd	r18, Y+6	; 0x06
    1864:	3f 81       	ldd	r19, Y+7	; 0x07
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	28 17       	cp	r18, r24
    186c:	39 07       	cpc	r19, r25
    186e:	64 f4       	brge	.+24     	; 0x1888 <fputc+0x3c>
    1870:	e8 81       	ld	r30, Y
    1872:	f9 81       	ldd	r31, Y+1	; 0x01
    1874:	01 93       	st	Z+, r16
    1876:	f9 83       	std	Y+1, r31	; 0x01
    1878:	e8 83       	st	Y, r30
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <fputc+0x3c>
    187c:	e8 85       	ldd	r30, Y+8	; 0x08
    187e:	f9 85       	ldd	r31, Y+9	; 0x09
    1880:	80 2f       	mov	r24, r16
    1882:	19 95       	eicall
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	31 f4       	brne	.+12     	; 0x1894 <fputc+0x48>
    1888:	8e 81       	ldd	r24, Y+6	; 0x06
    188a:	9f 81       	ldd	r25, Y+7	; 0x07
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	9f 83       	std	Y+7, r25	; 0x07
    1890:	8e 83       	std	Y+6, r24	; 0x06
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <fputc+0x4c>
    1894:	0f ef       	ldi	r16, 0xFF	; 255
    1896:	1f ef       	ldi	r17, 0xFF	; 255
    1898:	c8 01       	movw	r24, r16
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <__ultoa_invert>:
    18a4:	fa 01       	movw	r30, r20
    18a6:	aa 27       	eor	r26, r26
    18a8:	28 30       	cpi	r18, 0x08	; 8
    18aa:	51 f1       	breq	.+84     	; 0x1900 <__ultoa_invert+0x5c>
    18ac:	20 31       	cpi	r18, 0x10	; 16
    18ae:	81 f1       	breq	.+96     	; 0x1910 <__ultoa_invert+0x6c>
    18b0:	e8 94       	clt
    18b2:	6f 93       	push	r22
    18b4:	6e 7f       	andi	r22, 0xFE	; 254
    18b6:	6e 5f       	subi	r22, 0xFE	; 254
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	8f 4f       	sbci	r24, 0xFF	; 255
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	af 4f       	sbci	r26, 0xFF	; 255
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	3e d0       	rcall	.+124    	; 0x1940 <__ultoa_invert+0x9c>
    18c4:	b4 e0       	ldi	r27, 0x04	; 4
    18c6:	3c d0       	rcall	.+120    	; 0x1940 <__ultoa_invert+0x9c>
    18c8:	67 0f       	add	r22, r23
    18ca:	78 1f       	adc	r23, r24
    18cc:	89 1f       	adc	r24, r25
    18ce:	9a 1f       	adc	r25, r26
    18d0:	a1 1d       	adc	r26, r1
    18d2:	68 0f       	add	r22, r24
    18d4:	79 1f       	adc	r23, r25
    18d6:	8a 1f       	adc	r24, r26
    18d8:	91 1d       	adc	r25, r1
    18da:	a1 1d       	adc	r26, r1
    18dc:	6a 0f       	add	r22, r26
    18de:	71 1d       	adc	r23, r1
    18e0:	81 1d       	adc	r24, r1
    18e2:	91 1d       	adc	r25, r1
    18e4:	a1 1d       	adc	r26, r1
    18e6:	20 d0       	rcall	.+64     	; 0x1928 <__ultoa_invert+0x84>
    18e8:	09 f4       	brne	.+2      	; 0x18ec <__ultoa_invert+0x48>
    18ea:	68 94       	set
    18ec:	3f 91       	pop	r19
    18ee:	2a e0       	ldi	r18, 0x0A	; 10
    18f0:	26 9f       	mul	r18, r22
    18f2:	11 24       	eor	r1, r1
    18f4:	30 19       	sub	r19, r0
    18f6:	30 5d       	subi	r19, 0xD0	; 208
    18f8:	31 93       	st	Z+, r19
    18fa:	de f6       	brtc	.-74     	; 0x18b2 <__ultoa_invert+0xe>
    18fc:	cf 01       	movw	r24, r30
    18fe:	08 95       	ret
    1900:	46 2f       	mov	r20, r22
    1902:	47 70       	andi	r20, 0x07	; 7
    1904:	40 5d       	subi	r20, 0xD0	; 208
    1906:	41 93       	st	Z+, r20
    1908:	b3 e0       	ldi	r27, 0x03	; 3
    190a:	0f d0       	rcall	.+30     	; 0x192a <__ultoa_invert+0x86>
    190c:	c9 f7       	brne	.-14     	; 0x1900 <__ultoa_invert+0x5c>
    190e:	f6 cf       	rjmp	.-20     	; 0x18fc <__ultoa_invert+0x58>
    1910:	46 2f       	mov	r20, r22
    1912:	4f 70       	andi	r20, 0x0F	; 15
    1914:	40 5d       	subi	r20, 0xD0	; 208
    1916:	4a 33       	cpi	r20, 0x3A	; 58
    1918:	18 f0       	brcs	.+6      	; 0x1920 <__ultoa_invert+0x7c>
    191a:	49 5d       	subi	r20, 0xD9	; 217
    191c:	31 fd       	sbrc	r19, 1
    191e:	40 52       	subi	r20, 0x20	; 32
    1920:	41 93       	st	Z+, r20
    1922:	02 d0       	rcall	.+4      	; 0x1928 <__ultoa_invert+0x84>
    1924:	a9 f7       	brne	.-22     	; 0x1910 <__ultoa_invert+0x6c>
    1926:	ea cf       	rjmp	.-44     	; 0x18fc <__ultoa_invert+0x58>
    1928:	b4 e0       	ldi	r27, 0x04	; 4
    192a:	a6 95       	lsr	r26
    192c:	97 95       	ror	r25
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	ba 95       	dec	r27
    1936:	c9 f7       	brne	.-14     	; 0x192a <__ultoa_invert+0x86>
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	61 05       	cpc	r22, r1
    193c:	71 05       	cpc	r23, r1
    193e:	08 95       	ret
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	0a 2e       	mov	r0, r26
    1946:	06 94       	lsr	r0
    1948:	57 95       	ror	r21
    194a:	47 95       	ror	r20
    194c:	37 95       	ror	r19
    194e:	27 95       	ror	r18
    1950:	ba 95       	dec	r27
    1952:	c9 f7       	brne	.-14     	; 0x1946 <__ultoa_invert+0xa2>
    1954:	62 0f       	add	r22, r18
    1956:	73 1f       	adc	r23, r19
    1958:	84 1f       	adc	r24, r20
    195a:	95 1f       	adc	r25, r21
    195c:	a0 1d       	adc	r26, r0
    195e:	08 95       	ret

00001960 <_exit>:
    1960:	f8 94       	cli

00001962 <__stop_program>:
    1962:	ff cf       	rjmp	.-2      	; 0x1962 <__stop_program>
